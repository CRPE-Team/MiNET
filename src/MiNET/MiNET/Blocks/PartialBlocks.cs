using System;
using System.Collections.Generic;
using MiNET.Utils;

namespace MiNET.Blocks
{

	public partial class AcaciaButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:acacia_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (AcaciaButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:acacia_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (AcaciaDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaDoubleSlab : DoubleWoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:acacia_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (AcaciaDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaFence : FenceBase
	{
		public override string Id => "minecraft:acacia_fence";
	} // class

	public partial class AcaciaFenceGate : FenceGateBase
	{
		private MiNET.Blocks.States.InWallBit _inWallBit = new MiNET.Blocks.States.InWallBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:acacia_fence_gate";

		[StateBit]
		public override bool InWallBit { get => Convert.ToBoolean(_inWallBit.Value); set => NotifyStateUpdate(_inWallBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _inWallBit.Name:
						NotifyStateUpdate(_inWallBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _inWallBit;
			yield return _cardinalDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _inWallBit, _cardinalDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (AcaciaFenceGate) base.Clone();

			block._inWallBit = (MiNET.Blocks.States.InWallBit) _inWallBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaHangingSign : HangingSignBase
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:acacia_hanging_sign";

		[StateBit]
		public override bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		[StateBit]
		public override bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _facingDirection;
			yield return _groundSignDirection;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _facingDirection, _groundSignDirection, _hanging);
		} // method

		public override object Clone()
		{
			var block = (AcaciaHangingSign) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaLeaves : LeavesBase
	{
		private MiNET.Blocks.States.PersistentBit _persistentBit = new MiNET.Blocks.States.PersistentBit();
		private MiNET.Blocks.States.UpdateBit _updateBit = new MiNET.Blocks.States.UpdateBit();

		public override string Id => "minecraft:acacia_leaves";

		[StateBit]
		public override bool PersistentBit { get => Convert.ToBoolean(_persistentBit.Value); set => NotifyStateUpdate(_persistentBit, value); }

		[StateBit]
		public override bool UpdateBit { get => Convert.ToBoolean(_updateBit.Value); set => NotifyStateUpdate(_updateBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _persistentBit.Name:
						NotifyStateUpdate(_persistentBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _updateBit.Name:
						NotifyStateUpdate(_updateBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _persistentBit;
			yield return _updateBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _persistentBit, _updateBit);
		} // method

		public override object Clone()
		{
			var block = (AcaciaLeaves) base.Clone();

			block._persistentBit = (MiNET.Blocks.States.PersistentBit) _persistentBit.Clone();
			block._updateBit = (MiNET.Blocks.States.UpdateBit) _updateBit.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:acacia_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (AcaciaLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaPlanks : PlanksBase
	{
		public override string Id => "minecraft:acacia_planks";
	} // class

	public partial class AcaciaPressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:acacia_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (AcaciaPressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaSapling : SaplingBase
	{
		private MiNET.Blocks.States.AgeBit _ageBit = new MiNET.Blocks.States.AgeBit();

		public override string Id => "minecraft:acacia_sapling";

		[StateBit]
		public override bool AgeBit { get => Convert.ToBoolean(_ageBit.Value); set => NotifyStateUpdate(_ageBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _ageBit.Name:
						NotifyStateUpdate(_ageBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _ageBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _ageBit);
		} // method

		public override object Clone()
		{
			var block = (AcaciaSapling) base.Clone();

			block._ageBit = (MiNET.Blocks.States.AgeBit) _ageBit.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaSlab : WoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:acacia_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (AcaciaSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaStairs : WoodenStairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:acacia_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (AcaciaStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaStandingSign : StandingSignBase
	{
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();

		public override string Id => "minecraft:acacia_standing_sign";

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _groundSignDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _groundSignDirection);
		} // method

		public override object Clone()
		{
			var block = (AcaciaStandingSign) base.Clone();

			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:acacia_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (AcaciaTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaWallSign : WallSignBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:acacia_wall_sign";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (AcaciaWallSign) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class AcaciaWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.X.Clone();

		public override string Id => "minecraft:acacia_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (AcaciaWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class ActivatorRail : Block
	{
		private MiNET.Blocks.States.RailDataBit _railDataBit = new MiNET.Blocks.States.RailDataBit();
		private MiNET.Blocks.States.RailDirection _railDirection = new MiNET.Blocks.States.RailDirection();

		public override string Id => "minecraft:activator_rail";

		[StateBit]
		public bool RailDataBit { get => Convert.ToBoolean(_railDataBit.Value); set => NotifyStateUpdate(_railDataBit, value); }

		[StateRange(0, 5)]
		public int RailDirection { get => _railDirection.Value; set => NotifyStateUpdate(_railDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _railDataBit.Name:
						NotifyStateUpdate(_railDataBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _railDirection.Name:
						NotifyStateUpdate(_railDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _railDataBit;
			yield return _railDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _railDataBit, _railDirection);
		} // method

		public override object Clone()
		{
			var block = (ActivatorRail) base.Clone();

			block._railDataBit = (MiNET.Blocks.States.RailDataBit) _railDataBit.Clone();
			block._railDirection = (MiNET.Blocks.States.RailDirection) _railDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Air : Block
	{
		public override string Id => "minecraft:air";
	} // class

	public partial class Allium : FlowerBase
	{
		public override string Id => "minecraft:allium";
	} // class

	public partial class Allow : Block
	{
		public override string Id => "minecraft:allow";
	} // class

	public partial class AmethystBlock : Block
	{
		public override string Id => "minecraft:amethyst_block";
	} // class

	public partial class AmethystCluster : Block
	{
		private MiNET.Blocks.States.BlockFace _blockFace = (States.BlockFace) MiNET.Blocks.States.BlockFace.Down.Clone();

		public override string Id => "minecraft:amethyst_cluster";

		[StateEnum("down", "east", "north", "south", "up", "west")]
		public MiNET.Blocks.States.BlockFace BlockFace { get => _blockFace; set => NotifyStateUpdate(_blockFace, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _blockFace.Name:
						NotifyStateUpdate(_blockFace, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _blockFace;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _blockFace);
		} // method

		public override object Clone()
		{
			var block = (AmethystCluster) base.Clone();

			block._blockFace = (MiNET.Blocks.States.BlockFace) _blockFace.Clone();

			return block;
		} // method
	} // class

	public partial class AncientDebris : Block
	{
		public override string Id => "minecraft:ancient_debris";
	} // class

	public partial class Andesite : Block
	{
		public override string Id => "minecraft:andesite";
	} // class

	public partial class AndesiteDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:andesite_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (AndesiteDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class AndesiteSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:andesite_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (AndesiteSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class AndesiteStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:andesite_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (AndesiteStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class AndesiteWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit() { Value = 1 };

		public override string Id => "minecraft:andesite_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (AndesiteWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class Anvil : AnvilBase
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:anvil";

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (Anvil) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Azalea : Block
	{
		public override string Id => "minecraft:azalea";
	} // class

	public partial class AzaleaLeaves : LeavesBase
	{
		private MiNET.Blocks.States.PersistentBit _persistentBit = new MiNET.Blocks.States.PersistentBit();
		private MiNET.Blocks.States.UpdateBit _updateBit = new MiNET.Blocks.States.UpdateBit();

		public override string Id => "minecraft:azalea_leaves";

		[StateBit]
		public override bool PersistentBit { get => Convert.ToBoolean(_persistentBit.Value); set => NotifyStateUpdate(_persistentBit, value); }

		[StateBit]
		public override bool UpdateBit { get => Convert.ToBoolean(_updateBit.Value); set => NotifyStateUpdate(_updateBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _persistentBit.Name:
						NotifyStateUpdate(_persistentBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _updateBit.Name:
						NotifyStateUpdate(_updateBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _persistentBit;
			yield return _updateBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _persistentBit, _updateBit);
		} // method

		public override object Clone()
		{
			var block = (AzaleaLeaves) base.Clone();

			block._persistentBit = (MiNET.Blocks.States.PersistentBit) _persistentBit.Clone();
			block._updateBit = (MiNET.Blocks.States.UpdateBit) _updateBit.Clone();

			return block;
		} // method
	} // class

	public partial class AzaleaLeavesFlowered : Block
	{
		private MiNET.Blocks.States.PersistentBit _persistentBit = new MiNET.Blocks.States.PersistentBit();
		private MiNET.Blocks.States.UpdateBit _updateBit = new MiNET.Blocks.States.UpdateBit();

		public override string Id => "minecraft:azalea_leaves_flowered";

		[StateBit]
		public bool PersistentBit { get => Convert.ToBoolean(_persistentBit.Value); set => NotifyStateUpdate(_persistentBit, value); }

		[StateBit]
		public bool UpdateBit { get => Convert.ToBoolean(_updateBit.Value); set => NotifyStateUpdate(_updateBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _persistentBit.Name:
						NotifyStateUpdate(_persistentBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _updateBit.Name:
						NotifyStateUpdate(_updateBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _persistentBit;
			yield return _updateBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _persistentBit, _updateBit);
		} // method

		public override object Clone()
		{
			var block = (AzaleaLeavesFlowered) base.Clone();

			block._persistentBit = (MiNET.Blocks.States.PersistentBit) _persistentBit.Clone();
			block._updateBit = (MiNET.Blocks.States.UpdateBit) _updateBit.Clone();

			return block;
		} // method
	} // class

	public partial class AzureBluet : FlowerBase
	{
		public override string Id => "minecraft:azure_bluet";
	} // class

	public partial class Bamboo : Block
	{
		private MiNET.Blocks.States.AgeBit _ageBit = new MiNET.Blocks.States.AgeBit();
		private MiNET.Blocks.States.BambooLeafSize _bambooLeafSize = (States.BambooLeafSize) MiNET.Blocks.States.BambooLeafSize.NoLeaves.Clone();
		private MiNET.Blocks.States.BambooStalkThickness _bambooStalkThickness = (States.BambooStalkThickness) MiNET.Blocks.States.BambooStalkThickness.Thin.Clone();

		public override string Id => "minecraft:bamboo";

		[StateBit]
		public bool AgeBit { get => Convert.ToBoolean(_ageBit.Value); set => NotifyStateUpdate(_ageBit, value); }

		[StateEnum("large_leaves", "no_leaves", "small_leaves")]
		public MiNET.Blocks.States.BambooLeafSize BambooLeafSize { get => _bambooLeafSize; set => NotifyStateUpdate(_bambooLeafSize, value.Value); }

		[StateEnum("thick", "thin")]
		public MiNET.Blocks.States.BambooStalkThickness BambooStalkThickness { get => _bambooStalkThickness; set => NotifyStateUpdate(_bambooStalkThickness, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _ageBit.Name:
						NotifyStateUpdate(_ageBit, s.Value);
						break;
					case BlockStateString s when s.Name == _bambooLeafSize.Name:
						NotifyStateUpdate(_bambooLeafSize, s.Value);
						break;
					case BlockStateString s when s.Name == _bambooStalkThickness.Name:
						NotifyStateUpdate(_bambooStalkThickness, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _ageBit;
			yield return _bambooLeafSize;
			yield return _bambooStalkThickness;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _ageBit, _bambooLeafSize, _bambooStalkThickness);
		} // method

		public override object Clone()
		{
			var block = (Bamboo) base.Clone();

			block._ageBit = (MiNET.Blocks.States.AgeBit) _ageBit.Clone();
			block._bambooLeafSize = (MiNET.Blocks.States.BambooLeafSize) _bambooLeafSize.Clone();
			block._bambooStalkThickness = (MiNET.Blocks.States.BambooStalkThickness) _bambooStalkThickness.Clone();

			return block;
		} // method
	} // class

	public partial class BambooBlock : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:bamboo_block";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (BambooBlock) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class BambooButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:bamboo_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (BambooButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BambooDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:bamboo_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (BambooDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class BambooDoubleSlab : DoubleWoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:bamboo_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (BambooDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class BambooFence : FenceBase
	{
		public override string Id => "minecraft:bamboo_fence";
	} // class

	public partial class BambooFenceGate : FenceGateBase
	{
		private MiNET.Blocks.States.InWallBit _inWallBit = new MiNET.Blocks.States.InWallBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:bamboo_fence_gate";

		[StateBit]
		public override bool InWallBit { get => Convert.ToBoolean(_inWallBit.Value); set => NotifyStateUpdate(_inWallBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _inWallBit.Name:
						NotifyStateUpdate(_inWallBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _inWallBit;
			yield return _cardinalDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _inWallBit, _cardinalDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (BambooFenceGate) base.Clone();

			block._inWallBit = (MiNET.Blocks.States.InWallBit) _inWallBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class BambooHangingSign : HangingSignBase
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:bamboo_hanging_sign";

		[StateBit]
		public override bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		[StateBit]
		public override bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _facingDirection;
			yield return _groundSignDirection;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _facingDirection, _groundSignDirection, _hanging);
		} // method

		public override object Clone()
		{
			var block = (BambooHangingSign) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class BambooMosaic : Block
	{
		public override string Id => "minecraft:bamboo_mosaic";
	} // class

	public partial class BambooMosaicDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:bamboo_mosaic_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (BambooMosaicDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class BambooMosaicSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:bamboo_mosaic_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (BambooMosaicSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class BambooMosaicStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:bamboo_mosaic_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (BambooMosaicStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BambooPlanks : PlanksBase
	{
		public override string Id => "minecraft:bamboo_planks";
	} // class

	public partial class BambooPressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:bamboo_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (BambooPressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class BambooSapling : SaplingBase
	{
		private MiNET.Blocks.States.AgeBit _ageBit = new MiNET.Blocks.States.AgeBit();

		public override string Id => "minecraft:bamboo_sapling";

		[StateBit]
		public override bool AgeBit { get => Convert.ToBoolean(_ageBit.Value); set => NotifyStateUpdate(_ageBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _ageBit.Name:
						NotifyStateUpdate(_ageBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _ageBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _ageBit);
		} // method

		public override object Clone()
		{
			var block = (BambooSapling) base.Clone();

			block._ageBit = (MiNET.Blocks.States.AgeBit) _ageBit.Clone();

			return block;
		} // method
	} // class

	public partial class BambooSlab : WoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:bamboo_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (BambooSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class BambooStairs : WoodenStairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:bamboo_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (BambooStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BambooStandingSign : StandingSignBase
	{
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();

		public override string Id => "minecraft:bamboo_standing_sign";

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _groundSignDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _groundSignDirection);
		} // method

		public override object Clone()
		{
			var block = (BambooStandingSign) base.Clone();

			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BambooTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:bamboo_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (BambooTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class BambooWallSign : WallSignBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:bamboo_wall_sign";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (BambooWallSign) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Barrel : Block
	{
		private MiNET.Blocks.States.OldFacingDirection1 _facingDirection = new MiNET.Blocks.States.OldFacingDirection1();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:barrel";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection1 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateBit]
		public bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (Barrel) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection1) _facingDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class Barrier : Block
	{
		public override string Id => "minecraft:barrier";
	} // class

	public partial class Basalt : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:basalt";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (Basalt) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class Beacon : Block
	{
		public override string Id => "minecraft:beacon";
	} // class

	public partial class Bed : Block
	{
		private MiNET.Blocks.States.OldDirection1 _direction = new MiNET.Blocks.States.OldDirection1();
		private MiNET.Blocks.States.HeadPieceBit _headPieceBit = new MiNET.Blocks.States.HeadPieceBit();
		private MiNET.Blocks.States.OccupiedBit _occupiedBit = new MiNET.Blocks.States.OccupiedBit();

		public override string Id => "minecraft:bed";

		[StateRange(0, 3)]
		public MiNET.Blocks.States.OldDirection1 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public bool HeadPieceBit { get => Convert.ToBoolean(_headPieceBit.Value); set => NotifyStateUpdate(_headPieceBit, value); }

		[StateBit]
		public bool OccupiedBit { get => Convert.ToBoolean(_occupiedBit.Value); set => NotifyStateUpdate(_occupiedBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _headPieceBit.Name:
						NotifyStateUpdate(_headPieceBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _occupiedBit.Name:
						NotifyStateUpdate(_occupiedBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _headPieceBit;
			yield return _occupiedBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _headPieceBit, _occupiedBit);
		} // method

		public override object Clone()
		{
			var block = (Bed) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection1) _direction.Clone();
			block._headPieceBit = (MiNET.Blocks.States.HeadPieceBit) _headPieceBit.Clone();
			block._occupiedBit = (MiNET.Blocks.States.OccupiedBit) _occupiedBit.Clone();

			return block;
		} // method
	} // class

	public partial class Bedrock : Block
	{
		private MiNET.Blocks.States.InfiniburnBit _infiniburnBit = new MiNET.Blocks.States.InfiniburnBit();

		public override string Id => "minecraft:bedrock";

		[StateBit]
		public bool InfiniburnBit { get => Convert.ToBoolean(_infiniburnBit.Value); set => NotifyStateUpdate(_infiniburnBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _infiniburnBit.Name:
						NotifyStateUpdate(_infiniburnBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _infiniburnBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _infiniburnBit);
		} // method

		public override object Clone()
		{
			var block = (Bedrock) base.Clone();

			block._infiniburnBit = (MiNET.Blocks.States.InfiniburnBit) _infiniburnBit.Clone();

			return block;
		} // method
	} // class

	public partial class BeeNest : Block
	{
		private MiNET.Blocks.States.OldDirection1 _direction = new MiNET.Blocks.States.OldDirection1();
		private MiNET.Blocks.States.HoneyLevel _honeyLevel = new MiNET.Blocks.States.HoneyLevel();

		public override string Id => "minecraft:bee_nest";

		[StateRange(0, 3)]
		public MiNET.Blocks.States.OldDirection1 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateRange(0, 5)]
		public int HoneyLevel { get => _honeyLevel.Value; set => NotifyStateUpdate(_honeyLevel, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateInt s when s.Name == _honeyLevel.Name:
						NotifyStateUpdate(_honeyLevel, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _honeyLevel;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _honeyLevel);
		} // method

		public override object Clone()
		{
			var block = (BeeNest) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection1) _direction.Clone();
			block._honeyLevel = (MiNET.Blocks.States.HoneyLevel) _honeyLevel.Clone();

			return block;
		} // method
	} // class

	public partial class Beehive : Block
	{
		private MiNET.Blocks.States.OldDirection1 _direction = new MiNET.Blocks.States.OldDirection1();
		private MiNET.Blocks.States.HoneyLevel _honeyLevel = new MiNET.Blocks.States.HoneyLevel();

		public override string Id => "minecraft:beehive";

		[StateRange(0, 3)]
		public MiNET.Blocks.States.OldDirection1 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateRange(0, 5)]
		public int HoneyLevel { get => _honeyLevel.Value; set => NotifyStateUpdate(_honeyLevel, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateInt s when s.Name == _honeyLevel.Name:
						NotifyStateUpdate(_honeyLevel, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _honeyLevel;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _honeyLevel);
		} // method

		public override object Clone()
		{
			var block = (Beehive) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection1) _direction.Clone();
			block._honeyLevel = (MiNET.Blocks.States.HoneyLevel) _honeyLevel.Clone();

			return block;
		} // method
	} // class

	public partial class Beetroot
	{
		private MiNET.Blocks.States.Growth _growth = new MiNET.Blocks.States.Growth();

		public override string Id => "minecraft:beetroot";

		[StateRange(0, 7)]
		public override int Growth { get => _growth.Value; set => NotifyStateUpdate(_growth, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _growth.Name:
						NotifyStateUpdate(_growth, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _growth;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _growth);
		} // method

		public override object Clone()
		{
			var block = (Beetroot) base.Clone();

			block._growth = (MiNET.Blocks.States.Growth) _growth.Clone();

			return block;
		} // method
	} // class

	public partial class Bell : Block
	{
		private MiNET.Blocks.States.Attachment _attachment = (States.Attachment) MiNET.Blocks.States.Attachment.Standing.Clone();
		private MiNET.Blocks.States.OldDirection2 _direction = new MiNET.Blocks.States.OldDirection2();
		private MiNET.Blocks.States.ToggleBit _toggleBit = new MiNET.Blocks.States.ToggleBit();

		public override string Id => "minecraft:bell";

		[StateEnum("hanging", "multiple", "side", "standing")]
		public MiNET.Blocks.States.Attachment Attachment { get => _attachment; set => NotifyStateUpdate(_attachment, value.Value); }

		[StateRange(0, 3)]
		public MiNET.Blocks.States.OldDirection2 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public bool ToggleBit { get => Convert.ToBoolean(_toggleBit.Value); set => NotifyStateUpdate(_toggleBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _attachment.Name:
						NotifyStateUpdate(_attachment, s.Value);
						break;
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _toggleBit.Name:
						NotifyStateUpdate(_toggleBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachment;
			yield return _direction;
			yield return _toggleBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachment, _direction, _toggleBit);
		} // method

		public override object Clone()
		{
			var block = (Bell) base.Clone();

			block._attachment = (MiNET.Blocks.States.Attachment) _attachment.Clone();
			block._direction = (MiNET.Blocks.States.OldDirection2) _direction.Clone();
			block._toggleBit = (MiNET.Blocks.States.ToggleBit) _toggleBit.Clone();

			return block;
		} // method
	} // class

	public partial class BigDripleaf : Block
	{
		private MiNET.Blocks.States.BigDripleafHead _bigDripleafHead = new MiNET.Blocks.States.BigDripleafHead();
		private MiNET.Blocks.States.BigDripleafTilt _bigDripleafTilt = (States.BigDripleafTilt) MiNET.Blocks.States.BigDripleafTilt.None.Clone();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:big_dripleaf";

		[StateBit]
		public bool BigDripleafHead { get => Convert.ToBoolean(_bigDripleafHead.Value); set => NotifyStateUpdate(_bigDripleafHead, value); }

		[StateEnum("full_tilt", "none", "partial_tilt", "unstable")]
		public MiNET.Blocks.States.BigDripleafTilt BigDripleafTilt { get => _bigDripleafTilt; set => NotifyStateUpdate(_bigDripleafTilt, value.Value); }

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _bigDripleafHead.Name:
						NotifyStateUpdate(_bigDripleafHead, s.Value);
						break;
					case BlockStateString s when s.Name == _bigDripleafTilt.Name:
						NotifyStateUpdate(_bigDripleafTilt, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _bigDripleafHead;
			yield return _bigDripleafTilt;
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _bigDripleafHead, _bigDripleafTilt, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (BigDripleaf) base.Clone();

			block._bigDripleafHead = (MiNET.Blocks.States.BigDripleafHead) _bigDripleafHead.Clone();
			block._bigDripleafTilt = (MiNET.Blocks.States.BigDripleafTilt) _bigDripleafTilt.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BirchButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:birch_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (BirchButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BirchDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:birch_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (BirchDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class BirchDoubleSlab : DoubleWoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:birch_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (BirchDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class BirchFence : FenceBase
	{
		public override string Id => "minecraft:birch_fence";
	} // class

	public partial class BirchFenceGate : FenceGateBase
	{
		private MiNET.Blocks.States.InWallBit _inWallBit = new MiNET.Blocks.States.InWallBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:birch_fence_gate";

		[StateBit]
		public override bool InWallBit { get => Convert.ToBoolean(_inWallBit.Value); set => NotifyStateUpdate(_inWallBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _inWallBit.Name:
						NotifyStateUpdate(_inWallBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _inWallBit;
			yield return _cardinalDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _inWallBit, _cardinalDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (BirchFenceGate) base.Clone();

			block._inWallBit = (MiNET.Blocks.States.InWallBit) _inWallBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class BirchHangingSign : HangingSignBase
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:birch_hanging_sign";

		[StateBit]
		public override bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		[StateBit]
		public override bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _facingDirection;
			yield return _groundSignDirection;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _facingDirection, _groundSignDirection, _hanging);
		} // method

		public override object Clone()
		{
			var block = (BirchHangingSign) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class BirchLeaves : LeavesBase
	{
		private MiNET.Blocks.States.PersistentBit _persistentBit = new MiNET.Blocks.States.PersistentBit();
		private MiNET.Blocks.States.UpdateBit _updateBit = new MiNET.Blocks.States.UpdateBit();

		public override string Id => "minecraft:birch_leaves";

		[StateBit]
		public override bool PersistentBit { get => Convert.ToBoolean(_persistentBit.Value); set => NotifyStateUpdate(_persistentBit, value); }

		[StateBit]
		public override bool UpdateBit { get => Convert.ToBoolean(_updateBit.Value); set => NotifyStateUpdate(_updateBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _persistentBit.Name:
						NotifyStateUpdate(_persistentBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _updateBit.Name:
						NotifyStateUpdate(_updateBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _persistentBit;
			yield return _updateBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _persistentBit, _updateBit);
		} // method

		public override object Clone()
		{
			var block = (BirchLeaves) base.Clone();

			block._persistentBit = (MiNET.Blocks.States.PersistentBit) _persistentBit.Clone();
			block._updateBit = (MiNET.Blocks.States.UpdateBit) _updateBit.Clone();

			return block;
		} // method
	} // class

	public partial class BirchLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:birch_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (BirchLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class BirchPlanks : PlanksBase
	{
		public override string Id => "minecraft:birch_planks";
	} // class

	public partial class BirchPressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:birch_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (BirchPressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class BirchSapling : SaplingBase
	{
		private MiNET.Blocks.States.AgeBit _ageBit = new MiNET.Blocks.States.AgeBit();

		public override string Id => "minecraft:birch_sapling";

		[StateBit]
		public override bool AgeBit { get => Convert.ToBoolean(_ageBit.Value); set => NotifyStateUpdate(_ageBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _ageBit.Name:
						NotifyStateUpdate(_ageBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _ageBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _ageBit);
		} // method

		public override object Clone()
		{
			var block = (BirchSapling) base.Clone();

			block._ageBit = (MiNET.Blocks.States.AgeBit) _ageBit.Clone();

			return block;
		} // method
	} // class

	public partial class BirchSlab : WoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:birch_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (BirchSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class BirchStairs : WoodenStairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:birch_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (BirchStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BirchStandingSign : StandingSignBase
	{
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();

		public override string Id => "minecraft:birch_standing_sign";

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _groundSignDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _groundSignDirection);
		} // method

		public override object Clone()
		{
			var block = (BirchStandingSign) base.Clone();

			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BirchTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:birch_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (BirchTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class BirchWallSign : WallSignBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:birch_wall_sign";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (BirchWallSign) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BirchWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.X.Clone();

		public override string Id => "minecraft:birch_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (BirchWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class BlackCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:black_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (BlackCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class BlackCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:black_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (BlackCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class BlackCarpet : CarpetBase
	{
		public override string Id => "minecraft:black_carpet";
	} // class

	public partial class BlackConcrete : ConcreteBase
	{
		public override string Id => "minecraft:black_concrete";
	} // class

	public partial class BlackConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:black_concrete_powder";
	} // class

	public partial class BlackGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:black_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (BlackGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BlackShulkerBox : Block
	{
		public override string Id => "minecraft:black_shulker_box";
	} // class

	public partial class BlackStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:black_stained_glass";
	} // class

	public partial class BlackStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:black_stained_glass_pane";
	} // class

	public partial class BlackTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:black_terracotta";
	} // class

	public partial class BlackWool : WoolBase
	{
		public override string Id => "minecraft:black_wool";
	} // class

	public partial class Blackstone : Block
	{
		public override string Id => "minecraft:blackstone";
	} // class

	public partial class BlackstoneDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:blackstone_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (BlackstoneDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class BlackstoneSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:blackstone_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (BlackstoneSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class BlackstoneStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:blackstone_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (BlackstoneStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BlackstoneWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:blackstone_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (BlackstoneWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class BlastFurnace
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:blast_furnace";

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (BlastFurnace) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BlueCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:blue_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (BlueCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class BlueCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:blue_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (BlueCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class BlueCarpet : CarpetBase
	{
		public override string Id => "minecraft:blue_carpet";
	} // class

	public partial class BlueConcrete : ConcreteBase
	{
		public override string Id => "minecraft:blue_concrete";
	} // class

	public partial class BlueConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:blue_concrete_powder";
	} // class

	public partial class BlueGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:blue_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (BlueGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BlueIce : Block
	{
		public override string Id => "minecraft:blue_ice";
	} // class

	public partial class BlueOrchid : FlowerBase
	{
		public override string Id => "minecraft:blue_orchid";
	} // class

	public partial class BlueShulkerBox : Block
	{
		public override string Id => "minecraft:blue_shulker_box";
	} // class

	public partial class BlueStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:blue_stained_glass";
	} // class

	public partial class BlueStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:blue_stained_glass_pane";
	} // class

	public partial class BlueTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:blue_terracotta";
	} // class

	public partial class BlueWool : WoolBase
	{
		public override string Id => "minecraft:blue_wool";
	} // class

	public partial class BoneBlock : Block
	{
		private MiNET.Blocks.States.Deprecated _deprecated = new MiNET.Blocks.States.Deprecated();
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:bone_block";

		[StateRange(0, 3)]
		public int Deprecated { get => _deprecated.Value; set => NotifyStateUpdate(_deprecated, value); }

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _deprecated.Name:
						NotifyStateUpdate(_deprecated, s.Value);
						break;
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _deprecated;
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _deprecated, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (BoneBlock) base.Clone();

			block._deprecated = (MiNET.Blocks.States.Deprecated) _deprecated.Clone();
			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class Bookshelf : Block
	{
		public override string Id => "minecraft:bookshelf";
	} // class

	public partial class BorderBlock : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:border_block";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (BorderBlock) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class BrainCoral : Block
	{
		public override string Id => "minecraft:brain_coral";
	} // class

	public partial class BrainCoralBlock : Block
	{
		public override string Id => "minecraft:brain_coral_block";
	} // class

	public partial class BrainCoralFan : CoralFanBase
	{
		private MiNET.Blocks.States.CoralFanDirection _coralFanDirection = new MiNET.Blocks.States.CoralFanDirection() { Value = 1 };

		public override string Id => "minecraft:brain_coral_fan";

		[StateRange(0, 1)]
		public override MiNET.Blocks.States.CoralFanDirection CoralFanDirection { get => _coralFanDirection; set => NotifyStateUpdate(_coralFanDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralFanDirection.Name:
						NotifyStateUpdate(_coralFanDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralFanDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralFanDirection);
		} // method

		public override object Clone()
		{
			var block = (BrainCoralFan) base.Clone();

			block._coralFanDirection = (MiNET.Blocks.States.CoralFanDirection) _coralFanDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BrainCoralWallFan : CoralWallFanBase
	{
		private MiNET.Blocks.States.CoralDirection _coralDirection = new MiNET.Blocks.States.CoralDirection() { Value = 1 };

		public override string Id => "minecraft:brain_coral_wall_fan";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.CoralDirection CoralDirection { get => _coralDirection; set => NotifyStateUpdate(_coralDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralDirection.Name:
						NotifyStateUpdate(_coralDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralDirection);
		} // method

		public override object Clone()
		{
			var block = (BrainCoralWallFan) base.Clone();

			block._coralDirection = (MiNET.Blocks.States.CoralDirection) _coralDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BrewingStand : Block
	{
		private MiNET.Blocks.States.BrewingStandSlotABit _brewingStandSlotABit = new MiNET.Blocks.States.BrewingStandSlotABit();
		private MiNET.Blocks.States.BrewingStandSlotBBit _brewingStandSlotBBit = new MiNET.Blocks.States.BrewingStandSlotBBit();
		private MiNET.Blocks.States.BrewingStandSlotCBit _brewingStandSlotCBit = new MiNET.Blocks.States.BrewingStandSlotCBit();

		public override string Id => "minecraft:brewing_stand";

		[StateBit]
		public bool BrewingStandSlotABit { get => Convert.ToBoolean(_brewingStandSlotABit.Value); set => NotifyStateUpdate(_brewingStandSlotABit, value); }

		[StateBit]
		public bool BrewingStandSlotBBit { get => Convert.ToBoolean(_brewingStandSlotBBit.Value); set => NotifyStateUpdate(_brewingStandSlotBBit, value); }

		[StateBit]
		public bool BrewingStandSlotCBit { get => Convert.ToBoolean(_brewingStandSlotCBit.Value); set => NotifyStateUpdate(_brewingStandSlotCBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _brewingStandSlotABit.Name:
						NotifyStateUpdate(_brewingStandSlotABit, s.Value);
						break;
					case BlockStateByte s when s.Name == _brewingStandSlotBBit.Name:
						NotifyStateUpdate(_brewingStandSlotBBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _brewingStandSlotCBit.Name:
						NotifyStateUpdate(_brewingStandSlotCBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _brewingStandSlotABit;
			yield return _brewingStandSlotBBit;
			yield return _brewingStandSlotCBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _brewingStandSlotABit, _brewingStandSlotBBit, _brewingStandSlotCBit);
		} // method

		public override object Clone()
		{
			var block = (BrewingStand) base.Clone();

			block._brewingStandSlotABit = (MiNET.Blocks.States.BrewingStandSlotABit) _brewingStandSlotABit.Clone();
			block._brewingStandSlotBBit = (MiNET.Blocks.States.BrewingStandSlotBBit) _brewingStandSlotBBit.Clone();
			block._brewingStandSlotCBit = (MiNET.Blocks.States.BrewingStandSlotCBit) _brewingStandSlotCBit.Clone();

			return block;
		} // method
	} // class

	public partial class BrickBlock : Block
	{
		public override string Id => "minecraft:brick_block";
	} // class

	public partial class BrickDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:brick_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (BrickDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class BrickSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:brick_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (BrickSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class BrickStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:brick_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (BrickStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BrickWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit() { Value = 1 };

		public override string Id => "minecraft:brick_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (BrickWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class BrownCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:brown_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (BrownCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class BrownCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:brown_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (BrownCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class BrownCarpet : CarpetBase
	{
		public override string Id => "minecraft:brown_carpet";
	} // class

	public partial class BrownConcrete : ConcreteBase
	{
		public override string Id => "minecraft:brown_concrete";
	} // class

	public partial class BrownConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:brown_concrete_powder";
	} // class

	public partial class BrownGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:brown_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (BrownGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BrownMushroom : Block
	{
		public override string Id => "minecraft:brown_mushroom";
	} // class

	public partial class BrownMushroomBlock : Block
	{
		private MiNET.Blocks.States.HugeMushroomBits _hugeMushroomBits = new MiNET.Blocks.States.HugeMushroomBits();

		public override string Id => "minecraft:brown_mushroom_block";

		[StateRange(0, 15)]
		public int HugeMushroomBits { get => _hugeMushroomBits.Value; set => NotifyStateUpdate(_hugeMushroomBits, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _hugeMushroomBits.Name:
						NotifyStateUpdate(_hugeMushroomBits, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _hugeMushroomBits;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _hugeMushroomBits);
		} // method

		public override object Clone()
		{
			var block = (BrownMushroomBlock) base.Clone();

			block._hugeMushroomBits = (MiNET.Blocks.States.HugeMushroomBits) _hugeMushroomBits.Clone();

			return block;
		} // method
	} // class

	public partial class BrownShulkerBox : Block
	{
		public override string Id => "minecraft:brown_shulker_box";
	} // class

	public partial class BrownStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:brown_stained_glass";
	} // class

	public partial class BrownStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:brown_stained_glass_pane";
	} // class

	public partial class BrownTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:brown_terracotta";
	} // class

	public partial class BrownWool : WoolBase
	{
		public override string Id => "minecraft:brown_wool";
	} // class

	public partial class BubbleColumn : Block
	{
		private MiNET.Blocks.States.DragDown _dragDown = new MiNET.Blocks.States.DragDown();

		public override string Id => "minecraft:bubble_column";

		[StateBit]
		public bool DragDown { get => Convert.ToBoolean(_dragDown.Value); set => NotifyStateUpdate(_dragDown, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _dragDown.Name:
						NotifyStateUpdate(_dragDown, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _dragDown;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _dragDown);
		} // method

		public override object Clone()
		{
			var block = (BubbleColumn) base.Clone();

			block._dragDown = (MiNET.Blocks.States.DragDown) _dragDown.Clone();

			return block;
		} // method
	} // class

	public partial class BubbleCoral : Block
	{
		public override string Id => "minecraft:bubble_coral";
	} // class

	public partial class BubbleCoralBlock : Block
	{
		public override string Id => "minecraft:bubble_coral_block";
	} // class

	public partial class BubbleCoralFan : CoralFanBase
	{
		private MiNET.Blocks.States.CoralFanDirection _coralFanDirection = new MiNET.Blocks.States.CoralFanDirection() { Value = 1 };

		public override string Id => "minecraft:bubble_coral_fan";

		[StateRange(0, 1)]
		public override MiNET.Blocks.States.CoralFanDirection CoralFanDirection { get => _coralFanDirection; set => NotifyStateUpdate(_coralFanDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralFanDirection.Name:
						NotifyStateUpdate(_coralFanDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralFanDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralFanDirection);
		} // method

		public override object Clone()
		{
			var block = (BubbleCoralFan) base.Clone();

			block._coralFanDirection = (MiNET.Blocks.States.CoralFanDirection) _coralFanDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BubbleCoralWallFan : CoralWallFanBase
	{
		private MiNET.Blocks.States.CoralDirection _coralDirection = new MiNET.Blocks.States.CoralDirection();

		public override string Id => "minecraft:bubble_coral_wall_fan";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.CoralDirection CoralDirection { get => _coralDirection; set => NotifyStateUpdate(_coralDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralDirection.Name:
						NotifyStateUpdate(_coralDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralDirection);
		} // method

		public override object Clone()
		{
			var block = (BubbleCoralWallFan) base.Clone();

			block._coralDirection = (MiNET.Blocks.States.CoralDirection) _coralDirection.Clone();

			return block;
		} // method
	} // class

	public partial class BuddingAmethyst : Block
	{
		public override string Id => "minecraft:budding_amethyst";
	} // class

	public partial class Cactus : Block
	{
		private MiNET.Blocks.States.Age _age = new MiNET.Blocks.States.Age();

		public override string Id => "minecraft:cactus";

		[StateRange(0, 15)]
		public int Age { get => _age.Value; set => NotifyStateUpdate(_age, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _age.Name:
						NotifyStateUpdate(_age, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _age;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _age);
		} // method

		public override object Clone()
		{
			var block = (Cactus) base.Clone();

			block._age = (MiNET.Blocks.States.Age) _age.Clone();

			return block;
		} // method
	} // class

	public partial class Cake : Block
	{
		private MiNET.Blocks.States.BiteCounter _biteCounter = new MiNET.Blocks.States.BiteCounter();

		public override string Id => "minecraft:cake";

		[StateRange(0, 6)]
		public int BiteCounter { get => _biteCounter.Value; set => NotifyStateUpdate(_biteCounter, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _biteCounter.Name:
						NotifyStateUpdate(_biteCounter, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _biteCounter;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _biteCounter);
		} // method

		public override object Clone()
		{
			var block = (Cake) base.Clone();

			block._biteCounter = (MiNET.Blocks.States.BiteCounter) _biteCounter.Clone();

			return block;
		} // method
	} // class

	public partial class Calcite : Block
	{
		public override string Id => "minecraft:calcite";
	} // class

	public partial class CalibratedSculkSensor : Block
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.SculkSensorPhase _sculkSensorPhase = new MiNET.Blocks.States.SculkSensorPhase();

		public override string Id => "minecraft:calibrated_sculk_sensor";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateRange(0, 2)]
		public int SculkSensorPhase { get => _sculkSensorPhase.Value; set => NotifyStateUpdate(_sculkSensorPhase, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _sculkSensorPhase.Name:
						NotifyStateUpdate(_sculkSensorPhase, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
			yield return _sculkSensorPhase;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection, _sculkSensorPhase);
		} // method

		public override object Clone()
		{
			var block = (CalibratedSculkSensor) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._sculkSensorPhase = (MiNET.Blocks.States.SculkSensorPhase) _sculkSensorPhase.Clone();

			return block;
		} // method
	} // class

	public partial class Camera : Block
	{
		public override string Id => "minecraft:camera";
	} // class

	public partial class Campfire : Block
	{
		private MiNET.Blocks.States.Extinguished _extinguished = new MiNET.Blocks.States.Extinguished();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:campfire";

		[StateBit]
		public bool Extinguished { get => Convert.ToBoolean(_extinguished.Value); set => NotifyStateUpdate(_extinguished, value); }

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _extinguished.Name:
						NotifyStateUpdate(_extinguished, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _extinguished;
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _extinguished, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (Campfire) base.Clone();

			block._extinguished = (MiNET.Blocks.States.Extinguished) _extinguished.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Candle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (Candle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class CandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (CandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class Carrots
	{
		private MiNET.Blocks.States.Growth _growth = new MiNET.Blocks.States.Growth();

		public override string Id => "minecraft:carrots";

		[StateRange(0, 7)]
		public override int Growth { get => _growth.Value; set => NotifyStateUpdate(_growth, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _growth.Name:
						NotifyStateUpdate(_growth, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _growth;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _growth);
		} // method

		public override object Clone()
		{
			var block = (Carrots) base.Clone();

			block._growth = (MiNET.Blocks.States.Growth) _growth.Clone();

			return block;
		} // method
	} // class

	public partial class CartographyTable : Block
	{
		public override string Id => "minecraft:cartography_table";
	} // class

	public partial class CarvedPumpkin : Block
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:carved_pumpkin";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (CarvedPumpkin) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Cauldron : Block
	{
		private MiNET.Blocks.States.CauldronLiquid _cauldronLiquid = (States.CauldronLiquid) MiNET.Blocks.States.CauldronLiquid.Water.Clone();
		private MiNET.Blocks.States.FillLevel _fillLevel = new MiNET.Blocks.States.FillLevel();

		public override string Id => "minecraft:cauldron";

		[StateEnum("lava", "powder_snow", "water")]
		public MiNET.Blocks.States.CauldronLiquid CauldronLiquid { get => _cauldronLiquid; set => NotifyStateUpdate(_cauldronLiquid, value.Value); }

		[StateRange(0, 6)]
		public int FillLevel { get => _fillLevel.Value; set => NotifyStateUpdate(_fillLevel, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cauldronLiquid.Name:
						NotifyStateUpdate(_cauldronLiquid, s.Value);
						break;
					case BlockStateInt s when s.Name == _fillLevel.Name:
						NotifyStateUpdate(_fillLevel, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cauldronLiquid;
			yield return _fillLevel;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cauldronLiquid, _fillLevel);
		} // method

		public override object Clone()
		{
			var block = (Cauldron) base.Clone();

			block._cauldronLiquid = (MiNET.Blocks.States.CauldronLiquid) _cauldronLiquid.Clone();
			block._fillLevel = (MiNET.Blocks.States.FillLevel) _fillLevel.Clone();

			return block;
		} // method
	} // class

	public partial class CaveVines : Block
	{
		private MiNET.Blocks.States.GrowingPlantAge _growingPlantAge = new MiNET.Blocks.States.GrowingPlantAge();

		public override string Id => "minecraft:cave_vines";

		[StateRange(0, 25)]
		public int GrowingPlantAge { get => _growingPlantAge.Value; set => NotifyStateUpdate(_growingPlantAge, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _growingPlantAge.Name:
						NotifyStateUpdate(_growingPlantAge, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _growingPlantAge;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _growingPlantAge);
		} // method

		public override object Clone()
		{
			var block = (CaveVines) base.Clone();

			block._growingPlantAge = (MiNET.Blocks.States.GrowingPlantAge) _growingPlantAge.Clone();

			return block;
		} // method
	} // class

	public partial class CaveVinesBodyWithBerries : Block
	{
		private MiNET.Blocks.States.GrowingPlantAge _growingPlantAge = new MiNET.Blocks.States.GrowingPlantAge();

		public override string Id => "minecraft:cave_vines_body_with_berries";

		[StateRange(0, 25)]
		public int GrowingPlantAge { get => _growingPlantAge.Value; set => NotifyStateUpdate(_growingPlantAge, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _growingPlantAge.Name:
						NotifyStateUpdate(_growingPlantAge, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _growingPlantAge;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _growingPlantAge);
		} // method

		public override object Clone()
		{
			var block = (CaveVinesBodyWithBerries) base.Clone();

			block._growingPlantAge = (MiNET.Blocks.States.GrowingPlantAge) _growingPlantAge.Clone();

			return block;
		} // method
	} // class

	public partial class CaveVinesHeadWithBerries : Block
	{
		private MiNET.Blocks.States.GrowingPlantAge _growingPlantAge = new MiNET.Blocks.States.GrowingPlantAge();

		public override string Id => "minecraft:cave_vines_head_with_berries";

		[StateRange(0, 25)]
		public int GrowingPlantAge { get => _growingPlantAge.Value; set => NotifyStateUpdate(_growingPlantAge, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _growingPlantAge.Name:
						NotifyStateUpdate(_growingPlantAge, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _growingPlantAge;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _growingPlantAge);
		} // method

		public override object Clone()
		{
			var block = (CaveVinesHeadWithBerries) base.Clone();

			block._growingPlantAge = (MiNET.Blocks.States.GrowingPlantAge) _growingPlantAge.Clone();

			return block;
		} // method
	} // class

	public partial class Chain : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:chain";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (Chain) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class ChainCommandBlock : Block
	{
		private MiNET.Blocks.States.ConditionalBit _conditionalBit = new MiNET.Blocks.States.ConditionalBit();
		private MiNET.Blocks.States.OldFacingDirection1 _facingDirection = new MiNET.Blocks.States.OldFacingDirection1();

		public override string Id => "minecraft:chain_command_block";

		[StateBit]
		public bool ConditionalBit { get => Convert.ToBoolean(_conditionalBit.Value); set => NotifyStateUpdate(_conditionalBit, value); }

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection1 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _conditionalBit.Name:
						NotifyStateUpdate(_conditionalBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _conditionalBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _conditionalBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (ChainCommandBlock) base.Clone();

			block._conditionalBit = (MiNET.Blocks.States.ConditionalBit) _conditionalBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection1) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Chalkboard : Block
	{
		private MiNET.Blocks.States.ChalkboardDirection _direction = new MiNET.Blocks.States.ChalkboardDirection();

		public override string Id => "minecraft:chalkboard";

		[StateRange(0, 15)]
		public MiNET.Blocks.States.ChalkboardDirection Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction);
		} // method

		public override object Clone()
		{
			var block = (Chalkboard) base.Clone();

			block._direction = (MiNET.Blocks.States.ChalkboardDirection) _direction.Clone();

			return block;
		} // method
	} // class

	public partial class ChemicalHeat : Block
	{
		public override string Id => "minecraft:chemical_heat";
	} // class

	public partial class CherryButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:cherry_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (CherryButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class CherryDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:cherry_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (CherryDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class CherryDoubleSlab : DoubleWoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:cherry_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (CherryDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class CherryFence : FenceBase
	{
		public override string Id => "minecraft:cherry_fence";
	} // class

	public partial class CherryFenceGate : FenceGateBase
	{
		private MiNET.Blocks.States.InWallBit _inWallBit = new MiNET.Blocks.States.InWallBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:cherry_fence_gate";

		[StateBit]
		public override bool InWallBit { get => Convert.ToBoolean(_inWallBit.Value); set => NotifyStateUpdate(_inWallBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _inWallBit.Name:
						NotifyStateUpdate(_inWallBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _inWallBit;
			yield return _cardinalDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _inWallBit, _cardinalDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (CherryFenceGate) base.Clone();

			block._inWallBit = (MiNET.Blocks.States.InWallBit) _inWallBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class CherryHangingSign : HangingSignBase
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:cherry_hanging_sign";

		[StateBit]
		public override bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		[StateBit]
		public override bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _facingDirection;
			yield return _groundSignDirection;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _facingDirection, _groundSignDirection, _hanging);
		} // method

		public override object Clone()
		{
			var block = (CherryHangingSign) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class CherryLeaves : LeavesBase
	{
		private MiNET.Blocks.States.PersistentBit _persistentBit = new MiNET.Blocks.States.PersistentBit();
		private MiNET.Blocks.States.UpdateBit _updateBit = new MiNET.Blocks.States.UpdateBit();

		public override string Id => "minecraft:cherry_leaves";

		[StateBit]
		public override bool PersistentBit { get => Convert.ToBoolean(_persistentBit.Value); set => NotifyStateUpdate(_persistentBit, value); }

		[StateBit]
		public override bool UpdateBit { get => Convert.ToBoolean(_updateBit.Value); set => NotifyStateUpdate(_updateBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _persistentBit.Name:
						NotifyStateUpdate(_persistentBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _updateBit.Name:
						NotifyStateUpdate(_updateBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _persistentBit;
			yield return _updateBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _persistentBit, _updateBit);
		} // method

		public override object Clone()
		{
			var block = (CherryLeaves) base.Clone();

			block._persistentBit = (MiNET.Blocks.States.PersistentBit) _persistentBit.Clone();
			block._updateBit = (MiNET.Blocks.States.UpdateBit) _updateBit.Clone();

			return block;
		} // method
	} // class

	public partial class CherryLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:cherry_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (CherryLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class CherryPlanks : PlanksBase
	{
		public override string Id => "minecraft:cherry_planks";
	} // class

	public partial class CherryPressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:cherry_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (CherryPressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class CherrySapling : SaplingBase
	{
		private MiNET.Blocks.States.AgeBit _ageBit = new MiNET.Blocks.States.AgeBit();

		public override string Id => "minecraft:cherry_sapling";

		[StateBit]
		public override bool AgeBit { get => Convert.ToBoolean(_ageBit.Value); set => NotifyStateUpdate(_ageBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _ageBit.Name:
						NotifyStateUpdate(_ageBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _ageBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _ageBit);
		} // method

		public override object Clone()
		{
			var block = (CherrySapling) base.Clone();

			block._ageBit = (MiNET.Blocks.States.AgeBit) _ageBit.Clone();

			return block;
		} // method
	} // class

	public partial class CherrySlab : WoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:cherry_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (CherrySlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class CherryStairs : WoodenStairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:cherry_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (CherryStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class CherryStandingSign : StandingSignBase
	{
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();

		public override string Id => "minecraft:cherry_standing_sign";

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _groundSignDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _groundSignDirection);
		} // method

		public override object Clone()
		{
			var block = (CherryStandingSign) base.Clone();

			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();

			return block;
		} // method
	} // class

	public partial class CherryTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:cherry_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (CherryTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class CherryWallSign : WallSignBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:cherry_wall_sign";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (CherryWallSign) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class CherryWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:cherry_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (CherryWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class Chest
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.North.Clone();

		public override string Id => "minecraft:chest";

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (Chest) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class ChippedAnvil : AnvilBase
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:chipped_anvil";

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (ChippedAnvil) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class ChiseledBookshelf : Block
	{
		private MiNET.Blocks.States.BooksStored _booksStored = new MiNET.Blocks.States.BooksStored();
		private MiNET.Blocks.States.OldDirection1 _direction = new MiNET.Blocks.States.OldDirection1();

		public override string Id => "minecraft:chiseled_bookshelf";

		[StateRange(0, 63)]
		public int BooksStored { get => _booksStored.Value; set => NotifyStateUpdate(_booksStored, value); }

		[StateRange(0, 3)]
		public MiNET.Blocks.States.OldDirection1 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _booksStored.Name:
						NotifyStateUpdate(_booksStored, s.Value);
						break;
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _booksStored;
			yield return _direction;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _booksStored, _direction);
		} // method

		public override object Clone()
		{
			var block = (ChiseledBookshelf) base.Clone();

			block._booksStored = (MiNET.Blocks.States.BooksStored) _booksStored.Clone();
			block._direction = (MiNET.Blocks.States.OldDirection1) _direction.Clone();

			return block;
		} // method
	} // class

	public partial class ChiseledCopper : Block
	{
		public override string Id => "minecraft:chiseled_copper";
	} // class

	public partial class ChiseledDeepslate : Block
	{
		public override string Id => "minecraft:chiseled_deepslate";
	} // class

	public partial class ChiseledNetherBricks : Block
	{
		public override string Id => "minecraft:chiseled_nether_bricks";
	} // class

	public partial class ChiseledPolishedBlackstone : Block
	{
		public override string Id => "minecraft:chiseled_polished_blackstone";
	} // class

	public partial class ChiseledQuartzBlock : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:chiseled_quartz_block";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (ChiseledQuartzBlock) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class ChiseledRedSandstone : Block
	{
		public override string Id => "minecraft:chiseled_red_sandstone";
	} // class

	public partial class ChiseledResinBricks : Block
	{
		public override string Id => "minecraft:chiseled_resin_bricks";
	} // class

	public partial class ChiseledSandstone : Block
	{
		public override string Id => "minecraft:chiseled_sandstone";
	} // class

	public partial class ChiseledStoneBricks : Block
	{
		public override string Id => "minecraft:chiseled_stone_bricks";
	} // class

	public partial class ChiseledTuff : Block
	{
		public override string Id => "minecraft:chiseled_tuff";
	} // class

	public partial class ChiseledTuffBricks : Block
	{
		public override string Id => "minecraft:chiseled_tuff_bricks";
	} // class

	public partial class ChorusFlower : Block
	{
		private MiNET.Blocks.States.Age _age = new MiNET.Blocks.States.Age();

		public override string Id => "minecraft:chorus_flower";

		[StateRange(0, 5)]
		public int Age { get => _age.Value; set => NotifyStateUpdate(_age, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _age.Name:
						NotifyStateUpdate(_age, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _age;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _age);
		} // method

		public override object Clone()
		{
			var block = (ChorusFlower) base.Clone();

			block._age = (MiNET.Blocks.States.Age) _age.Clone();

			return block;
		} // method
	} // class

	public partial class ChorusPlant : Block
	{
		public override string Id => "minecraft:chorus_plant";
	} // class

	public partial class Clay : Block
	{
		public override string Id => "minecraft:clay";
	} // class

	public partial class ClientRequestPlaceholderBlock : Block
	{
		public override string Id => "minecraft:client_request_placeholder_block";
	} // class

	public partial class ClosedEyeblossom : Block
	{
		public override string Id => "minecraft:closed_eyeblossom";
	} // class

	public partial class CoalBlock : Block
	{
		public override string Id => "minecraft:coal_block";
	} // class

	public partial class CoalOre : Block
	{
		public override string Id => "minecraft:coal_ore";
	} // class

	public partial class CoarseDirt : Block
	{
		public override string Id => "minecraft:coarse_dirt";
	} // class

	public partial class CobbledDeepslate : Block
	{
		public override string Id => "minecraft:cobbled_deepslate";
	} // class

	public partial class CobbledDeepslateDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:cobbled_deepslate_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (CobbledDeepslateDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class CobbledDeepslateSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:cobbled_deepslate_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (CobbledDeepslateSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class CobbledDeepslateStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:cobbled_deepslate_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (CobbledDeepslateStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class CobbledDeepslateWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:cobbled_deepslate_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (CobbledDeepslateWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class Cobblestone : Block
	{
		public override string Id => "minecraft:cobblestone";
	} // class

	public partial class CobblestoneDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:cobblestone_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (CobblestoneDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class CobblestoneSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:cobblestone_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (CobblestoneSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class CobblestoneWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:cobblestone_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (CobblestoneWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class Cocoa : Block
	{
		private MiNET.Blocks.States.Age _age = new MiNET.Blocks.States.Age();
		private MiNET.Blocks.States.OldDirection1 _direction = new MiNET.Blocks.States.OldDirection1();

		public override string Id => "minecraft:cocoa";

		[StateRange(0, 2)]
		public int Age { get => _age.Value; set => NotifyStateUpdate(_age, value); }

		[StateRange(0, 3)]
		public MiNET.Blocks.States.OldDirection1 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _age.Name:
						NotifyStateUpdate(_age, s.Value);
						break;
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _age;
			yield return _direction;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _age, _direction);
		} // method

		public override object Clone()
		{
			var block = (Cocoa) base.Clone();

			block._age = (MiNET.Blocks.States.Age) _age.Clone();
			block._direction = (MiNET.Blocks.States.OldDirection1) _direction.Clone();

			return block;
		} // method
	} // class

	public partial class ColoredTorchBlue : ColoredTorchBase
	{
		private MiNET.Blocks.States.TorchFacingDirection _torchFacingDirection = (States.TorchFacingDirection) MiNET.Blocks.States.TorchFacingDirection.Unknown.Clone();

		public override string Id => "minecraft:colored_torch_blue";

		[StateEnum("east", "north", "south", "top", "unknown", "west")]
		public MiNET.Blocks.States.TorchFacingDirection TorchFacingDirection { get => _torchFacingDirection; set => NotifyStateUpdate(_torchFacingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _torchFacingDirection.Name:
						NotifyStateUpdate(_torchFacingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _torchFacingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _torchFacingDirection);
		} // method

		public override object Clone()
		{
			var block = (ColoredTorchBlue) base.Clone();

			block._torchFacingDirection = (MiNET.Blocks.States.TorchFacingDirection) _torchFacingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class ColoredTorchGreen : ColoredTorchBase
	{
		private MiNET.Blocks.States.TorchFacingDirection _torchFacingDirection = (States.TorchFacingDirection) MiNET.Blocks.States.TorchFacingDirection.Unknown.Clone();

		public override string Id => "minecraft:colored_torch_green";

		[StateEnum("east", "north", "south", "top", "unknown", "west")]
		public MiNET.Blocks.States.TorchFacingDirection TorchFacingDirection { get => _torchFacingDirection; set => NotifyStateUpdate(_torchFacingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _torchFacingDirection.Name:
						NotifyStateUpdate(_torchFacingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _torchFacingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _torchFacingDirection);
		} // method

		public override object Clone()
		{
			var block = (ColoredTorchGreen) base.Clone();

			block._torchFacingDirection = (MiNET.Blocks.States.TorchFacingDirection) _torchFacingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class ColoredTorchPurple : ColoredTorchBase
	{
		private MiNET.Blocks.States.TorchFacingDirection _torchFacingDirection = (States.TorchFacingDirection) MiNET.Blocks.States.TorchFacingDirection.Unknown.Clone();

		public override string Id => "minecraft:colored_torch_purple";

		[StateEnum("east", "north", "south", "top", "unknown", "west")]
		public MiNET.Blocks.States.TorchFacingDirection TorchFacingDirection { get => _torchFacingDirection; set => NotifyStateUpdate(_torchFacingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _torchFacingDirection.Name:
						NotifyStateUpdate(_torchFacingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _torchFacingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _torchFacingDirection);
		} // method

		public override object Clone()
		{
			var block = (ColoredTorchPurple) base.Clone();

			block._torchFacingDirection = (MiNET.Blocks.States.TorchFacingDirection) _torchFacingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class ColoredTorchRed : ColoredTorchBase
	{
		private MiNET.Blocks.States.TorchFacingDirection _torchFacingDirection = (States.TorchFacingDirection) MiNET.Blocks.States.TorchFacingDirection.Unknown.Clone();

		public override string Id => "minecraft:colored_torch_red";

		[StateEnum("east", "north", "south", "top", "unknown", "west")]
		public MiNET.Blocks.States.TorchFacingDirection TorchFacingDirection { get => _torchFacingDirection; set => NotifyStateUpdate(_torchFacingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _torchFacingDirection.Name:
						NotifyStateUpdate(_torchFacingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _torchFacingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _torchFacingDirection);
		} // method

		public override object Clone()
		{
			var block = (ColoredTorchRed) base.Clone();

			block._torchFacingDirection = (MiNET.Blocks.States.TorchFacingDirection) _torchFacingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class CommandBlock : Block
	{
		private MiNET.Blocks.States.ConditionalBit _conditionalBit = new MiNET.Blocks.States.ConditionalBit();
		private MiNET.Blocks.States.OldFacingDirection1 _facingDirection = new MiNET.Blocks.States.OldFacingDirection1();

		public override string Id => "minecraft:command_block";

		[StateBit]
		public bool ConditionalBit { get => Convert.ToBoolean(_conditionalBit.Value); set => NotifyStateUpdate(_conditionalBit, value); }

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection1 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _conditionalBit.Name:
						NotifyStateUpdate(_conditionalBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _conditionalBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _conditionalBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (CommandBlock) base.Clone();

			block._conditionalBit = (MiNET.Blocks.States.ConditionalBit) _conditionalBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection1) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Composter : Block
	{
		private MiNET.Blocks.States.ComposterFillLevel _composterFillLevel = new MiNET.Blocks.States.ComposterFillLevel();

		public override string Id => "minecraft:composter";

		[StateRange(0, 8)]
		public int ComposterFillLevel { get => _composterFillLevel.Value; set => NotifyStateUpdate(_composterFillLevel, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _composterFillLevel.Name:
						NotifyStateUpdate(_composterFillLevel, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _composterFillLevel;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _composterFillLevel);
		} // method

		public override object Clone()
		{
			var block = (Composter) base.Clone();

			block._composterFillLevel = (MiNET.Blocks.States.ComposterFillLevel) _composterFillLevel.Clone();

			return block;
		} // method
	} // class

	public partial class CompoundCreator : Block
	{
		private MiNET.Blocks.States.OldDirection _direction = new MiNET.Blocks.States.OldDirection();

		public override string Id => "minecraft:compound_creator";

		[StateRange(0, 3)]
		public int Direction { get => _direction.Value; set => NotifyStateUpdate(_direction, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction);
		} // method

		public override object Clone()
		{
			var block = (CompoundCreator) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection) _direction.Clone();

			return block;
		} // method
	} // class

	public partial class Conduit : Block
	{
		public override string Id => "minecraft:conduit";
	} // class

	public partial class CopperBlock : Block
	{
		public override string Id => "minecraft:copper_block";
	} // class

	public partial class CopperBulb : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();
		private MiNET.Blocks.States.PoweredBit _poweredBit = new MiNET.Blocks.States.PoweredBit();

		public override string Id => "minecraft:copper_bulb";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		[StateBit]
		public bool PoweredBit { get => Convert.ToBoolean(_poweredBit.Value); set => NotifyStateUpdate(_poweredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
					case BlockStateByte s when s.Name == _poweredBit.Name:
						NotifyStateUpdate(_poweredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
			yield return _poweredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit, _poweredBit);
		} // method

		public override object Clone()
		{
			var block = (CopperBulb) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();
			block._poweredBit = (MiNET.Blocks.States.PoweredBit) _poweredBit.Clone();

			return block;
		} // method
	} // class

	public partial class CopperDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:copper_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (CopperDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class CopperGrate : Block
	{
		public override string Id => "minecraft:copper_grate";
	} // class

	public partial class CopperOre : Block
	{
		public override string Id => "minecraft:copper_ore";
	} // class

	public partial class CopperTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:copper_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (CopperTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class Cornflower : FlowerBase
	{
		public override string Id => "minecraft:cornflower";
	} // class

	public partial class CrackedDeepslateBricks : Block
	{
		public override string Id => "minecraft:cracked_deepslate_bricks";
	} // class

	public partial class CrackedDeepslateTiles : Block
	{
		public override string Id => "minecraft:cracked_deepslate_tiles";
	} // class

	public partial class CrackedNetherBricks : Block
	{
		public override string Id => "minecraft:cracked_nether_bricks";
	} // class

	public partial class CrackedPolishedBlackstoneBricks : Block
	{
		public override string Id => "minecraft:cracked_polished_blackstone_bricks";
	} // class

	public partial class CrackedStoneBricks : Block
	{
		public override string Id => "minecraft:cracked_stone_bricks";
	} // class

	public partial class Crafter : Block
	{
		private MiNET.Blocks.States.Crafting _crafting = new MiNET.Blocks.States.Crafting();
		private MiNET.Blocks.States.Orientation _orientation = (States.Orientation) MiNET.Blocks.States.Orientation.DownEast.Clone();
		private MiNET.Blocks.States.TriggeredBit _triggeredBit = new MiNET.Blocks.States.TriggeredBit();

		public override string Id => "minecraft:crafter";

		[StateBit]
		public bool Crafting { get => Convert.ToBoolean(_crafting.Value); set => NotifyStateUpdate(_crafting, value); }

		[StateEnum("down_east", "down_north", "down_south", "down_west", "east_up", "north_up", "south_up", "up_east", "up_north", "up_south", "up_west", "west_up")]
		public MiNET.Blocks.States.Orientation Orientation { get => _orientation; set => NotifyStateUpdate(_orientation, value.Value); }

		[StateBit]
		public bool TriggeredBit { get => Convert.ToBoolean(_triggeredBit.Value); set => NotifyStateUpdate(_triggeredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _crafting.Name:
						NotifyStateUpdate(_crafting, s.Value);
						break;
					case BlockStateString s when s.Name == _orientation.Name:
						NotifyStateUpdate(_orientation, s.Value);
						break;
					case BlockStateByte s when s.Name == _triggeredBit.Name:
						NotifyStateUpdate(_triggeredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _crafting;
			yield return _orientation;
			yield return _triggeredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _crafting, _orientation, _triggeredBit);
		} // method

		public override object Clone()
		{
			var block = (Crafter) base.Clone();

			block._crafting = (MiNET.Blocks.States.Crafting) _crafting.Clone();
			block._orientation = (MiNET.Blocks.States.Orientation) _orientation.Clone();
			block._triggeredBit = (MiNET.Blocks.States.TriggeredBit) _triggeredBit.Clone();

			return block;
		} // method
	} // class

	public partial class CraftingTable : Block
	{
		public override string Id => "minecraft:crafting_table";
	} // class

	public partial class CreakingHeart : Block
	{
		private MiNET.Blocks.States.CreakingHeartState _creakingHeartState = (States.CreakingHeartState) MiNET.Blocks.States.CreakingHeartState.Uprooted.Clone();
		private MiNET.Blocks.States.Natural _natural = new MiNET.Blocks.States.Natural();
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:creaking_heart";

		[StateEnum("awake", "dormant", "uprooted")]
		public MiNET.Blocks.States.CreakingHeartState CreakingHeartState { get => _creakingHeartState; set => NotifyStateUpdate(_creakingHeartState, value.Value); }

		[StateBit]
		public bool Natural { get => Convert.ToBoolean(_natural.Value); set => NotifyStateUpdate(_natural, value); }

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _creakingHeartState.Name:
						NotifyStateUpdate(_creakingHeartState, s.Value);
						break;
					case BlockStateByte s when s.Name == _natural.Name:
						NotifyStateUpdate(_natural, s.Value);
						break;
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _creakingHeartState;
			yield return _natural;
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _creakingHeartState, _natural, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (CreakingHeart) base.Clone();

			block._creakingHeartState = (MiNET.Blocks.States.CreakingHeartState) _creakingHeartState.Clone();
			block._natural = (MiNET.Blocks.States.Natural) _natural.Clone();
			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class CreeperHead : HeadBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:creeper_head";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (CreeperHead) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class CrimsonButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:crimson_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (CrimsonButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class CrimsonDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:crimson_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (CrimsonDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class CrimsonDoubleSlab : DoubleWoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:crimson_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (CrimsonDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class CrimsonFence : FenceBase
	{
		public override string Id => "minecraft:crimson_fence";
	} // class

	public partial class CrimsonFenceGate : FenceGateBase
	{
		private MiNET.Blocks.States.InWallBit _inWallBit = new MiNET.Blocks.States.InWallBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:crimson_fence_gate";

		[StateBit]
		public override bool InWallBit { get => Convert.ToBoolean(_inWallBit.Value); set => NotifyStateUpdate(_inWallBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _inWallBit.Name:
						NotifyStateUpdate(_inWallBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _inWallBit;
			yield return _cardinalDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _inWallBit, _cardinalDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (CrimsonFenceGate) base.Clone();

			block._inWallBit = (MiNET.Blocks.States.InWallBit) _inWallBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class CrimsonFungus : Block
	{
		public override string Id => "minecraft:crimson_fungus";
	} // class

	public partial class CrimsonHangingSign : HangingSignBase
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:crimson_hanging_sign";

		[StateBit]
		public override bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		[StateBit]
		public override bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _facingDirection;
			yield return _groundSignDirection;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _facingDirection, _groundSignDirection, _hanging);
		} // method

		public override object Clone()
		{
			var block = (CrimsonHangingSign) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class CrimsonHyphae : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:crimson_hyphae";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (CrimsonHyphae) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class CrimsonNylium : Block
	{
		public override string Id => "minecraft:crimson_nylium";
	} // class

	public partial class CrimsonPlanks : PlanksBase
	{
		public override string Id => "minecraft:crimson_planks";
	} // class

	public partial class CrimsonPressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:crimson_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (CrimsonPressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class CrimsonRoots : Block
	{
		public override string Id => "minecraft:crimson_roots";
	} // class

	public partial class CrimsonSlab : WoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:crimson_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (CrimsonSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class CrimsonStairs : WoodenStairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:crimson_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (CrimsonStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class CrimsonStandingSign : StandingSignBase
	{
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();

		public override string Id => "minecraft:crimson_standing_sign";

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _groundSignDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _groundSignDirection);
		} // method

		public override object Clone()
		{
			var block = (CrimsonStandingSign) base.Clone();

			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();

			return block;
		} // method
	} // class

	public partial class CrimsonStem : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:crimson_stem";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (CrimsonStem) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class CrimsonTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:crimson_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (CrimsonTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class CrimsonWallSign : WallSignBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:crimson_wall_sign";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (CrimsonWallSign) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class CryingObsidian : Block
	{
		public override string Id => "minecraft:crying_obsidian";
	} // class

	public partial class CutCopper : Block
	{
		public override string Id => "minecraft:cut_copper";
	} // class

	public partial class CutCopperSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (CutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class CutCopperStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:cut_copper_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (CutCopperStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class CutRedSandstone : Block
	{
		public override string Id => "minecraft:cut_red_sandstone";
	} // class

	public partial class CutRedSandstoneDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:cut_red_sandstone_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (CutRedSandstoneDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class CutRedSandstoneSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:cut_red_sandstone_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (CutRedSandstoneSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class CutSandstone : Block
	{
		public override string Id => "minecraft:cut_sandstone";
	} // class

	public partial class CutSandstoneDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:cut_sandstone_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (CutSandstoneDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class CutSandstoneSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:cut_sandstone_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (CutSandstoneSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class CyanCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:cyan_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (CyanCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class CyanCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:cyan_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (CyanCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class CyanCarpet : CarpetBase
	{
		public override string Id => "minecraft:cyan_carpet";
	} // class

	public partial class CyanConcrete : ConcreteBase
	{
		public override string Id => "minecraft:cyan_concrete";
	} // class

	public partial class CyanConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:cyan_concrete_powder";
	} // class

	public partial class CyanGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:cyan_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (CyanGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class CyanShulkerBox : Block
	{
		public override string Id => "minecraft:cyan_shulker_box";
	} // class

	public partial class CyanStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:cyan_stained_glass";
	} // class

	public partial class CyanStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:cyan_stained_glass_pane";
	} // class

	public partial class CyanTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:cyan_terracotta";
	} // class

	public partial class CyanWool : WoolBase
	{
		public override string Id => "minecraft:cyan_wool";
	} // class

	public partial class DamagedAnvil : AnvilBase
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:damaged_anvil";

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (DamagedAnvil) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Dandelion : Block
	{
		public override string Id => "minecraft:dandelion";
	} // class

	public partial class DarkOakButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:dark_oak_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (DarkOakButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DarkOakDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:dark_oak_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (DarkOakDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class DarkOakDoubleSlab : DoubleWoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:dark_oak_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (DarkOakDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class DarkOakFence : FenceBase
	{
		public override string Id => "minecraft:dark_oak_fence";
	} // class

	public partial class DarkOakFenceGate : FenceGateBase
	{
		private MiNET.Blocks.States.InWallBit _inWallBit = new MiNET.Blocks.States.InWallBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:dark_oak_fence_gate";

		[StateBit]
		public override bool InWallBit { get => Convert.ToBoolean(_inWallBit.Value); set => NotifyStateUpdate(_inWallBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _inWallBit.Name:
						NotifyStateUpdate(_inWallBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _inWallBit;
			yield return _cardinalDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _inWallBit, _cardinalDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (DarkOakFenceGate) base.Clone();

			block._inWallBit = (MiNET.Blocks.States.InWallBit) _inWallBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class DarkOakHangingSign : HangingSignBase
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:dark_oak_hanging_sign";

		[StateBit]
		public override bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		[StateBit]
		public override bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _facingDirection;
			yield return _groundSignDirection;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _facingDirection, _groundSignDirection, _hanging);
		} // method

		public override object Clone()
		{
			var block = (DarkOakHangingSign) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class DarkOakLeaves : LeavesBase
	{
		private MiNET.Blocks.States.PersistentBit _persistentBit = new MiNET.Blocks.States.PersistentBit();
		private MiNET.Blocks.States.UpdateBit _updateBit = new MiNET.Blocks.States.UpdateBit();

		public override string Id => "minecraft:dark_oak_leaves";

		[StateBit]
		public override bool PersistentBit { get => Convert.ToBoolean(_persistentBit.Value); set => NotifyStateUpdate(_persistentBit, value); }

		[StateBit]
		public override bool UpdateBit { get => Convert.ToBoolean(_updateBit.Value); set => NotifyStateUpdate(_updateBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _persistentBit.Name:
						NotifyStateUpdate(_persistentBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _updateBit.Name:
						NotifyStateUpdate(_updateBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _persistentBit;
			yield return _updateBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _persistentBit, _updateBit);
		} // method

		public override object Clone()
		{
			var block = (DarkOakLeaves) base.Clone();

			block._persistentBit = (MiNET.Blocks.States.PersistentBit) _persistentBit.Clone();
			block._updateBit = (MiNET.Blocks.States.UpdateBit) _updateBit.Clone();

			return block;
		} // method
	} // class

	public partial class DarkOakLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:dark_oak_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (DarkOakLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class DarkOakPlanks : PlanksBase
	{
		public override string Id => "minecraft:dark_oak_planks";
	} // class

	public partial class DarkOakPressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:dark_oak_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (DarkOakPressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class DarkOakSapling : SaplingBase
	{
		private MiNET.Blocks.States.AgeBit _ageBit = new MiNET.Blocks.States.AgeBit();

		public override string Id => "minecraft:dark_oak_sapling";

		[StateBit]
		public override bool AgeBit { get => Convert.ToBoolean(_ageBit.Value); set => NotifyStateUpdate(_ageBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _ageBit.Name:
						NotifyStateUpdate(_ageBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _ageBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _ageBit);
		} // method

		public override object Clone()
		{
			var block = (DarkOakSapling) base.Clone();

			block._ageBit = (MiNET.Blocks.States.AgeBit) _ageBit.Clone();

			return block;
		} // method
	} // class

	public partial class DarkOakSlab : WoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:dark_oak_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (DarkOakSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class DarkOakStairs : WoodenStairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:dark_oak_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (DarkOakStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DarkOakTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:dark_oak_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (DarkOakTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class DarkOakWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.X.Clone();

		public override string Id => "minecraft:dark_oak_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (DarkOakWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class DarkPrismarine : Block
	{
		public override string Id => "minecraft:dark_prismarine";
	} // class

	public partial class DarkPrismarineDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:dark_prismarine_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (DarkPrismarineDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class DarkPrismarineSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:dark_prismarine_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (DarkPrismarineSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class DarkPrismarineStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:dark_prismarine_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (DarkPrismarineStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DarkoakStandingSign : StandingSignBase
	{
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();

		public override string Id => "minecraft:darkoak_standing_sign";

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _groundSignDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _groundSignDirection);
		} // method

		public override object Clone()
		{
			var block = (DarkoakStandingSign) base.Clone();

			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DarkoakWallSign : WallSignBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:darkoak_wall_sign";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (DarkoakWallSign) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DaylightDetector : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:daylight_detector";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (DaylightDetector) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class DaylightDetectorInverted : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:daylight_detector_inverted";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (DaylightDetectorInverted) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class DeadBrainCoral : Block
	{
		public override string Id => "minecraft:dead_brain_coral";
	} // class

	public partial class DeadBrainCoralBlock : Block
	{
		public override string Id => "minecraft:dead_brain_coral_block";
	} // class

	public partial class DeadBrainCoralFan : CoralFanBase
	{
		private MiNET.Blocks.States.CoralFanDirection _coralFanDirection = new MiNET.Blocks.States.CoralFanDirection() { Value = 1 };

		public override string Id => "minecraft:dead_brain_coral_fan";

		[StateRange(0, 1)]
		public override MiNET.Blocks.States.CoralFanDirection CoralFanDirection { get => _coralFanDirection; set => NotifyStateUpdate(_coralFanDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralFanDirection.Name:
						NotifyStateUpdate(_coralFanDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralFanDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralFanDirection);
		} // method

		public override object Clone()
		{
			var block = (DeadBrainCoralFan) base.Clone();

			block._coralFanDirection = (MiNET.Blocks.States.CoralFanDirection) _coralFanDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DeadBrainCoralWallFan : CoralWallFanBase
	{
		private MiNET.Blocks.States.CoralDirection _coralDirection = new MiNET.Blocks.States.CoralDirection() { Value = 1 };

		public override string Id => "minecraft:dead_brain_coral_wall_fan";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.CoralDirection CoralDirection { get => _coralDirection; set => NotifyStateUpdate(_coralDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralDirection.Name:
						NotifyStateUpdate(_coralDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralDirection);
		} // method

		public override object Clone()
		{
			var block = (DeadBrainCoralWallFan) base.Clone();

			block._coralDirection = (MiNET.Blocks.States.CoralDirection) _coralDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DeadBubbleCoral : Block
	{
		public override string Id => "minecraft:dead_bubble_coral";
	} // class

	public partial class DeadBubbleCoralBlock : Block
	{
		public override string Id => "minecraft:dead_bubble_coral_block";
	} // class

	public partial class DeadBubbleCoralFan : CoralFanBase
	{
		private MiNET.Blocks.States.CoralFanDirection _coralFanDirection = new MiNET.Blocks.States.CoralFanDirection() { Value = 1 };

		public override string Id => "minecraft:dead_bubble_coral_fan";

		[StateRange(0, 1)]
		public override MiNET.Blocks.States.CoralFanDirection CoralFanDirection { get => _coralFanDirection; set => NotifyStateUpdate(_coralFanDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralFanDirection.Name:
						NotifyStateUpdate(_coralFanDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralFanDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralFanDirection);
		} // method

		public override object Clone()
		{
			var block = (DeadBubbleCoralFan) base.Clone();

			block._coralFanDirection = (MiNET.Blocks.States.CoralFanDirection) _coralFanDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DeadBubbleCoralWallFan : CoralWallFanBase
	{
		private MiNET.Blocks.States.CoralDirection _coralDirection = new MiNET.Blocks.States.CoralDirection() { Value = 1 };

		public override string Id => "minecraft:dead_bubble_coral_wall_fan";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.CoralDirection CoralDirection { get => _coralDirection; set => NotifyStateUpdate(_coralDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralDirection.Name:
						NotifyStateUpdate(_coralDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralDirection);
		} // method

		public override object Clone()
		{
			var block = (DeadBubbleCoralWallFan) base.Clone();

			block._coralDirection = (MiNET.Blocks.States.CoralDirection) _coralDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DeadFireCoral : Block
	{
		public override string Id => "minecraft:dead_fire_coral";
	} // class

	public partial class DeadFireCoralBlock : Block
	{
		public override string Id => "minecraft:dead_fire_coral_block";
	} // class

	public partial class DeadFireCoralFan : CoralFanBase
	{
		private MiNET.Blocks.States.CoralFanDirection _coralFanDirection = new MiNET.Blocks.States.CoralFanDirection() { Value = 1 };

		public override string Id => "minecraft:dead_fire_coral_fan";

		[StateRange(0, 1)]
		public override MiNET.Blocks.States.CoralFanDirection CoralFanDirection { get => _coralFanDirection; set => NotifyStateUpdate(_coralFanDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralFanDirection.Name:
						NotifyStateUpdate(_coralFanDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralFanDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralFanDirection);
		} // method

		public override object Clone()
		{
			var block = (DeadFireCoralFan) base.Clone();

			block._coralFanDirection = (MiNET.Blocks.States.CoralFanDirection) _coralFanDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DeadFireCoralWallFan : CoralWallFanBase
	{
		private MiNET.Blocks.States.CoralDirection _coralDirection = new MiNET.Blocks.States.CoralDirection() { Value = 1 };

		public override string Id => "minecraft:dead_fire_coral_wall_fan";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.CoralDirection CoralDirection { get => _coralDirection; set => NotifyStateUpdate(_coralDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralDirection.Name:
						NotifyStateUpdate(_coralDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralDirection);
		} // method

		public override object Clone()
		{
			var block = (DeadFireCoralWallFan) base.Clone();

			block._coralDirection = (MiNET.Blocks.States.CoralDirection) _coralDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DeadHornCoral : Block
	{
		public override string Id => "minecraft:dead_horn_coral";
	} // class

	public partial class DeadHornCoralBlock : Block
	{
		public override string Id => "minecraft:dead_horn_coral_block";
	} // class

	public partial class DeadHornCoralFan : CoralFanBase
	{
		private MiNET.Blocks.States.CoralFanDirection _coralFanDirection = new MiNET.Blocks.States.CoralFanDirection() { Value = 1 };

		public override string Id => "minecraft:dead_horn_coral_fan";

		[StateRange(0, 1)]
		public override MiNET.Blocks.States.CoralFanDirection CoralFanDirection { get => _coralFanDirection; set => NotifyStateUpdate(_coralFanDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralFanDirection.Name:
						NotifyStateUpdate(_coralFanDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralFanDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralFanDirection);
		} // method

		public override object Clone()
		{
			var block = (DeadHornCoralFan) base.Clone();

			block._coralFanDirection = (MiNET.Blocks.States.CoralFanDirection) _coralFanDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DeadHornCoralWallFan : CoralWallFanBase
	{
		private MiNET.Blocks.States.CoralDirection _coralDirection = new MiNET.Blocks.States.CoralDirection() { Value = 1 };

		public override string Id => "minecraft:dead_horn_coral_wall_fan";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.CoralDirection CoralDirection { get => _coralDirection; set => NotifyStateUpdate(_coralDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralDirection.Name:
						NotifyStateUpdate(_coralDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralDirection);
		} // method

		public override object Clone()
		{
			var block = (DeadHornCoralWallFan) base.Clone();

			block._coralDirection = (MiNET.Blocks.States.CoralDirection) _coralDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DeadTubeCoral : Block
	{
		public override string Id => "minecraft:dead_tube_coral";
	} // class

	public partial class DeadTubeCoralBlock : Block
	{
		public override string Id => "minecraft:dead_tube_coral_block";
	} // class

	public partial class DeadTubeCoralFan : CoralFanBase
	{
		private MiNET.Blocks.States.CoralFanDirection _coralFanDirection = new MiNET.Blocks.States.CoralFanDirection();

		public override string Id => "minecraft:dead_tube_coral_fan";

		[StateRange(0, 1)]
		public override MiNET.Blocks.States.CoralFanDirection CoralFanDirection { get => _coralFanDirection; set => NotifyStateUpdate(_coralFanDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralFanDirection.Name:
						NotifyStateUpdate(_coralFanDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralFanDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralFanDirection);
		} // method

		public override object Clone()
		{
			var block = (DeadTubeCoralFan) base.Clone();

			block._coralFanDirection = (MiNET.Blocks.States.CoralFanDirection) _coralFanDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DeadTubeCoralWallFan : CoralWallFanBase
	{
		private MiNET.Blocks.States.CoralDirection _coralDirection = new MiNET.Blocks.States.CoralDirection() { Value = 1 };

		public override string Id => "minecraft:dead_tube_coral_wall_fan";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.CoralDirection CoralDirection { get => _coralDirection; set => NotifyStateUpdate(_coralDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralDirection.Name:
						NotifyStateUpdate(_coralDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralDirection);
		} // method

		public override object Clone()
		{
			var block = (DeadTubeCoralWallFan) base.Clone();

			block._coralDirection = (MiNET.Blocks.States.CoralDirection) _coralDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Deadbush : Block
	{
		public override string Id => "minecraft:deadbush";
	} // class

	public partial class DecoratedPot : Block
	{
		private MiNET.Blocks.States.OldDirection2 _direction = new MiNET.Blocks.States.OldDirection2();

		public override string Id => "minecraft:decorated_pot";

		[StateRange(0, 3)]
		public MiNET.Blocks.States.OldDirection2 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction);
		} // method

		public override object Clone()
		{
			var block = (DecoratedPot) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection2) _direction.Clone();

			return block;
		} // method
	} // class

	public partial class Deepslate : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:deepslate";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (Deepslate) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class DeepslateBrickDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:deepslate_brick_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (DeepslateBrickDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class DeepslateBrickSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:deepslate_brick_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (DeepslateBrickSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class DeepslateBrickStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:deepslate_brick_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (DeepslateBrickStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DeepslateBrickWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:deepslate_brick_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (DeepslateBrickWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class DeepslateBricks : Block
	{
		public override string Id => "minecraft:deepslate_bricks";
	} // class

	public partial class DeepslateCoalOre : Block
	{
		public override string Id => "minecraft:deepslate_coal_ore";
	} // class

	public partial class DeepslateCopperOre : Block
	{
		public override string Id => "minecraft:deepslate_copper_ore";
	} // class

	public partial class DeepslateDiamondOre : Block
	{
		public override string Id => "minecraft:deepslate_diamond_ore";
	} // class

	public partial class DeepslateEmeraldOre : Block
	{
		public override string Id => "minecraft:deepslate_emerald_ore";
	} // class

	public partial class DeepslateGoldOre : Block
	{
		public override string Id => "minecraft:deepslate_gold_ore";
	} // class

	public partial class DeepslateIronOre : Block
	{
		public override string Id => "minecraft:deepslate_iron_ore";
	} // class

	public partial class DeepslateLapisOre : Block
	{
		public override string Id => "minecraft:deepslate_lapis_ore";
	} // class

	public partial class DeepslateRedstoneOre : Block
	{
		public override string Id => "minecraft:deepslate_redstone_ore";
	} // class

	public partial class DeepslateTileDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:deepslate_tile_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (DeepslateTileDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class DeepslateTileSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:deepslate_tile_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (DeepslateTileSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class DeepslateTileStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:deepslate_tile_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (DeepslateTileStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DeepslateTileWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:deepslate_tile_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (DeepslateTileWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class DeepslateTiles : Block
	{
		public override string Id => "minecraft:deepslate_tiles";
	} // class

	public partial class Deny : Block
	{
		public override string Id => "minecraft:deny";
	} // class

	public partial class DeprecatedAnvil : AnvilBase
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:deprecated_anvil";

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (DeprecatedAnvil) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DeprecatedPurpurBlock1 : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:deprecated_purpur_block_1";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (DeprecatedPurpurBlock1) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class DeprecatedPurpurBlock2 : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:deprecated_purpur_block_2";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (DeprecatedPurpurBlock2) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class DetectorRail : Block
	{
		private MiNET.Blocks.States.RailDataBit _railDataBit = new MiNET.Blocks.States.RailDataBit();
		private MiNET.Blocks.States.RailDirection _railDirection = new MiNET.Blocks.States.RailDirection();

		public override string Id => "minecraft:detector_rail";

		[StateBit]
		public bool RailDataBit { get => Convert.ToBoolean(_railDataBit.Value); set => NotifyStateUpdate(_railDataBit, value); }

		[StateRange(0, 5)]
		public int RailDirection { get => _railDirection.Value; set => NotifyStateUpdate(_railDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _railDataBit.Name:
						NotifyStateUpdate(_railDataBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _railDirection.Name:
						NotifyStateUpdate(_railDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _railDataBit;
			yield return _railDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _railDataBit, _railDirection);
		} // method

		public override object Clone()
		{
			var block = (DetectorRail) base.Clone();

			block._railDataBit = (MiNET.Blocks.States.RailDataBit) _railDataBit.Clone();
			block._railDirection = (MiNET.Blocks.States.RailDirection) _railDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DiamondBlock : Block
	{
		public override string Id => "minecraft:diamond_block";
	} // class

	public partial class DiamondOre : Block
	{
		public override string Id => "minecraft:diamond_ore";
	} // class

	public partial class Diorite : Block
	{
		public override string Id => "minecraft:diorite";
	} // class

	public partial class DioriteDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:diorite_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (DioriteDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class DioriteSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:diorite_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (DioriteSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class DioriteStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:diorite_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (DioriteStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DioriteWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit() { Value = 1 };

		public override string Id => "minecraft:diorite_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (DioriteWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class Dirt : Block
	{
		public override string Id => "minecraft:dirt";
	} // class

	public partial class DirtWithRoots : Block
	{
		public override string Id => "minecraft:dirt_with_roots";
	} // class

	public partial class Dispenser : Block
	{
		private MiNET.Blocks.States.OldFacingDirection1 _facingDirection = new MiNET.Blocks.States.OldFacingDirection1();
		private MiNET.Blocks.States.TriggeredBit _triggeredBit = new MiNET.Blocks.States.TriggeredBit();

		public override string Id => "minecraft:dispenser";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection1 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateBit]
		public bool TriggeredBit { get => Convert.ToBoolean(_triggeredBit.Value); set => NotifyStateUpdate(_triggeredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _triggeredBit.Name:
						NotifyStateUpdate(_triggeredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
			yield return _triggeredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection, _triggeredBit);
		} // method

		public override object Clone()
		{
			var block = (Dispenser) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection1) _facingDirection.Clone();
			block._triggeredBit = (MiNET.Blocks.States.TriggeredBit) _triggeredBit.Clone();

			return block;
		} // method
	} // class

	public partial class DoubleCutCopperSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:double_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (DoubleCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class DragonEgg : Block
	{
		public override string Id => "minecraft:dragon_egg";
	} // class

	public partial class DragonHead : HeadBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:dragon_head";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (DragonHead) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class DriedKelpBlock : Block
	{
		public override string Id => "minecraft:dried_kelp_block";
	} // class

	public partial class DripstoneBlock : Block
	{
		public override string Id => "minecraft:dripstone_block";
	} // class

	public partial class Dropper : Block
	{
		private MiNET.Blocks.States.OldFacingDirection1 _facingDirection = new MiNET.Blocks.States.OldFacingDirection1();
		private MiNET.Blocks.States.TriggeredBit _triggeredBit = new MiNET.Blocks.States.TriggeredBit();

		public override string Id => "minecraft:dropper";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection1 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateBit]
		public bool TriggeredBit { get => Convert.ToBoolean(_triggeredBit.Value); set => NotifyStateUpdate(_triggeredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _triggeredBit.Name:
						NotifyStateUpdate(_triggeredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
			yield return _triggeredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection, _triggeredBit);
		} // method

		public override object Clone()
		{
			var block = (Dropper) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection1) _facingDirection.Clone();
			block._triggeredBit = (MiNET.Blocks.States.TriggeredBit) _triggeredBit.Clone();

			return block;
		} // method
	} // class

	public partial class Element0 : ElementBase
	{
		public override string Id => "minecraft:element_0";
	} // class

	public partial class Element1 : ElementBase
	{
		public override string Id => "minecraft:element_1";
	} // class

	public partial class Element10 : ElementBase
	{
		public override string Id => "minecraft:element_10";
	} // class

	public partial class Element100 : ElementBase
	{
		public override string Id => "minecraft:element_100";
	} // class

	public partial class Element101 : ElementBase
	{
		public override string Id => "minecraft:element_101";
	} // class

	public partial class Element102 : ElementBase
	{
		public override string Id => "minecraft:element_102";
	} // class

	public partial class Element103 : ElementBase
	{
		public override string Id => "minecraft:element_103";
	} // class

	public partial class Element104 : ElementBase
	{
		public override string Id => "minecraft:element_104";
	} // class

	public partial class Element105 : ElementBase
	{
		public override string Id => "minecraft:element_105";
	} // class

	public partial class Element106 : ElementBase
	{
		public override string Id => "minecraft:element_106";
	} // class

	public partial class Element107 : ElementBase
	{
		public override string Id => "minecraft:element_107";
	} // class

	public partial class Element108 : ElementBase
	{
		public override string Id => "minecraft:element_108";
	} // class

	public partial class Element109 : ElementBase
	{
		public override string Id => "minecraft:element_109";
	} // class

	public partial class Element11 : ElementBase
	{
		public override string Id => "minecraft:element_11";
	} // class

	public partial class Element110 : ElementBase
	{
		public override string Id => "minecraft:element_110";
	} // class

	public partial class Element111 : ElementBase
	{
		public override string Id => "minecraft:element_111";
	} // class

	public partial class Element112 : ElementBase
	{
		public override string Id => "minecraft:element_112";
	} // class

	public partial class Element113 : ElementBase
	{
		public override string Id => "minecraft:element_113";
	} // class

	public partial class Element114 : ElementBase
	{
		public override string Id => "minecraft:element_114";
	} // class

	public partial class Element115 : ElementBase
	{
		public override string Id => "minecraft:element_115";
	} // class

	public partial class Element116 : ElementBase
	{
		public override string Id => "minecraft:element_116";
	} // class

	public partial class Element117 : ElementBase
	{
		public override string Id => "minecraft:element_117";
	} // class

	public partial class Element118 : ElementBase
	{
		public override string Id => "minecraft:element_118";
	} // class

	public partial class Element12 : ElementBase
	{
		public override string Id => "minecraft:element_12";
	} // class

	public partial class Element13 : ElementBase
	{
		public override string Id => "minecraft:element_13";
	} // class

	public partial class Element14 : ElementBase
	{
		public override string Id => "minecraft:element_14";
	} // class

	public partial class Element15 : ElementBase
	{
		public override string Id => "minecraft:element_15";
	} // class

	public partial class Element16 : ElementBase
	{
		public override string Id => "minecraft:element_16";
	} // class

	public partial class Element17 : ElementBase
	{
		public override string Id => "minecraft:element_17";
	} // class

	public partial class Element18 : ElementBase
	{
		public override string Id => "minecraft:element_18";
	} // class

	public partial class Element19 : ElementBase
	{
		public override string Id => "minecraft:element_19";
	} // class

	public partial class Element2 : ElementBase
	{
		public override string Id => "minecraft:element_2";
	} // class

	public partial class Element20 : ElementBase
	{
		public override string Id => "minecraft:element_20";
	} // class

	public partial class Element21 : ElementBase
	{
		public override string Id => "minecraft:element_21";
	} // class

	public partial class Element22 : ElementBase
	{
		public override string Id => "minecraft:element_22";
	} // class

	public partial class Element23 : ElementBase
	{
		public override string Id => "minecraft:element_23";
	} // class

	public partial class Element24 : ElementBase
	{
		public override string Id => "minecraft:element_24";
	} // class

	public partial class Element25 : ElementBase
	{
		public override string Id => "minecraft:element_25";
	} // class

	public partial class Element26 : ElementBase
	{
		public override string Id => "minecraft:element_26";
	} // class

	public partial class Element27 : ElementBase
	{
		public override string Id => "minecraft:element_27";
	} // class

	public partial class Element28 : ElementBase
	{
		public override string Id => "minecraft:element_28";
	} // class

	public partial class Element29 : ElementBase
	{
		public override string Id => "minecraft:element_29";
	} // class

	public partial class Element3 : ElementBase
	{
		public override string Id => "minecraft:element_3";
	} // class

	public partial class Element30 : ElementBase
	{
		public override string Id => "minecraft:element_30";
	} // class

	public partial class Element31 : ElementBase
	{
		public override string Id => "minecraft:element_31";
	} // class

	public partial class Element32 : ElementBase
	{
		public override string Id => "minecraft:element_32";
	} // class

	public partial class Element33 : ElementBase
	{
		public override string Id => "minecraft:element_33";
	} // class

	public partial class Element34 : ElementBase
	{
		public override string Id => "minecraft:element_34";
	} // class

	public partial class Element35 : ElementBase
	{
		public override string Id => "minecraft:element_35";
	} // class

	public partial class Element36 : ElementBase
	{
		public override string Id => "minecraft:element_36";
	} // class

	public partial class Element37 : ElementBase
	{
		public override string Id => "minecraft:element_37";
	} // class

	public partial class Element38 : ElementBase
	{
		public override string Id => "minecraft:element_38";
	} // class

	public partial class Element39 : ElementBase
	{
		public override string Id => "minecraft:element_39";
	} // class

	public partial class Element4 : ElementBase
	{
		public override string Id => "minecraft:element_4";
	} // class

	public partial class Element40 : ElementBase
	{
		public override string Id => "minecraft:element_40";
	} // class

	public partial class Element41 : ElementBase
	{
		public override string Id => "minecraft:element_41";
	} // class

	public partial class Element42 : ElementBase
	{
		public override string Id => "minecraft:element_42";
	} // class

	public partial class Element43 : ElementBase
	{
		public override string Id => "minecraft:element_43";
	} // class

	public partial class Element44 : ElementBase
	{
		public override string Id => "minecraft:element_44";
	} // class

	public partial class Element45 : ElementBase
	{
		public override string Id => "minecraft:element_45";
	} // class

	public partial class Element46 : ElementBase
	{
		public override string Id => "minecraft:element_46";
	} // class

	public partial class Element47 : ElementBase
	{
		public override string Id => "minecraft:element_47";
	} // class

	public partial class Element48 : ElementBase
	{
		public override string Id => "minecraft:element_48";
	} // class

	public partial class Element49 : ElementBase
	{
		public override string Id => "minecraft:element_49";
	} // class

	public partial class Element5 : ElementBase
	{
		public override string Id => "minecraft:element_5";
	} // class

	public partial class Element50 : ElementBase
	{
		public override string Id => "minecraft:element_50";
	} // class

	public partial class Element51 : ElementBase
	{
		public override string Id => "minecraft:element_51";
	} // class

	public partial class Element52 : ElementBase
	{
		public override string Id => "minecraft:element_52";
	} // class

	public partial class Element53 : ElementBase
	{
		public override string Id => "minecraft:element_53";
	} // class

	public partial class Element54 : ElementBase
	{
		public override string Id => "minecraft:element_54";
	} // class

	public partial class Element55 : ElementBase
	{
		public override string Id => "minecraft:element_55";
	} // class

	public partial class Element56 : ElementBase
	{
		public override string Id => "minecraft:element_56";
	} // class

	public partial class Element57 : ElementBase
	{
		public override string Id => "minecraft:element_57";
	} // class

	public partial class Element58 : ElementBase
	{
		public override string Id => "minecraft:element_58";
	} // class

	public partial class Element59 : ElementBase
	{
		public override string Id => "minecraft:element_59";
	} // class

	public partial class Element6 : ElementBase
	{
		public override string Id => "minecraft:element_6";
	} // class

	public partial class Element60 : ElementBase
	{
		public override string Id => "minecraft:element_60";
	} // class

	public partial class Element61 : ElementBase
	{
		public override string Id => "minecraft:element_61";
	} // class

	public partial class Element62 : ElementBase
	{
		public override string Id => "minecraft:element_62";
	} // class

	public partial class Element63 : ElementBase
	{
		public override string Id => "minecraft:element_63";
	} // class

	public partial class Element64 : ElementBase
	{
		public override string Id => "minecraft:element_64";
	} // class

	public partial class Element65 : ElementBase
	{
		public override string Id => "minecraft:element_65";
	} // class

	public partial class Element66 : ElementBase
	{
		public override string Id => "minecraft:element_66";
	} // class

	public partial class Element67 : ElementBase
	{
		public override string Id => "minecraft:element_67";
	} // class

	public partial class Element68 : ElementBase
	{
		public override string Id => "minecraft:element_68";
	} // class

	public partial class Element69 : ElementBase
	{
		public override string Id => "minecraft:element_69";
	} // class

	public partial class Element7 : ElementBase
	{
		public override string Id => "minecraft:element_7";
	} // class

	public partial class Element70 : ElementBase
	{
		public override string Id => "minecraft:element_70";
	} // class

	public partial class Element71 : ElementBase
	{
		public override string Id => "minecraft:element_71";
	} // class

	public partial class Element72 : ElementBase
	{
		public override string Id => "minecraft:element_72";
	} // class

	public partial class Element73 : ElementBase
	{
		public override string Id => "minecraft:element_73";
	} // class

	public partial class Element74 : ElementBase
	{
		public override string Id => "minecraft:element_74";
	} // class

	public partial class Element75 : ElementBase
	{
		public override string Id => "minecraft:element_75";
	} // class

	public partial class Element76 : ElementBase
	{
		public override string Id => "minecraft:element_76";
	} // class

	public partial class Element77 : ElementBase
	{
		public override string Id => "minecraft:element_77";
	} // class

	public partial class Element78 : ElementBase
	{
		public override string Id => "minecraft:element_78";
	} // class

	public partial class Element79 : ElementBase
	{
		public override string Id => "minecraft:element_79";
	} // class

	public partial class Element8 : ElementBase
	{
		public override string Id => "minecraft:element_8";
	} // class

	public partial class Element80 : ElementBase
	{
		public override string Id => "minecraft:element_80";
	} // class

	public partial class Element81 : ElementBase
	{
		public override string Id => "minecraft:element_81";
	} // class

	public partial class Element82 : ElementBase
	{
		public override string Id => "minecraft:element_82";
	} // class

	public partial class Element83 : ElementBase
	{
		public override string Id => "minecraft:element_83";
	} // class

	public partial class Element84 : ElementBase
	{
		public override string Id => "minecraft:element_84";
	} // class

	public partial class Element85 : ElementBase
	{
		public override string Id => "minecraft:element_85";
	} // class

	public partial class Element86 : ElementBase
	{
		public override string Id => "minecraft:element_86";
	} // class

	public partial class Element87 : ElementBase
	{
		public override string Id => "minecraft:element_87";
	} // class

	public partial class Element88 : ElementBase
	{
		public override string Id => "minecraft:element_88";
	} // class

	public partial class Element89 : ElementBase
	{
		public override string Id => "minecraft:element_89";
	} // class

	public partial class Element9 : ElementBase
	{
		public override string Id => "minecraft:element_9";
	} // class

	public partial class Element90 : ElementBase
	{
		public override string Id => "minecraft:element_90";
	} // class

	public partial class Element91 : ElementBase
	{
		public override string Id => "minecraft:element_91";
	} // class

	public partial class Element92 : ElementBase
	{
		public override string Id => "minecraft:element_92";
	} // class

	public partial class Element93 : ElementBase
	{
		public override string Id => "minecraft:element_93";
	} // class

	public partial class Element94 : ElementBase
	{
		public override string Id => "minecraft:element_94";
	} // class

	public partial class Element95 : ElementBase
	{
		public override string Id => "minecraft:element_95";
	} // class

	public partial class Element96 : ElementBase
	{
		public override string Id => "minecraft:element_96";
	} // class

	public partial class Element97 : ElementBase
	{
		public override string Id => "minecraft:element_97";
	} // class

	public partial class Element98 : ElementBase
	{
		public override string Id => "minecraft:element_98";
	} // class

	public partial class Element99 : ElementBase
	{
		public override string Id => "minecraft:element_99";
	} // class

	public partial class ElementConstructor : Block
	{
		private MiNET.Blocks.States.OldDirection _direction = new MiNET.Blocks.States.OldDirection();

		public override string Id => "minecraft:element_constructor";

		[StateRange(0, 3)]
		public int Direction { get => _direction.Value; set => NotifyStateUpdate(_direction, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction);
		} // method

		public override object Clone()
		{
			var block = (ElementConstructor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection) _direction.Clone();

			return block;
		} // method
	} // class

	public partial class EmeraldBlock : Block
	{
		public override string Id => "minecraft:emerald_block";
	} // class

	public partial class EmeraldOre : Block
	{
		public override string Id => "minecraft:emerald_ore";
	} // class

	public partial class EnchantingTable : Block
	{
		public override string Id => "minecraft:enchanting_table";
	} // class

	public partial class EndBrickStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:end_brick_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (EndBrickStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class EndBricks : Block
	{
		public override string Id => "minecraft:end_bricks";
	} // class

	public partial class EndGateway : Block
	{
		public override string Id => "minecraft:end_gateway";
	} // class

	public partial class EndPortal : Block
	{
		public override string Id => "minecraft:end_portal";
	} // class

	public partial class EndPortalFrame : Block
	{
		private MiNET.Blocks.States.EndPortalEyeBit _endPortalEyeBit = new MiNET.Blocks.States.EndPortalEyeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:end_portal_frame";

		[StateBit]
		public bool EndPortalEyeBit { get => Convert.ToBoolean(_endPortalEyeBit.Value); set => NotifyStateUpdate(_endPortalEyeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _endPortalEyeBit.Name:
						NotifyStateUpdate(_endPortalEyeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _endPortalEyeBit;
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _endPortalEyeBit, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (EndPortalFrame) base.Clone();

			block._endPortalEyeBit = (MiNET.Blocks.States.EndPortalEyeBit) _endPortalEyeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class EndRod : Block
	{
		private MiNET.Blocks.States.OldFacingDirection3 _facingDirection = new MiNET.Blocks.States.OldFacingDirection3();

		public override string Id => "minecraft:end_rod";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection3 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (EndRod) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection3) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class EndStone : Block
	{
		public override string Id => "minecraft:end_stone";
	} // class

	public partial class EndStoneBrickDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:end_stone_brick_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (EndStoneBrickDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class EndStoneBrickSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:end_stone_brick_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (EndStoneBrickSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class EndStoneBrickWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit() { Value = 1 };

		public override string Id => "minecraft:end_stone_brick_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (EndStoneBrickWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class EnderChest : Block
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.North.Clone();

		public override string Id => "minecraft:ender_chest";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (EnderChest) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class ExposedChiseledCopper : Block
	{
		public override string Id => "minecraft:exposed_chiseled_copper";
	} // class

	public partial class ExposedCopper : Block
	{
		public override string Id => "minecraft:exposed_copper";
	} // class

	public partial class ExposedCopperBulb : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();
		private MiNET.Blocks.States.PoweredBit _poweredBit = new MiNET.Blocks.States.PoweredBit();

		public override string Id => "minecraft:exposed_copper_bulb";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		[StateBit]
		public bool PoweredBit { get => Convert.ToBoolean(_poweredBit.Value); set => NotifyStateUpdate(_poweredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
					case BlockStateByte s when s.Name == _poweredBit.Name:
						NotifyStateUpdate(_poweredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
			yield return _poweredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit, _poweredBit);
		} // method

		public override object Clone()
		{
			var block = (ExposedCopperBulb) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();
			block._poweredBit = (MiNET.Blocks.States.PoweredBit) _poweredBit.Clone();

			return block;
		} // method
	} // class

	public partial class ExposedCopperDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:exposed_copper_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (ExposedCopperDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class ExposedCopperGrate : Block
	{
		public override string Id => "minecraft:exposed_copper_grate";
	} // class

	public partial class ExposedCopperTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:exposed_copper_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (ExposedCopperTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class ExposedCutCopper : Block
	{
		public override string Id => "minecraft:exposed_cut_copper";
	} // class

	public partial class ExposedCutCopperSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:exposed_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (ExposedCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class ExposedCutCopperStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:exposed_cut_copper_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (ExposedCutCopperStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class ExposedDoubleCutCopperSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:exposed_double_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (ExposedDoubleCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class Farmland : Block
	{
		private MiNET.Blocks.States.MoisturizedAmount _moisturizedAmount = new MiNET.Blocks.States.MoisturizedAmount();

		public override string Id => "minecraft:farmland";

		[StateRange(0, 7)]
		public int MoisturizedAmount { get => _moisturizedAmount.Value; set => NotifyStateUpdate(_moisturizedAmount, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _moisturizedAmount.Name:
						NotifyStateUpdate(_moisturizedAmount, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _moisturizedAmount;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _moisturizedAmount);
		} // method

		public override object Clone()
		{
			var block = (Farmland) base.Clone();

			block._moisturizedAmount = (MiNET.Blocks.States.MoisturizedAmount) _moisturizedAmount.Clone();

			return block;
		} // method
	} // class

	public partial class FenceGate : FenceGateBase
	{
		private MiNET.Blocks.States.InWallBit _inWallBit = new MiNET.Blocks.States.InWallBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:fence_gate";

		[StateBit]
		public override bool InWallBit { get => Convert.ToBoolean(_inWallBit.Value); set => NotifyStateUpdate(_inWallBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _inWallBit.Name:
						NotifyStateUpdate(_inWallBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _inWallBit;
			yield return _cardinalDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _inWallBit, _cardinalDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (FenceGate) base.Clone();

			block._inWallBit = (MiNET.Blocks.States.InWallBit) _inWallBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class Fern : Block
	{
		public override string Id => "minecraft:fern";
	} // class

	public partial class Fire : Block
	{
		private MiNET.Blocks.States.Age _age = new MiNET.Blocks.States.Age();

		public override string Id => "minecraft:fire";

		[StateRange(0, 15)]
		public int Age { get => _age.Value; set => NotifyStateUpdate(_age, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _age.Name:
						NotifyStateUpdate(_age, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _age;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _age);
		} // method

		public override object Clone()
		{
			var block = (Fire) base.Clone();

			block._age = (MiNET.Blocks.States.Age) _age.Clone();

			return block;
		} // method
	} // class

	public partial class FireCoral : Block
	{
		public override string Id => "minecraft:fire_coral";
	} // class

	public partial class FireCoralBlock : Block
	{
		public override string Id => "minecraft:fire_coral_block";
	} // class

	public partial class FireCoralFan : CoralFanBase
	{
		private MiNET.Blocks.States.CoralFanDirection _coralFanDirection = new MiNET.Blocks.States.CoralFanDirection() { Value = 1 };

		public override string Id => "minecraft:fire_coral_fan";

		[StateRange(0, 1)]
		public override MiNET.Blocks.States.CoralFanDirection CoralFanDirection { get => _coralFanDirection; set => NotifyStateUpdate(_coralFanDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralFanDirection.Name:
						NotifyStateUpdate(_coralFanDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralFanDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralFanDirection);
		} // method

		public override object Clone()
		{
			var block = (FireCoralFan) base.Clone();

			block._coralFanDirection = (MiNET.Blocks.States.CoralFanDirection) _coralFanDirection.Clone();

			return block;
		} // method
	} // class

	public partial class FireCoralWallFan : CoralWallFanBase
	{
		private MiNET.Blocks.States.CoralDirection _coralDirection = new MiNET.Blocks.States.CoralDirection() { Value = 1 };

		public override string Id => "minecraft:fire_coral_wall_fan";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.CoralDirection CoralDirection { get => _coralDirection; set => NotifyStateUpdate(_coralDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralDirection.Name:
						NotifyStateUpdate(_coralDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralDirection);
		} // method

		public override object Clone()
		{
			var block = (FireCoralWallFan) base.Clone();

			block._coralDirection = (MiNET.Blocks.States.CoralDirection) _coralDirection.Clone();

			return block;
		} // method
	} // class

	public partial class FletchingTable : Block
	{
		public override string Id => "minecraft:fletching_table";
	} // class

	public partial class FlowerPot : Block
	{
		private MiNET.Blocks.States.UpdateBit _updateBit = new MiNET.Blocks.States.UpdateBit();

		public override string Id => "minecraft:flower_pot";

		[StateBit]
		public bool UpdateBit { get => Convert.ToBoolean(_updateBit.Value); set => NotifyStateUpdate(_updateBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _updateBit.Name:
						NotifyStateUpdate(_updateBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _updateBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _updateBit);
		} // method

		public override object Clone()
		{
			var block = (FlowerPot) base.Clone();

			block._updateBit = (MiNET.Blocks.States.UpdateBit) _updateBit.Clone();

			return block;
		} // method
	} // class

	public partial class FloweringAzalea : Block
	{
		public override string Id => "minecraft:flowering_azalea";
	} // class

	public partial class FlowingLava
	{
		private MiNET.Blocks.States.LiquidDepth _liquidDepth = new MiNET.Blocks.States.LiquidDepth();

		public override string Id => "minecraft:flowing_lava";

		[StateRange(0, 15)]
		public override int LiquidDepth { get => _liquidDepth.Value; set => NotifyStateUpdate(_liquidDepth, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _liquidDepth.Name:
						NotifyStateUpdate(_liquidDepth, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _liquidDepth;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _liquidDepth);
		} // method

		public override object Clone()
		{
			var block = (FlowingLava) base.Clone();

			block._liquidDepth = (MiNET.Blocks.States.LiquidDepth) _liquidDepth.Clone();

			return block;
		} // method
	} // class

	public partial class FlowingWater
	{
		private MiNET.Blocks.States.LiquidDepth _liquidDepth = new MiNET.Blocks.States.LiquidDepth();

		public override string Id => "minecraft:flowing_water";

		[StateRange(0, 15)]
		public override int LiquidDepth { get => _liquidDepth.Value; set => NotifyStateUpdate(_liquidDepth, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _liquidDepth.Name:
						NotifyStateUpdate(_liquidDepth, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _liquidDepth;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _liquidDepth);
		} // method

		public override object Clone()
		{
			var block = (FlowingWater) base.Clone();

			block._liquidDepth = (MiNET.Blocks.States.LiquidDepth) _liquidDepth.Clone();

			return block;
		} // method
	} // class

	public partial class Frame : Block
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.ItemFrameMapBit _itemFrameMapBit = new MiNET.Blocks.States.ItemFrameMapBit();
		private MiNET.Blocks.States.ItemFramePhotoBit _itemFramePhotoBit = new MiNET.Blocks.States.ItemFramePhotoBit();

		public override string Id => "minecraft:frame";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateBit]
		public bool ItemFrameMapBit { get => Convert.ToBoolean(_itemFrameMapBit.Value); set => NotifyStateUpdate(_itemFrameMapBit, value); }

		[StateBit]
		public bool ItemFramePhotoBit { get => Convert.ToBoolean(_itemFramePhotoBit.Value); set => NotifyStateUpdate(_itemFramePhotoBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _itemFrameMapBit.Name:
						NotifyStateUpdate(_itemFrameMapBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _itemFramePhotoBit.Name:
						NotifyStateUpdate(_itemFramePhotoBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
			yield return _itemFrameMapBit;
			yield return _itemFramePhotoBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection, _itemFrameMapBit, _itemFramePhotoBit);
		} // method

		public override object Clone()
		{
			var block = (Frame) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._itemFrameMapBit = (MiNET.Blocks.States.ItemFrameMapBit) _itemFrameMapBit.Clone();
			block._itemFramePhotoBit = (MiNET.Blocks.States.ItemFramePhotoBit) _itemFramePhotoBit.Clone();

			return block;
		} // method
	} // class

	public partial class FrogSpawn : Block
	{
		public override string Id => "minecraft:frog_spawn";
	} // class

	public partial class FrostedIce : Block
	{
		private MiNET.Blocks.States.Age _age = new MiNET.Blocks.States.Age();

		public override string Id => "minecraft:frosted_ice";

		[StateRange(0, 3)]
		public int Age { get => _age.Value; set => NotifyStateUpdate(_age, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _age.Name:
						NotifyStateUpdate(_age, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _age;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _age);
		} // method

		public override object Clone()
		{
			var block = (FrostedIce) base.Clone();

			block._age = (MiNET.Blocks.States.Age) _age.Clone();

			return block;
		} // method
	} // class

	public partial class Furnace
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:furnace";

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (Furnace) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class GildedBlackstone : Block
	{
		public override string Id => "minecraft:gilded_blackstone";
	} // class

	public partial class Glass : Block
	{
		public override string Id => "minecraft:glass";
	} // class

	public partial class GlassPane : Block
	{
		public override string Id => "minecraft:glass_pane";
	} // class

	public partial class GlowFrame : Block
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.ItemFrameMapBit _itemFrameMapBit = new MiNET.Blocks.States.ItemFrameMapBit();
		private MiNET.Blocks.States.ItemFramePhotoBit _itemFramePhotoBit = new MiNET.Blocks.States.ItemFramePhotoBit();

		public override string Id => "minecraft:glow_frame";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateBit]
		public bool ItemFrameMapBit { get => Convert.ToBoolean(_itemFrameMapBit.Value); set => NotifyStateUpdate(_itemFrameMapBit, value); }

		[StateBit]
		public bool ItemFramePhotoBit { get => Convert.ToBoolean(_itemFramePhotoBit.Value); set => NotifyStateUpdate(_itemFramePhotoBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _itemFrameMapBit.Name:
						NotifyStateUpdate(_itemFrameMapBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _itemFramePhotoBit.Name:
						NotifyStateUpdate(_itemFramePhotoBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
			yield return _itemFrameMapBit;
			yield return _itemFramePhotoBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection, _itemFrameMapBit, _itemFramePhotoBit);
		} // method

		public override object Clone()
		{
			var block = (GlowFrame) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._itemFrameMapBit = (MiNET.Blocks.States.ItemFrameMapBit) _itemFrameMapBit.Clone();
			block._itemFramePhotoBit = (MiNET.Blocks.States.ItemFramePhotoBit) _itemFramePhotoBit.Clone();

			return block;
		} // method
	} // class

	public partial class GlowLichen : Block
	{
		private MiNET.Blocks.States.MultiFaceDirectionBits _multiFaceDirectionBits = new MiNET.Blocks.States.MultiFaceDirectionBits();

		public override string Id => "minecraft:glow_lichen";

		[StateRange(0, 63)]
		public int MultiFaceDirectionBits { get => _multiFaceDirectionBits.Value; set => NotifyStateUpdate(_multiFaceDirectionBits, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _multiFaceDirectionBits.Name:
						NotifyStateUpdate(_multiFaceDirectionBits, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _multiFaceDirectionBits;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _multiFaceDirectionBits);
		} // method

		public override object Clone()
		{
			var block = (GlowLichen) base.Clone();

			block._multiFaceDirectionBits = (MiNET.Blocks.States.MultiFaceDirectionBits) _multiFaceDirectionBits.Clone();

			return block;
		} // method
	} // class

	public partial class Glowingobsidian : Block
	{
		public override string Id => "minecraft:glowingobsidian";
	} // class

	public partial class Glowstone : Block
	{
		public override string Id => "minecraft:glowstone";
	} // class

	public partial class GoldBlock : Block
	{
		public override string Id => "minecraft:gold_block";
	} // class

	public partial class GoldOre : Block
	{
		public override string Id => "minecraft:gold_ore";
	} // class

	public partial class GoldenRail : Block
	{
		private MiNET.Blocks.States.RailDataBit _railDataBit = new MiNET.Blocks.States.RailDataBit();
		private MiNET.Blocks.States.RailDirection _railDirection = new MiNET.Blocks.States.RailDirection();

		public override string Id => "minecraft:golden_rail";

		[StateBit]
		public bool RailDataBit { get => Convert.ToBoolean(_railDataBit.Value); set => NotifyStateUpdate(_railDataBit, value); }

		[StateRange(0, 5)]
		public int RailDirection { get => _railDirection.Value; set => NotifyStateUpdate(_railDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _railDataBit.Name:
						NotifyStateUpdate(_railDataBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _railDirection.Name:
						NotifyStateUpdate(_railDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _railDataBit;
			yield return _railDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _railDataBit, _railDirection);
		} // method

		public override object Clone()
		{
			var block = (GoldenRail) base.Clone();

			block._railDataBit = (MiNET.Blocks.States.RailDataBit) _railDataBit.Clone();
			block._railDirection = (MiNET.Blocks.States.RailDirection) _railDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Granite : Block
	{
		public override string Id => "minecraft:granite";
	} // class

	public partial class GraniteDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:granite_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (GraniteDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class GraniteSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:granite_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (GraniteSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class GraniteStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:granite_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (GraniteStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class GraniteWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit() { Value = 1 };

		public override string Id => "minecraft:granite_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (GraniteWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class GrassBlock : Block
	{
		public override string Id => "minecraft:grass_block";
	} // class

	public partial class GrassPath : Block
	{
		public override string Id => "minecraft:grass_path";
	} // class

	public partial class Gravel : Block
	{
		public override string Id => "minecraft:gravel";
	} // class

	public partial class GrayCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:gray_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (GrayCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class GrayCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:gray_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (GrayCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class GrayCarpet : CarpetBase
	{
		public override string Id => "minecraft:gray_carpet";
	} // class

	public partial class GrayConcrete : ConcreteBase
	{
		public override string Id => "minecraft:gray_concrete";
	} // class

	public partial class GrayConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:gray_concrete_powder";
	} // class

	public partial class GrayGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:gray_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (GrayGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class GrayShulkerBox : Block
	{
		public override string Id => "minecraft:gray_shulker_box";
	} // class

	public partial class GrayStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:gray_stained_glass";
	} // class

	public partial class GrayStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:gray_stained_glass_pane";
	} // class

	public partial class GrayTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:gray_terracotta";
	} // class

	public partial class GrayWool : WoolBase
	{
		public override string Id => "minecraft:gray_wool";
	} // class

	public partial class GreenCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:green_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (GreenCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class GreenCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:green_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (GreenCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class GreenCarpet : CarpetBase
	{
		public override string Id => "minecraft:green_carpet";
	} // class

	public partial class GreenConcrete : ConcreteBase
	{
		public override string Id => "minecraft:green_concrete";
	} // class

	public partial class GreenConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:green_concrete_powder";
	} // class

	public partial class GreenGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:green_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (GreenGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class GreenShulkerBox : Block
	{
		public override string Id => "minecraft:green_shulker_box";
	} // class

	public partial class GreenStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:green_stained_glass";
	} // class

	public partial class GreenStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:green_stained_glass_pane";
	} // class

	public partial class GreenTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:green_terracotta";
	} // class

	public partial class GreenWool : WoolBase
	{
		public override string Id => "minecraft:green_wool";
	} // class

	public partial class Grindstone : Block
	{
		private MiNET.Blocks.States.Attachment _attachment = (States.Attachment) MiNET.Blocks.States.Attachment.Standing.Clone();
		private MiNET.Blocks.States.OldDirection1 _direction = new MiNET.Blocks.States.OldDirection1();

		public override string Id => "minecraft:grindstone";

		[StateEnum("hanging", "multiple", "side", "standing")]
		public MiNET.Blocks.States.Attachment Attachment { get => _attachment; set => NotifyStateUpdate(_attachment, value.Value); }

		[StateRange(0, 3)]
		public MiNET.Blocks.States.OldDirection1 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _attachment.Name:
						NotifyStateUpdate(_attachment, s.Value);
						break;
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachment;
			yield return _direction;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachment, _direction);
		} // method

		public override object Clone()
		{
			var block = (Grindstone) base.Clone();

			block._attachment = (MiNET.Blocks.States.Attachment) _attachment.Clone();
			block._direction = (MiNET.Blocks.States.OldDirection1) _direction.Clone();

			return block;
		} // method
	} // class

	public partial class HangingRoots : Block
	{
		public override string Id => "minecraft:hanging_roots";
	} // class

	public partial class HardBlackStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_black_stained_glass";
	} // class

	public partial class HardBlackStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_black_stained_glass_pane";
	} // class

	public partial class HardBlueStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_blue_stained_glass";
	} // class

	public partial class HardBlueStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_blue_stained_glass_pane";
	} // class

	public partial class HardBrownStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_brown_stained_glass";
	} // class

	public partial class HardBrownStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_brown_stained_glass_pane";
	} // class

	public partial class HardCyanStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_cyan_stained_glass";
	} // class

	public partial class HardCyanStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_cyan_stained_glass_pane";
	} // class

	public partial class HardGlass
	{
		public override string Id => "minecraft:hard_glass";
	} // class

	public partial class HardGlassPane
	{
		public override string Id => "minecraft:hard_glass_pane";
	} // class

	public partial class HardGrayStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_gray_stained_glass";
	} // class

	public partial class HardGrayStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_gray_stained_glass_pane";
	} // class

	public partial class HardGreenStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_green_stained_glass";
	} // class

	public partial class HardGreenStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_green_stained_glass_pane";
	} // class

	public partial class HardLightBlueStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_light_blue_stained_glass";
	} // class

	public partial class HardLightBlueStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_light_blue_stained_glass_pane";
	} // class

	public partial class HardLightGrayStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_light_gray_stained_glass";
	} // class

	public partial class HardLightGrayStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_light_gray_stained_glass_pane";
	} // class

	public partial class HardLimeStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_lime_stained_glass";
	} // class

	public partial class HardLimeStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_lime_stained_glass_pane";
	} // class

	public partial class HardMagentaStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_magenta_stained_glass";
	} // class

	public partial class HardMagentaStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_magenta_stained_glass_pane";
	} // class

	public partial class HardOrangeStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_orange_stained_glass";
	} // class

	public partial class HardOrangeStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_orange_stained_glass_pane";
	} // class

	public partial class HardPinkStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_pink_stained_glass";
	} // class

	public partial class HardPinkStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_pink_stained_glass_pane";
	} // class

	public partial class HardPurpleStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_purple_stained_glass";
	} // class

	public partial class HardPurpleStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_purple_stained_glass_pane";
	} // class

	public partial class HardRedStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_red_stained_glass";
	} // class

	public partial class HardRedStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_red_stained_glass_pane";
	} // class

	public partial class HardWhiteStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_white_stained_glass";
	} // class

	public partial class HardWhiteStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_white_stained_glass_pane";
	} // class

	public partial class HardYellowStainedGlass : HardStainedGlassBase
	{
		public override string Id => "minecraft:hard_yellow_stained_glass";
	} // class

	public partial class HardYellowStainedGlassPane : HardStainedGlassPaneBase
	{
		public override string Id => "minecraft:hard_yellow_stained_glass_pane";
	} // class

	public partial class HardenedClay : Block
	{
		public override string Id => "minecraft:hardened_clay";
	} // class

	public partial class HayBlock : Block
	{
		private MiNET.Blocks.States.Deprecated _deprecated = new MiNET.Blocks.States.Deprecated();
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:hay_block";

		[StateRange(0, 3)]
		public int Deprecated { get => _deprecated.Value; set => NotifyStateUpdate(_deprecated, value); }

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _deprecated.Name:
						NotifyStateUpdate(_deprecated, s.Value);
						break;
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _deprecated;
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _deprecated, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (HayBlock) base.Clone();

			block._deprecated = (MiNET.Blocks.States.Deprecated) _deprecated.Clone();
			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class HeavyCore : Block
	{
		public override string Id => "minecraft:heavy_core";
	} // class

	public partial class HeavyWeightedPressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:heavy_weighted_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (HeavyWeightedPressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class HoneyBlock : Block
	{
		public override string Id => "minecraft:honey_block";
	} // class

	public partial class HoneycombBlock : Block
	{
		public override string Id => "minecraft:honeycomb_block";
	} // class

	public partial class Hopper : Block
	{
		private MiNET.Blocks.States.OldFacingDirection1 _facingDirection = new MiNET.Blocks.States.OldFacingDirection1();
		private MiNET.Blocks.States.ToggleBit _toggleBit = new MiNET.Blocks.States.ToggleBit();

		public override string Id => "minecraft:hopper";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection1 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateBit]
		public bool ToggleBit { get => Convert.ToBoolean(_toggleBit.Value); set => NotifyStateUpdate(_toggleBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _toggleBit.Name:
						NotifyStateUpdate(_toggleBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
			yield return _toggleBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection, _toggleBit);
		} // method

		public override object Clone()
		{
			var block = (Hopper) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection1) _facingDirection.Clone();
			block._toggleBit = (MiNET.Blocks.States.ToggleBit) _toggleBit.Clone();

			return block;
		} // method
	} // class

	public partial class HornCoral : Block
	{
		public override string Id => "minecraft:horn_coral";
	} // class

	public partial class HornCoralBlock : Block
	{
		public override string Id => "minecraft:horn_coral_block";
	} // class

	public partial class HornCoralFan : CoralFanBase
	{
		private MiNET.Blocks.States.CoralFanDirection _coralFanDirection = new MiNET.Blocks.States.CoralFanDirection() { Value = 1 };

		public override string Id => "minecraft:horn_coral_fan";

		[StateRange(0, 1)]
		public override MiNET.Blocks.States.CoralFanDirection CoralFanDirection { get => _coralFanDirection; set => NotifyStateUpdate(_coralFanDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralFanDirection.Name:
						NotifyStateUpdate(_coralFanDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralFanDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralFanDirection);
		} // method

		public override object Clone()
		{
			var block = (HornCoralFan) base.Clone();

			block._coralFanDirection = (MiNET.Blocks.States.CoralFanDirection) _coralFanDirection.Clone();

			return block;
		} // method
	} // class

	public partial class HornCoralWallFan : CoralWallFanBase
	{
		private MiNET.Blocks.States.CoralDirection _coralDirection = new MiNET.Blocks.States.CoralDirection();

		public override string Id => "minecraft:horn_coral_wall_fan";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.CoralDirection CoralDirection { get => _coralDirection; set => NotifyStateUpdate(_coralDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralDirection.Name:
						NotifyStateUpdate(_coralDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralDirection);
		} // method

		public override object Clone()
		{
			var block = (HornCoralWallFan) base.Clone();

			block._coralDirection = (MiNET.Blocks.States.CoralDirection) _coralDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Ice : Block
	{
		public override string Id => "minecraft:ice";
	} // class

	public partial class InfestedChiseledStoneBricks : InfestedBlockBase
	{
		public override string Id => "minecraft:infested_chiseled_stone_bricks";
	} // class

	public partial class InfestedCobblestone : InfestedBlockBase
	{
		public override string Id => "minecraft:infested_cobblestone";
	} // class

	public partial class InfestedCrackedStoneBricks : InfestedBlockBase
	{
		public override string Id => "minecraft:infested_cracked_stone_bricks";
	} // class

	public partial class InfestedDeepslate : InfestedBlockBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:infested_deepslate";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (InfestedDeepslate) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class InfestedMossyStoneBricks : InfestedBlockBase
	{
		public override string Id => "minecraft:infested_mossy_stone_bricks";
	} // class

	public partial class InfestedStone : InfestedBlockBase
	{
		public override string Id => "minecraft:infested_stone";
	} // class

	public partial class InfestedStoneBricks : InfestedBlockBase
	{
		public override string Id => "minecraft:infested_stone_bricks";
	} // class

	public partial class InfoUpdate : Block
	{
		public override string Id => "minecraft:info_update";
	} // class

	public partial class InfoUpdate2 : Block
	{
		public override string Id => "minecraft:info_update2";
	} // class

	public partial class InvisibleBedrock : Block
	{
		public override string Id => "minecraft:invisible_bedrock";
	} // class

	public partial class IronBars : Block
	{
		public override string Id => "minecraft:iron_bars";
	} // class

	public partial class IronBlock : Block
	{
		public override string Id => "minecraft:iron_block";
	} // class

	public partial class IronDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:iron_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (IronDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class IronOre : Block
	{
		public override string Id => "minecraft:iron_ore";
	} // class

	public partial class IronTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:iron_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (IronTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class Jigsaw : Block
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.Rotation _rotation = new MiNET.Blocks.States.Rotation();

		public override string Id => "minecraft:jigsaw";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 3)]
		public int Rotation { get => _rotation.Value; set => NotifyStateUpdate(_rotation, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _rotation.Name:
						NotifyStateUpdate(_rotation, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
			yield return _rotation;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection, _rotation);
		} // method

		public override object Clone()
		{
			var block = (Jigsaw) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._rotation = (MiNET.Blocks.States.Rotation) _rotation.Clone();

			return block;
		} // method
	} // class

	public partial class Jukebox : Block
	{
		public override string Id => "minecraft:jukebox";
	} // class

	public partial class JungleButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:jungle_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (JungleButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class JungleDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:jungle_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (JungleDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class JungleDoubleSlab : DoubleWoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:jungle_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (JungleDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class JungleFence : FenceBase
	{
		public override string Id => "minecraft:jungle_fence";
	} // class

	public partial class JungleFenceGate : FenceGateBase
	{
		private MiNET.Blocks.States.InWallBit _inWallBit = new MiNET.Blocks.States.InWallBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:jungle_fence_gate";

		[StateBit]
		public override bool InWallBit { get => Convert.ToBoolean(_inWallBit.Value); set => NotifyStateUpdate(_inWallBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _inWallBit.Name:
						NotifyStateUpdate(_inWallBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _inWallBit;
			yield return _cardinalDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _inWallBit, _cardinalDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (JungleFenceGate) base.Clone();

			block._inWallBit = (MiNET.Blocks.States.InWallBit) _inWallBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class JungleHangingSign : HangingSignBase
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:jungle_hanging_sign";

		[StateBit]
		public override bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		[StateBit]
		public override bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _facingDirection;
			yield return _groundSignDirection;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _facingDirection, _groundSignDirection, _hanging);
		} // method

		public override object Clone()
		{
			var block = (JungleHangingSign) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class JungleLeaves : LeavesBase
	{
		private MiNET.Blocks.States.PersistentBit _persistentBit = new MiNET.Blocks.States.PersistentBit();
		private MiNET.Blocks.States.UpdateBit _updateBit = new MiNET.Blocks.States.UpdateBit();

		public override string Id => "minecraft:jungle_leaves";

		[StateBit]
		public override bool PersistentBit { get => Convert.ToBoolean(_persistentBit.Value); set => NotifyStateUpdate(_persistentBit, value); }

		[StateBit]
		public override bool UpdateBit { get => Convert.ToBoolean(_updateBit.Value); set => NotifyStateUpdate(_updateBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _persistentBit.Name:
						NotifyStateUpdate(_persistentBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _updateBit.Name:
						NotifyStateUpdate(_updateBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _persistentBit;
			yield return _updateBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _persistentBit, _updateBit);
		} // method

		public override object Clone()
		{
			var block = (JungleLeaves) base.Clone();

			block._persistentBit = (MiNET.Blocks.States.PersistentBit) _persistentBit.Clone();
			block._updateBit = (MiNET.Blocks.States.UpdateBit) _updateBit.Clone();

			return block;
		} // method
	} // class

	public partial class JungleLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:jungle_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (JungleLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class JunglePlanks : PlanksBase
	{
		public override string Id => "minecraft:jungle_planks";
	} // class

	public partial class JunglePressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:jungle_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (JunglePressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class JungleSapling : SaplingBase
	{
		private MiNET.Blocks.States.AgeBit _ageBit = new MiNET.Blocks.States.AgeBit();

		public override string Id => "minecraft:jungle_sapling";

		[StateBit]
		public override bool AgeBit { get => Convert.ToBoolean(_ageBit.Value); set => NotifyStateUpdate(_ageBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _ageBit.Name:
						NotifyStateUpdate(_ageBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _ageBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _ageBit);
		} // method

		public override object Clone()
		{
			var block = (JungleSapling) base.Clone();

			block._ageBit = (MiNET.Blocks.States.AgeBit) _ageBit.Clone();

			return block;
		} // method
	} // class

	public partial class JungleSlab : WoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:jungle_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (JungleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class JungleStairs : WoodenStairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:jungle_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (JungleStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class JungleStandingSign : StandingSignBase
	{
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();

		public override string Id => "minecraft:jungle_standing_sign";

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _groundSignDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _groundSignDirection);
		} // method

		public override object Clone()
		{
			var block = (JungleStandingSign) base.Clone();

			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();

			return block;
		} // method
	} // class

	public partial class JungleTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:jungle_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (JungleTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class JungleWallSign : WallSignBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:jungle_wall_sign";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (JungleWallSign) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class JungleWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.X.Clone();

		public override string Id => "minecraft:jungle_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (JungleWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class Kelp : Block
	{
		private MiNET.Blocks.States.KelpAge _kelpAge = new MiNET.Blocks.States.KelpAge();

		public override string Id => "minecraft:kelp";

		[StateRange(0, 25)]
		public int KelpAge { get => _kelpAge.Value; set => NotifyStateUpdate(_kelpAge, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _kelpAge.Name:
						NotifyStateUpdate(_kelpAge, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _kelpAge;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _kelpAge);
		} // method

		public override object Clone()
		{
			var block = (Kelp) base.Clone();

			block._kelpAge = (MiNET.Blocks.States.KelpAge) _kelpAge.Clone();

			return block;
		} // method
	} // class

	public partial class LabTable : Block
	{
		private MiNET.Blocks.States.OldDirection _direction = new MiNET.Blocks.States.OldDirection();

		public override string Id => "minecraft:lab_table";

		[StateRange(0, 3)]
		public int Direction { get => _direction.Value; set => NotifyStateUpdate(_direction, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction);
		} // method

		public override object Clone()
		{
			var block = (LabTable) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection) _direction.Clone();

			return block;
		} // method
	} // class

	public partial class Ladder : Block
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:ladder";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (Ladder) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Lantern : Block
	{
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:lantern";

		[StateBit]
		public bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _hanging);
		} // method

		public override object Clone()
		{
			var block = (Lantern) base.Clone();

			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class LapisBlock : Block
	{
		public override string Id => "minecraft:lapis_block";
	} // class

	public partial class LapisOre : Block
	{
		public override string Id => "minecraft:lapis_ore";
	} // class

	public partial class LargeAmethystBud : Block
	{
		private MiNET.Blocks.States.BlockFace _blockFace = (States.BlockFace) MiNET.Blocks.States.BlockFace.Down.Clone();

		public override string Id => "minecraft:large_amethyst_bud";

		[StateEnum("down", "east", "north", "south", "up", "west")]
		public MiNET.Blocks.States.BlockFace BlockFace { get => _blockFace; set => NotifyStateUpdate(_blockFace, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _blockFace.Name:
						NotifyStateUpdate(_blockFace, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _blockFace;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _blockFace);
		} // method

		public override object Clone()
		{
			var block = (LargeAmethystBud) base.Clone();

			block._blockFace = (MiNET.Blocks.States.BlockFace) _blockFace.Clone();

			return block;
		} // method
	} // class

	public partial class LargeFern : DoublePlantBase
	{
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:large_fern";

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (LargeFern) base.Clone();

			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class Lava
	{
		private MiNET.Blocks.States.LiquidDepth _liquidDepth = new MiNET.Blocks.States.LiquidDepth();

		public override string Id => "minecraft:lava";

		[StateRange(0, 15)]
		public override int LiquidDepth { get => _liquidDepth.Value; set => NotifyStateUpdate(_liquidDepth, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _liquidDepth.Name:
						NotifyStateUpdate(_liquidDepth, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _liquidDepth;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _liquidDepth);
		} // method

		public override object Clone()
		{
			var block = (Lava) base.Clone();

			block._liquidDepth = (MiNET.Blocks.States.LiquidDepth) _liquidDepth.Clone();

			return block;
		} // method
	} // class

	public partial class Lectern : Block
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.PoweredBit _poweredBit = new MiNET.Blocks.States.PoweredBit();

		public override string Id => "minecraft:lectern";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public bool PoweredBit { get => Convert.ToBoolean(_poweredBit.Value); set => NotifyStateUpdate(_poweredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _poweredBit.Name:
						NotifyStateUpdate(_poweredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
			yield return _poweredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection, _poweredBit);
		} // method

		public override object Clone()
		{
			var block = (Lectern) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._poweredBit = (MiNET.Blocks.States.PoweredBit) _poweredBit.Clone();

			return block;
		} // method
	} // class

	public partial class Lever : Block
	{
		private MiNET.Blocks.States.LeverDirection _leverDirection = (States.LeverDirection) MiNET.Blocks.States.LeverDirection.DownEastWest.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:lever";

		[StateEnum("down_east_west", "down_north_south", "east", "north", "south", "up_east_west", "up_north_south", "west")]
		public MiNET.Blocks.States.LeverDirection LeverDirection { get => _leverDirection; set => NotifyStateUpdate(_leverDirection, value.Value); }

		[StateBit]
		public bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _leverDirection.Name:
						NotifyStateUpdate(_leverDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _leverDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _leverDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (Lever) base.Clone();

			block._leverDirection = (MiNET.Blocks.States.LeverDirection) _leverDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class LightBlock0 : Block
	{
		public override string Id => "minecraft:light_block_0";
	} // class

	public partial class LightBlock1 : Block
	{
		public override string Id => "minecraft:light_block_1";
	} // class

	public partial class LightBlock10 : Block
	{
		public override string Id => "minecraft:light_block_10";
	} // class

	public partial class LightBlock11 : Block
	{
		public override string Id => "minecraft:light_block_11";
	} // class

	public partial class LightBlock12 : Block
	{
		public override string Id => "minecraft:light_block_12";
	} // class

	public partial class LightBlock13 : Block
	{
		public override string Id => "minecraft:light_block_13";
	} // class

	public partial class LightBlock14 : Block
	{
		public override string Id => "minecraft:light_block_14";
	} // class

	public partial class LightBlock15 : Block
	{
		public override string Id => "minecraft:light_block_15";
	} // class

	public partial class LightBlock2 : Block
	{
		public override string Id => "minecraft:light_block_2";
	} // class

	public partial class LightBlock3 : Block
	{
		public override string Id => "minecraft:light_block_3";
	} // class

	public partial class LightBlock4 : Block
	{
		public override string Id => "minecraft:light_block_4";
	} // class

	public partial class LightBlock5 : Block
	{
		public override string Id => "minecraft:light_block_5";
	} // class

	public partial class LightBlock6 : Block
	{
		public override string Id => "minecraft:light_block_6";
	} // class

	public partial class LightBlock7 : Block
	{
		public override string Id => "minecraft:light_block_7";
	} // class

	public partial class LightBlock8 : Block
	{
		public override string Id => "minecraft:light_block_8";
	} // class

	public partial class LightBlock9 : Block
	{
		public override string Id => "minecraft:light_block_9";
	} // class

	public partial class LightBlueCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:light_blue_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (LightBlueCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class LightBlueCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:light_blue_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (LightBlueCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class LightBlueCarpet : CarpetBase
	{
		public override string Id => "minecraft:light_blue_carpet";
	} // class

	public partial class LightBlueConcrete : ConcreteBase
	{
		public override string Id => "minecraft:light_blue_concrete";
	} // class

	public partial class LightBlueConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:light_blue_concrete_powder";
	} // class

	public partial class LightBlueGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:light_blue_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (LightBlueGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class LightBlueShulkerBox : Block
	{
		public override string Id => "minecraft:light_blue_shulker_box";
	} // class

	public partial class LightBlueStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:light_blue_stained_glass";
	} // class

	public partial class LightBlueStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:light_blue_stained_glass_pane";
	} // class

	public partial class LightBlueTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:light_blue_terracotta";
	} // class

	public partial class LightBlueWool : WoolBase
	{
		public override string Id => "minecraft:light_blue_wool";
	} // class

	public partial class LightGrayCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:light_gray_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (LightGrayCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class LightGrayCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:light_gray_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (LightGrayCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class LightGrayCarpet : CarpetBase
	{
		public override string Id => "minecraft:light_gray_carpet";
	} // class

	public partial class LightGrayConcrete : ConcreteBase
	{
		public override string Id => "minecraft:light_gray_concrete";
	} // class

	public partial class LightGrayConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:light_gray_concrete_powder";
	} // class

	public partial class LightGrayShulkerBox : Block
	{
		public override string Id => "minecraft:light_gray_shulker_box";
	} // class

	public partial class LightGrayStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:light_gray_stained_glass";
	} // class

	public partial class LightGrayStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:light_gray_stained_glass_pane";
	} // class

	public partial class LightGrayTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:light_gray_terracotta";
	} // class

	public partial class LightGrayWool : WoolBase
	{
		public override string Id => "minecraft:light_gray_wool";
	} // class

	public partial class LightWeightedPressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:light_weighted_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (LightWeightedPressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class LightningRod : Block
	{
		private MiNET.Blocks.States.OldFacingDirection1 _facingDirection = new MiNET.Blocks.States.OldFacingDirection1();

		public override string Id => "minecraft:lightning_rod";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection1 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (LightningRod) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection1) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Lilac : DoublePlantBase
	{
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:lilac";

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (Lilac) base.Clone();

			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class LilyOfTheValley : FlowerBase
	{
		public override string Id => "minecraft:lily_of_the_valley";
	} // class

	public partial class LimeCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:lime_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (LimeCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class LimeCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:lime_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (LimeCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class LimeCarpet : CarpetBase
	{
		public override string Id => "minecraft:lime_carpet";
	} // class

	public partial class LimeConcrete : ConcreteBase
	{
		public override string Id => "minecraft:lime_concrete";
	} // class

	public partial class LimeConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:lime_concrete_powder";
	} // class

	public partial class LimeGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:lime_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (LimeGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class LimeShulkerBox : Block
	{
		public override string Id => "minecraft:lime_shulker_box";
	} // class

	public partial class LimeStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:lime_stained_glass";
	} // class

	public partial class LimeStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:lime_stained_glass_pane";
	} // class

	public partial class LimeTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:lime_terracotta";
	} // class

	public partial class LimeWool : WoolBase
	{
		public override string Id => "minecraft:lime_wool";
	} // class

	public partial class LitBlastFurnace
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:lit_blast_furnace";

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (LitBlastFurnace) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class LitDeepslateRedstoneOre : Block
	{
		public override string Id => "minecraft:lit_deepslate_redstone_ore";
	} // class

	public partial class LitFurnace
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:lit_furnace";

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (LitFurnace) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class LitPumpkin : Block
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:lit_pumpkin";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (LitPumpkin) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class LitRedstoneLamp
	{
		public override string Id => "minecraft:lit_redstone_lamp";
	} // class

	public partial class LitRedstoneOre
	{
		public override string Id => "minecraft:lit_redstone_ore";
	} // class

	public partial class LitSmoker : Block
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:lit_smoker";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (LitSmoker) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Lodestone : Block
	{
		public override string Id => "minecraft:lodestone";
	} // class

	public partial class Loom : Block
	{
		private MiNET.Blocks.States.OldDirection1 _direction = new MiNET.Blocks.States.OldDirection1();

		public override string Id => "minecraft:loom";

		[StateRange(0, 3)]
		public MiNET.Blocks.States.OldDirection1 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction);
		} // method

		public override object Clone()
		{
			var block = (Loom) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection1) _direction.Clone();

			return block;
		} // method
	} // class

	public partial class MagentaCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:magenta_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (MagentaCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class MagentaCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:magenta_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (MagentaCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class MagentaCarpet : CarpetBase
	{
		public override string Id => "minecraft:magenta_carpet";
	} // class

	public partial class MagentaConcrete : ConcreteBase
	{
		public override string Id => "minecraft:magenta_concrete";
	} // class

	public partial class MagentaConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:magenta_concrete_powder";
	} // class

	public partial class MagentaGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:magenta_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (MagentaGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class MagentaShulkerBox : Block
	{
		public override string Id => "minecraft:magenta_shulker_box";
	} // class

	public partial class MagentaStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:magenta_stained_glass";
	} // class

	public partial class MagentaStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:magenta_stained_glass_pane";
	} // class

	public partial class MagentaTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:magenta_terracotta";
	} // class

	public partial class MagentaWool : WoolBase
	{
		public override string Id => "minecraft:magenta_wool";
	} // class

	public partial class Magma : Block
	{
		public override string Id => "minecraft:magma";
	} // class

	public partial class MangroveButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:mangrove_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (MangroveButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class MangroveDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:mangrove_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (MangroveDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class MangroveDoubleSlab : DoubleWoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:mangrove_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (MangroveDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class MangroveFence : FenceBase
	{
		public override string Id => "minecraft:mangrove_fence";
	} // class

	public partial class MangroveFenceGate : FenceGateBase
	{
		private MiNET.Blocks.States.InWallBit _inWallBit = new MiNET.Blocks.States.InWallBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:mangrove_fence_gate";

		[StateBit]
		public override bool InWallBit { get => Convert.ToBoolean(_inWallBit.Value); set => NotifyStateUpdate(_inWallBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _inWallBit.Name:
						NotifyStateUpdate(_inWallBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _inWallBit;
			yield return _cardinalDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _inWallBit, _cardinalDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (MangroveFenceGate) base.Clone();

			block._inWallBit = (MiNET.Blocks.States.InWallBit) _inWallBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class MangroveHangingSign : HangingSignBase
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:mangrove_hanging_sign";

		[StateBit]
		public override bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		[StateBit]
		public override bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _facingDirection;
			yield return _groundSignDirection;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _facingDirection, _groundSignDirection, _hanging);
		} // method

		public override object Clone()
		{
			var block = (MangroveHangingSign) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class MangroveLeaves : LeavesBase
	{
		private MiNET.Blocks.States.PersistentBit _persistentBit = new MiNET.Blocks.States.PersistentBit();
		private MiNET.Blocks.States.UpdateBit _updateBit = new MiNET.Blocks.States.UpdateBit();

		public override string Id => "minecraft:mangrove_leaves";

		[StateBit]
		public override bool PersistentBit { get => Convert.ToBoolean(_persistentBit.Value); set => NotifyStateUpdate(_persistentBit, value); }

		[StateBit]
		public override bool UpdateBit { get => Convert.ToBoolean(_updateBit.Value); set => NotifyStateUpdate(_updateBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _persistentBit.Name:
						NotifyStateUpdate(_persistentBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _updateBit.Name:
						NotifyStateUpdate(_updateBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _persistentBit;
			yield return _updateBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _persistentBit, _updateBit);
		} // method

		public override object Clone()
		{
			var block = (MangroveLeaves) base.Clone();

			block._persistentBit = (MiNET.Blocks.States.PersistentBit) _persistentBit.Clone();
			block._updateBit = (MiNET.Blocks.States.UpdateBit) _updateBit.Clone();

			return block;
		} // method
	} // class

	public partial class MangroveLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:mangrove_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (MangroveLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class MangrovePlanks : PlanksBase
	{
		public override string Id => "minecraft:mangrove_planks";
	} // class

	public partial class MangrovePressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:mangrove_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (MangrovePressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class MangrovePropagule : Block
	{
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();
		private MiNET.Blocks.States.PropaguleStage _propaguleStage = new MiNET.Blocks.States.PropaguleStage();

		public override string Id => "minecraft:mangrove_propagule";

		[StateBit]
		public bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		[StateRange(0, 4)]
		public int PropaguleStage { get => _propaguleStage.Value; set => NotifyStateUpdate(_propaguleStage, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
					case BlockStateInt s when s.Name == _propaguleStage.Name:
						NotifyStateUpdate(_propaguleStage, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _hanging;
			yield return _propaguleStage;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _hanging, _propaguleStage);
		} // method

		public override object Clone()
		{
			var block = (MangrovePropagule) base.Clone();

			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();
			block._propaguleStage = (MiNET.Blocks.States.PropaguleStage) _propaguleStage.Clone();

			return block;
		} // method
	} // class

	public partial class MangroveRoots : Block
	{
		public override string Id => "minecraft:mangrove_roots";
	} // class

	public partial class MangroveSlab : WoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:mangrove_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (MangroveSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class MangroveStairs : WoodenStairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:mangrove_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (MangroveStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class MangroveStandingSign : StandingSignBase
	{
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();

		public override string Id => "minecraft:mangrove_standing_sign";

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _groundSignDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _groundSignDirection);
		} // method

		public override object Clone()
		{
			var block = (MangroveStandingSign) base.Clone();

			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();

			return block;
		} // method
	} // class

	public partial class MangroveTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:mangrove_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (MangroveTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class MangroveWallSign : WallSignBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:mangrove_wall_sign";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (MangroveWallSign) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class MangroveWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:mangrove_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (MangroveWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class MaterialReducer : Block
	{
		private MiNET.Blocks.States.OldDirection _direction = new MiNET.Blocks.States.OldDirection();

		public override string Id => "minecraft:material_reducer";

		[StateRange(0, 3)]
		public int Direction { get => _direction.Value; set => NotifyStateUpdate(_direction, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction);
		} // method

		public override object Clone()
		{
			var block = (MaterialReducer) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection) _direction.Clone();

			return block;
		} // method
	} // class

	public partial class MediumAmethystBud : Block
	{
		private MiNET.Blocks.States.BlockFace _blockFace = (States.BlockFace) MiNET.Blocks.States.BlockFace.Down.Clone();

		public override string Id => "minecraft:medium_amethyst_bud";

		[StateEnum("down", "east", "north", "south", "up", "west")]
		public MiNET.Blocks.States.BlockFace BlockFace { get => _blockFace; set => NotifyStateUpdate(_blockFace, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _blockFace.Name:
						NotifyStateUpdate(_blockFace, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _blockFace;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _blockFace);
		} // method

		public override object Clone()
		{
			var block = (MediumAmethystBud) base.Clone();

			block._blockFace = (MiNET.Blocks.States.BlockFace) _blockFace.Clone();

			return block;
		} // method
	} // class

	public partial class MelonBlock : Block
	{
		public override string Id => "minecraft:melon_block";
	} // class

	public partial class MelonStem : Block
	{
		private MiNET.Blocks.States.OldFacingDirection1 _facingDirection = new MiNET.Blocks.States.OldFacingDirection1();
		private MiNET.Blocks.States.Growth _growth = new MiNET.Blocks.States.Growth();

		public override string Id => "minecraft:melon_stem";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection1 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 7)]
		public int Growth { get => _growth.Value; set => NotifyStateUpdate(_growth, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _growth.Name:
						NotifyStateUpdate(_growth, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
			yield return _growth;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection, _growth);
		} // method

		public override object Clone()
		{
			var block = (MelonStem) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection1) _facingDirection.Clone();
			block._growth = (MiNET.Blocks.States.Growth) _growth.Clone();

			return block;
		} // method
	} // class

	public partial class MobSpawner : Block
	{
		public override string Id => "minecraft:mob_spawner";
	} // class

	public partial class MossBlock : Block
	{
		public override string Id => "minecraft:moss_block";
	} // class

	public partial class MossCarpet : CarpetBase
	{
		public override string Id => "minecraft:moss_carpet";
	} // class

	public partial class MossyCobblestone : Block
	{
		public override string Id => "minecraft:mossy_cobblestone";
	} // class

	public partial class MossyCobblestoneDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:mossy_cobblestone_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (MossyCobblestoneDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class MossyCobblestoneSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:mossy_cobblestone_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (MossyCobblestoneSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class MossyCobblestoneStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:mossy_cobblestone_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (MossyCobblestoneStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class MossyCobblestoneWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit() { Value = 1 };

		public override string Id => "minecraft:mossy_cobblestone_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (MossyCobblestoneWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class MossyStoneBrickDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:mossy_stone_brick_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (MossyStoneBrickDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class MossyStoneBrickSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:mossy_stone_brick_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (MossyStoneBrickSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class MossyStoneBrickStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:mossy_stone_brick_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (MossyStoneBrickStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class MossyStoneBrickWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit() { Value = 1 };

		public override string Id => "minecraft:mossy_stone_brick_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (MossyStoneBrickWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class MossyStoneBricks : Block
	{
		public override string Id => "minecraft:mossy_stone_bricks";
	} // class

	public partial class MovingBlock : Block
	{
		public override string Id => "minecraft:moving_block";
	} // class

	public partial class Mud : Block
	{
		public override string Id => "minecraft:mud";
	} // class

	public partial class MudBrickDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:mud_brick_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (MudBrickDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class MudBrickSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:mud_brick_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (MudBrickSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class MudBrickStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:mud_brick_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (MudBrickStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class MudBrickWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:mud_brick_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (MudBrickWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class MudBricks : Block
	{
		public override string Id => "minecraft:mud_bricks";
	} // class

	public partial class MuddyMangroveRoots : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:muddy_mangrove_roots";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (MuddyMangroveRoots) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class MushroomStem : Block
	{
		private MiNET.Blocks.States.HugeMushroomBits _hugeMushroomBits = new MiNET.Blocks.States.HugeMushroomBits();

		public override string Id => "minecraft:mushroom_stem";

		[StateRange(0, 15)]
		public int HugeMushroomBits { get => _hugeMushroomBits.Value; set => NotifyStateUpdate(_hugeMushroomBits, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _hugeMushroomBits.Name:
						NotifyStateUpdate(_hugeMushroomBits, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _hugeMushroomBits;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _hugeMushroomBits);
		} // method

		public override object Clone()
		{
			var block = (MushroomStem) base.Clone();

			block._hugeMushroomBits = (MiNET.Blocks.States.HugeMushroomBits) _hugeMushroomBits.Clone();

			return block;
		} // method
	} // class

	public partial class Mycelium : Block
	{
		public override string Id => "minecraft:mycelium";
	} // class

	public partial class NetherBrick : Block
	{
		public override string Id => "minecraft:nether_brick";
	} // class

	public partial class NetherBrickDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:nether_brick_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (NetherBrickDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class NetherBrickFence : FenceBase
	{
		public override string Id => "minecraft:nether_brick_fence";
	} // class

	public partial class NetherBrickSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:nether_brick_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (NetherBrickSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class NetherBrickStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:nether_brick_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (NetherBrickStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class NetherBrickWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit() { Value = 1 };

		public override string Id => "minecraft:nether_brick_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (NetherBrickWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class NetherGoldOre : Block
	{
		public override string Id => "minecraft:nether_gold_ore";
	} // class

	public partial class NetherSprouts : Block
	{
		public override string Id => "minecraft:nether_sprouts";
	} // class

	public partial class NetherWart : Block
	{
		private MiNET.Blocks.States.Age _age = new MiNET.Blocks.States.Age();

		public override string Id => "minecraft:nether_wart";

		[StateRange(0, 3)]
		public int Age { get => _age.Value; set => NotifyStateUpdate(_age, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _age.Name:
						NotifyStateUpdate(_age, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _age;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _age);
		} // method

		public override object Clone()
		{
			var block = (NetherWart) base.Clone();

			block._age = (MiNET.Blocks.States.Age) _age.Clone();

			return block;
		} // method
	} // class

	public partial class NetherWartBlock : Block
	{
		public override string Id => "minecraft:nether_wart_block";
	} // class

	public partial class NetheriteBlock : Block
	{
		public override string Id => "minecraft:netherite_block";
	} // class

	public partial class Netherrack : Block
	{
		public override string Id => "minecraft:netherrack";
	} // class

	public partial class Netherreactor : Block
	{
		public override string Id => "minecraft:netherreactor";
	} // class

	public partial class NormalStoneDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:normal_stone_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (NormalStoneDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class NormalStoneSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:normal_stone_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (NormalStoneSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class NormalStoneStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:normal_stone_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (NormalStoneStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Noteblock : Block
	{
		public override string Id => "minecraft:noteblock";
	} // class

	public partial class OakDoubleSlab : DoubleWoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:oak_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (OakDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class OakFence : FenceBase
	{
		public override string Id => "minecraft:oak_fence";
	} // class

	public partial class OakHangingSign : HangingSignBase
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:oak_hanging_sign";

		[StateBit]
		public override bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		[StateBit]
		public override bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _facingDirection;
			yield return _groundSignDirection;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _facingDirection, _groundSignDirection, _hanging);
		} // method

		public override object Clone()
		{
			var block = (OakHangingSign) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class OakLeaves : LeavesBase
	{
		private MiNET.Blocks.States.PersistentBit _persistentBit = new MiNET.Blocks.States.PersistentBit();
		private MiNET.Blocks.States.UpdateBit _updateBit = new MiNET.Blocks.States.UpdateBit();

		public override string Id => "minecraft:oak_leaves";

		[StateBit]
		public override bool PersistentBit { get => Convert.ToBoolean(_persistentBit.Value); set => NotifyStateUpdate(_persistentBit, value); }

		[StateBit]
		public override bool UpdateBit { get => Convert.ToBoolean(_updateBit.Value); set => NotifyStateUpdate(_updateBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _persistentBit.Name:
						NotifyStateUpdate(_persistentBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _updateBit.Name:
						NotifyStateUpdate(_updateBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _persistentBit;
			yield return _updateBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _persistentBit, _updateBit);
		} // method

		public override object Clone()
		{
			var block = (OakLeaves) base.Clone();

			block._persistentBit = (MiNET.Blocks.States.PersistentBit) _persistentBit.Clone();
			block._updateBit = (MiNET.Blocks.States.UpdateBit) _updateBit.Clone();

			return block;
		} // method
	} // class

	public partial class OakLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:oak_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (OakLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class OakPlanks : PlanksBase
	{
		public override string Id => "minecraft:oak_planks";
	} // class

	public partial class OakSapling : SaplingBase
	{
		private MiNET.Blocks.States.AgeBit _ageBit = new MiNET.Blocks.States.AgeBit();

		public override string Id => "minecraft:oak_sapling";

		[StateBit]
		public override bool AgeBit { get => Convert.ToBoolean(_ageBit.Value); set => NotifyStateUpdate(_ageBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _ageBit.Name:
						NotifyStateUpdate(_ageBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _ageBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _ageBit);
		} // method

		public override object Clone()
		{
			var block = (OakSapling) base.Clone();

			block._ageBit = (MiNET.Blocks.States.AgeBit) _ageBit.Clone();

			return block;
		} // method
	} // class

	public partial class OakSlab : WoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:oak_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (OakSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class OakStairs : WoodenStairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:oak_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (OakStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class OakWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.X.Clone();

		public override string Id => "minecraft:oak_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (OakWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class Observer : Block
	{
		private MiNET.Blocks.States.FacingDirection _facingDirection = (States.FacingDirection) MiNET.Blocks.States.FacingDirection.Down.Clone();
		private MiNET.Blocks.States.PoweredBit _poweredBit = new MiNET.Blocks.States.PoweredBit();

		public override string Id => "minecraft:observer";

		[StateEnum("down", "east", "north", "south", "up", "west")]
		public MiNET.Blocks.States.FacingDirection FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateBit]
		public bool PoweredBit { get => Convert.ToBoolean(_poweredBit.Value); set => NotifyStateUpdate(_poweredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _poweredBit.Name:
						NotifyStateUpdate(_poweredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
			yield return _poweredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection, _poweredBit);
		} // method

		public override object Clone()
		{
			var block = (Observer) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.FacingDirection) _facingDirection.Clone();
			block._poweredBit = (MiNET.Blocks.States.PoweredBit) _poweredBit.Clone();

			return block;
		} // method
	} // class

	public partial class Obsidian : Block
	{
		public override string Id => "minecraft:obsidian";
	} // class

	public partial class OchreFroglight : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:ochre_froglight";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (OchreFroglight) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class OpenEyeblossom : Block
	{
		public override string Id => "minecraft:open_eyeblossom";
	} // class

	public partial class OrangeCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:orange_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (OrangeCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class OrangeCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:orange_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (OrangeCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class OrangeCarpet : CarpetBase
	{
		public override string Id => "minecraft:orange_carpet";
	} // class

	public partial class OrangeConcrete : ConcreteBase
	{
		public override string Id => "minecraft:orange_concrete";
	} // class

	public partial class OrangeConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:orange_concrete_powder";
	} // class

	public partial class OrangeGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:orange_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (OrangeGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class OrangeShulkerBox : Block
	{
		public override string Id => "minecraft:orange_shulker_box";
	} // class

	public partial class OrangeStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:orange_stained_glass";
	} // class

	public partial class OrangeStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:orange_stained_glass_pane";
	} // class

	public partial class OrangeTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:orange_terracotta";
	} // class

	public partial class OrangeTulip : FlowerBase
	{
		public override string Id => "minecraft:orange_tulip";
	} // class

	public partial class OrangeWool : WoolBase
	{
		public override string Id => "minecraft:orange_wool";
	} // class

	public partial class OxeyeDaisy : FlowerBase
	{
		public override string Id => "minecraft:oxeye_daisy";
	} // class

	public partial class OxidizedChiseledCopper : Block
	{
		public override string Id => "minecraft:oxidized_chiseled_copper";
	} // class

	public partial class OxidizedCopper : Block
	{
		public override string Id => "minecraft:oxidized_copper";
	} // class

	public partial class OxidizedCopperBulb : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();
		private MiNET.Blocks.States.PoweredBit _poweredBit = new MiNET.Blocks.States.PoweredBit();

		public override string Id => "minecraft:oxidized_copper_bulb";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		[StateBit]
		public bool PoweredBit { get => Convert.ToBoolean(_poweredBit.Value); set => NotifyStateUpdate(_poweredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
					case BlockStateByte s when s.Name == _poweredBit.Name:
						NotifyStateUpdate(_poweredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
			yield return _poweredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit, _poweredBit);
		} // method

		public override object Clone()
		{
			var block = (OxidizedCopperBulb) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();
			block._poweredBit = (MiNET.Blocks.States.PoweredBit) _poweredBit.Clone();

			return block;
		} // method
	} // class

	public partial class OxidizedCopperDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:oxidized_copper_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (OxidizedCopperDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class OxidizedCopperGrate : Block
	{
		public override string Id => "minecraft:oxidized_copper_grate";
	} // class

	public partial class OxidizedCopperTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:oxidized_copper_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (OxidizedCopperTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class OxidizedCutCopper : Block
	{
		public override string Id => "minecraft:oxidized_cut_copper";
	} // class

	public partial class OxidizedCutCopperSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:oxidized_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (OxidizedCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class OxidizedCutCopperStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:oxidized_cut_copper_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (OxidizedCutCopperStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class OxidizedDoubleCutCopperSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:oxidized_double_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (OxidizedDoubleCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PackedIce : Block
	{
		public override string Id => "minecraft:packed_ice";
	} // class

	public partial class PackedMud : Block
	{
		public override string Id => "minecraft:packed_mud";
	} // class

	public partial class PaleHangingMoss : Block
	{
		private MiNET.Blocks.States.Tip _tip = new MiNET.Blocks.States.Tip();

		public override string Id => "minecraft:pale_hanging_moss";

		[StateBit]
		public bool Tip { get => Convert.ToBoolean(_tip.Value); set => NotifyStateUpdate(_tip, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _tip.Name:
						NotifyStateUpdate(_tip, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _tip;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _tip);
		} // method

		public override object Clone()
		{
			var block = (PaleHangingMoss) base.Clone();

			block._tip = (MiNET.Blocks.States.Tip) _tip.Clone();

			return block;
		} // method
	} // class

	public partial class PaleMossBlock : Block
	{
		public override string Id => "minecraft:pale_moss_block";
	} // class

	public partial class PaleMossCarpet : CarpetBase
	{
		private MiNET.Blocks.States.PaleMossCarpetSideEast _paleMossCarpetSideEast = (States.PaleMossCarpetSideEast) MiNET.Blocks.States.PaleMossCarpetSideEast.None.Clone();
		private MiNET.Blocks.States.PaleMossCarpetSideNorth _paleMossCarpetSideNorth = (States.PaleMossCarpetSideNorth) MiNET.Blocks.States.PaleMossCarpetSideNorth.None.Clone();
		private MiNET.Blocks.States.PaleMossCarpetSideSouth _paleMossCarpetSideSouth = (States.PaleMossCarpetSideSouth) MiNET.Blocks.States.PaleMossCarpetSideSouth.None.Clone();
		private MiNET.Blocks.States.PaleMossCarpetSideWest _paleMossCarpetSideWest = (States.PaleMossCarpetSideWest) MiNET.Blocks.States.PaleMossCarpetSideWest.None.Clone();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:pale_moss_carpet";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.PaleMossCarpetSideEast PaleMossCarpetSideEast { get => _paleMossCarpetSideEast; set => NotifyStateUpdate(_paleMossCarpetSideEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.PaleMossCarpetSideNorth PaleMossCarpetSideNorth { get => _paleMossCarpetSideNorth; set => NotifyStateUpdate(_paleMossCarpetSideNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.PaleMossCarpetSideSouth PaleMossCarpetSideSouth { get => _paleMossCarpetSideSouth; set => NotifyStateUpdate(_paleMossCarpetSideSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.PaleMossCarpetSideWest PaleMossCarpetSideWest { get => _paleMossCarpetSideWest; set => NotifyStateUpdate(_paleMossCarpetSideWest, value.Value); }

		[StateBit]
		public bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _paleMossCarpetSideEast.Name:
						NotifyStateUpdate(_paleMossCarpetSideEast, s.Value);
						break;
					case BlockStateString s when s.Name == _paleMossCarpetSideNorth.Name:
						NotifyStateUpdate(_paleMossCarpetSideNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _paleMossCarpetSideSouth.Name:
						NotifyStateUpdate(_paleMossCarpetSideSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _paleMossCarpetSideWest.Name:
						NotifyStateUpdate(_paleMossCarpetSideWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _paleMossCarpetSideEast;
			yield return _paleMossCarpetSideNorth;
			yield return _paleMossCarpetSideSouth;
			yield return _paleMossCarpetSideWest;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _paleMossCarpetSideEast, _paleMossCarpetSideNorth, _paleMossCarpetSideSouth, _paleMossCarpetSideWest, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (PaleMossCarpet) base.Clone();

			block._paleMossCarpetSideEast = (MiNET.Blocks.States.PaleMossCarpetSideEast) _paleMossCarpetSideEast.Clone();
			block._paleMossCarpetSideNorth = (MiNET.Blocks.States.PaleMossCarpetSideNorth) _paleMossCarpetSideNorth.Clone();
			block._paleMossCarpetSideSouth = (MiNET.Blocks.States.PaleMossCarpetSideSouth) _paleMossCarpetSideSouth.Clone();
			block._paleMossCarpetSideWest = (MiNET.Blocks.States.PaleMossCarpetSideWest) _paleMossCarpetSideWest.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:pale_oak_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (PaleOakButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:pale_oak_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (PaleOakDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakDoubleSlab : DoubleWoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:pale_oak_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PaleOakDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakFence : FenceBase
	{
		public override string Id => "minecraft:pale_oak_fence";
	} // class

	public partial class PaleOakFenceGate : FenceGateBase
	{
		private MiNET.Blocks.States.InWallBit _inWallBit = new MiNET.Blocks.States.InWallBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:pale_oak_fence_gate";

		[StateBit]
		public override bool InWallBit { get => Convert.ToBoolean(_inWallBit.Value); set => NotifyStateUpdate(_inWallBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _inWallBit.Name:
						NotifyStateUpdate(_inWallBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _inWallBit;
			yield return _cardinalDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _inWallBit, _cardinalDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (PaleOakFenceGate) base.Clone();

			block._inWallBit = (MiNET.Blocks.States.InWallBit) _inWallBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakHangingSign : HangingSignBase
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:pale_oak_hanging_sign";

		[StateBit]
		public override bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		[StateBit]
		public override bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _facingDirection;
			yield return _groundSignDirection;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _facingDirection, _groundSignDirection, _hanging);
		} // method

		public override object Clone()
		{
			var block = (PaleOakHangingSign) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakLeaves : LeavesBase
	{
		private MiNET.Blocks.States.PersistentBit _persistentBit = new MiNET.Blocks.States.PersistentBit();
		private MiNET.Blocks.States.UpdateBit _updateBit = new MiNET.Blocks.States.UpdateBit();

		public override string Id => "minecraft:pale_oak_leaves";

		[StateBit]
		public override bool PersistentBit { get => Convert.ToBoolean(_persistentBit.Value); set => NotifyStateUpdate(_persistentBit, value); }

		[StateBit]
		public override bool UpdateBit { get => Convert.ToBoolean(_updateBit.Value); set => NotifyStateUpdate(_updateBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _persistentBit.Name:
						NotifyStateUpdate(_persistentBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _updateBit.Name:
						NotifyStateUpdate(_updateBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _persistentBit;
			yield return _updateBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _persistentBit, _updateBit);
		} // method

		public override object Clone()
		{
			var block = (PaleOakLeaves) base.Clone();

			block._persistentBit = (MiNET.Blocks.States.PersistentBit) _persistentBit.Clone();
			block._updateBit = (MiNET.Blocks.States.UpdateBit) _updateBit.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:pale_oak_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (PaleOakLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakPlanks : PlanksBase
	{
		public override string Id => "minecraft:pale_oak_planks";
	} // class

	public partial class PaleOakPressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:pale_oak_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (PaleOakPressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakSapling : SaplingBase
	{
		private MiNET.Blocks.States.AgeBit _ageBit = new MiNET.Blocks.States.AgeBit();

		public override string Id => "minecraft:pale_oak_sapling";

		[StateBit]
		public override bool AgeBit { get => Convert.ToBoolean(_ageBit.Value); set => NotifyStateUpdate(_ageBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _ageBit.Name:
						NotifyStateUpdate(_ageBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _ageBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _ageBit);
		} // method

		public override object Clone()
		{
			var block = (PaleOakSapling) base.Clone();

			block._ageBit = (MiNET.Blocks.States.AgeBit) _ageBit.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakSlab : WoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:pale_oak_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PaleOakSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakStairs : WoodenStairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:pale_oak_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (PaleOakStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakStandingSign : StandingSignBase
	{
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();

		public override string Id => "minecraft:pale_oak_standing_sign";

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _groundSignDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _groundSignDirection);
		} // method

		public override object Clone()
		{
			var block = (PaleOakStandingSign) base.Clone();

			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:pale_oak_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (PaleOakTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakWallSign : WallSignBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:pale_oak_wall_sign";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (PaleOakWallSign) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PaleOakWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:pale_oak_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (PaleOakWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class PearlescentFroglight : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:pearlescent_froglight";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (PearlescentFroglight) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class Peony : DoublePlantBase
	{
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:peony";

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (Peony) base.Clone();

			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class PetrifiedOakDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:petrified_oak_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PetrifiedOakDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PetrifiedOakSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:petrified_oak_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PetrifiedOakSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PiglinHead : HeadBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:piglin_head";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (PiglinHead) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PinkCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:pink_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (PinkCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class PinkCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:pink_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (PinkCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class PinkCarpet : CarpetBase
	{
		public override string Id => "minecraft:pink_carpet";
	} // class

	public partial class PinkConcrete : ConcreteBase
	{
		public override string Id => "minecraft:pink_concrete";
	} // class

	public partial class PinkConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:pink_concrete_powder";
	} // class

	public partial class PinkGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:pink_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (PinkGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PinkPetals : Block
	{
		private MiNET.Blocks.States.Growth _growth = new MiNET.Blocks.States.Growth();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:pink_petals";

		[StateRange(0, 7)]
		public int Growth { get => _growth.Value; set => NotifyStateUpdate(_growth, value); }

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _growth.Name:
						NotifyStateUpdate(_growth, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _growth;
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _growth, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (PinkPetals) base.Clone();

			block._growth = (MiNET.Blocks.States.Growth) _growth.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PinkShulkerBox : Block
	{
		public override string Id => "minecraft:pink_shulker_box";
	} // class

	public partial class PinkStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:pink_stained_glass";
	} // class

	public partial class PinkStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:pink_stained_glass_pane";
	} // class

	public partial class PinkTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:pink_terracotta";
	} // class

	public partial class PinkTulip : FlowerBase
	{
		public override string Id => "minecraft:pink_tulip";
	} // class

	public partial class PinkWool : WoolBase
	{
		public override string Id => "minecraft:pink_wool";
	} // class

	public partial class Piston : Block
	{
		private MiNET.Blocks.States.OldFacingDirection3 _facingDirection = new MiNET.Blocks.States.OldFacingDirection3();

		public override string Id => "minecraft:piston";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection3 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (Piston) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection3) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PistonArmCollision : Block
	{
		private MiNET.Blocks.States.OldFacingDirection3 _facingDirection = new MiNET.Blocks.States.OldFacingDirection3();

		public override string Id => "minecraft:piston_arm_collision";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection3 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (PistonArmCollision) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection3) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PitcherCrop : Block
	{
		private MiNET.Blocks.States.Growth _growth = new MiNET.Blocks.States.Growth();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:pitcher_crop";

		[StateRange(0, 7)]
		public int Growth { get => _growth.Value; set => NotifyStateUpdate(_growth, value); }

		[StateBit]
		public bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _growth.Name:
						NotifyStateUpdate(_growth, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _growth;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _growth, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (PitcherCrop) base.Clone();

			block._growth = (MiNET.Blocks.States.Growth) _growth.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class PitcherPlant : Block
	{
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:pitcher_plant";

		[StateBit]
		public bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (PitcherPlant) base.Clone();

			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class PlayerHead : HeadBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:player_head";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (PlayerHead) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Podzol : Block
	{
		public override string Id => "minecraft:podzol";
	} // class

	public partial class PointedDripstone : Block
	{
		private MiNET.Blocks.States.DripstoneThickness _dripstoneThickness = (States.DripstoneThickness) MiNET.Blocks.States.DripstoneThickness.Tip.Clone();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:pointed_dripstone";

		[StateEnum("base", "frustum", "merge", "middle", "tip")]
		public MiNET.Blocks.States.DripstoneThickness DripstoneThickness { get => _dripstoneThickness; set => NotifyStateUpdate(_dripstoneThickness, value.Value); }

		[StateBit]
		public bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _dripstoneThickness.Name:
						NotifyStateUpdate(_dripstoneThickness, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _dripstoneThickness;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _dripstoneThickness, _hanging);
		} // method

		public override object Clone()
		{
			var block = (PointedDripstone) base.Clone();

			block._dripstoneThickness = (MiNET.Blocks.States.DripstoneThickness) _dripstoneThickness.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedAndesite : Block
	{
		public override string Id => "minecraft:polished_andesite";
	} // class

	public partial class PolishedAndesiteDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_andesite_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedAndesiteDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedAndesiteSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_andesite_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedAndesiteSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedAndesiteStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:polished_andesite_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (PolishedAndesiteStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedBasalt : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:polished_basalt";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (PolishedBasalt) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedBlackstone : Block
	{
		public override string Id => "minecraft:polished_blackstone";
	} // class

	public partial class PolishedBlackstoneBrickDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_blackstone_brick_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedBlackstoneBrickDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedBlackstoneBrickSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_blackstone_brick_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedBlackstoneBrickSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedBlackstoneBrickStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:polished_blackstone_brick_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (PolishedBlackstoneBrickStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedBlackstoneBrickWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:polished_blackstone_brick_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (PolishedBlackstoneBrickWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedBlackstoneBricks : Block
	{
		public override string Id => "minecraft:polished_blackstone_bricks";
	} // class

	public partial class PolishedBlackstoneButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:polished_blackstone_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (PolishedBlackstoneButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedBlackstoneDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_blackstone_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedBlackstoneDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedBlackstonePressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:polished_blackstone_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (PolishedBlackstonePressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedBlackstoneSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_blackstone_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedBlackstoneSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedBlackstoneStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:polished_blackstone_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (PolishedBlackstoneStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedBlackstoneWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:polished_blackstone_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (PolishedBlackstoneWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedDeepslate : Block
	{
		public override string Id => "minecraft:polished_deepslate";
	} // class

	public partial class PolishedDeepslateDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_deepslate_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedDeepslateDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedDeepslateSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_deepslate_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedDeepslateSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedDeepslateStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:polished_deepslate_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (PolishedDeepslateStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedDeepslateWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:polished_deepslate_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (PolishedDeepslateWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedDiorite : Block
	{
		public override string Id => "minecraft:polished_diorite";
	} // class

	public partial class PolishedDioriteDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_diorite_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedDioriteDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedDioriteSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_diorite_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedDioriteSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedDioriteStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:polished_diorite_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (PolishedDioriteStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedGranite : Block
	{
		public override string Id => "minecraft:polished_granite";
	} // class

	public partial class PolishedGraniteDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_granite_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedGraniteDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedGraniteSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_granite_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedGraniteSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedGraniteStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:polished_granite_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (PolishedGraniteStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedTuff : Block
	{
		public override string Id => "minecraft:polished_tuff";
	} // class

	public partial class PolishedTuffDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_tuff_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedTuffDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedTuffSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:polished_tuff_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PolishedTuffSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedTuffStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:polished_tuff_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (PolishedTuffStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PolishedTuffWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:polished_tuff_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (PolishedTuffWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class Poppy : FlowerBase
	{
		public override string Id => "minecraft:poppy";
	} // class

	public partial class Portal : Block
	{
		private MiNET.Blocks.States.PortalAxis _portalAxis = (States.PortalAxis) MiNET.Blocks.States.PortalAxis.Unknown.Clone();

		public override string Id => "minecraft:portal";

		[StateEnum("unknown", "x", "z")]
		public MiNET.Blocks.States.PortalAxis PortalAxis { get => _portalAxis; set => NotifyStateUpdate(_portalAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _portalAxis.Name:
						NotifyStateUpdate(_portalAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _portalAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _portalAxis);
		} // method

		public override object Clone()
		{
			var block = (Portal) base.Clone();

			block._portalAxis = (MiNET.Blocks.States.PortalAxis) _portalAxis.Clone();

			return block;
		} // method
	} // class

	public partial class Potatoes
	{
		private MiNET.Blocks.States.Growth _growth = new MiNET.Blocks.States.Growth();

		public override string Id => "minecraft:potatoes";

		[StateRange(0, 7)]
		public override int Growth { get => _growth.Value; set => NotifyStateUpdate(_growth, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _growth.Name:
						NotifyStateUpdate(_growth, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _growth;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _growth);
		} // method

		public override object Clone()
		{
			var block = (Potatoes) base.Clone();

			block._growth = (MiNET.Blocks.States.Growth) _growth.Clone();

			return block;
		} // method
	} // class

	public partial class PowderSnow : Block
	{
		public override string Id => "minecraft:powder_snow";
	} // class

	public partial class PoweredComparator
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OutputLitBit _outputLitBit = new MiNET.Blocks.States.OutputLitBit();
		private MiNET.Blocks.States.OutputSubtractBit _outputSubtractBit = new MiNET.Blocks.States.OutputSubtractBit();

		public override string Id => "minecraft:powered_comparator";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public bool OutputLitBit { get => Convert.ToBoolean(_outputLitBit.Value); set => NotifyStateUpdate(_outputLitBit, value); }

		[StateBit]
		public bool OutputSubtractBit { get => Convert.ToBoolean(_outputSubtractBit.Value); set => NotifyStateUpdate(_outputSubtractBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _outputLitBit.Name:
						NotifyStateUpdate(_outputLitBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _outputSubtractBit.Name:
						NotifyStateUpdate(_outputSubtractBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
			yield return _outputLitBit;
			yield return _outputSubtractBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection, _outputLitBit, _outputSubtractBit);
		} // method

		public override object Clone()
		{
			var block = (PoweredComparator) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._outputLitBit = (MiNET.Blocks.States.OutputLitBit) _outputLitBit.Clone();
			block._outputSubtractBit = (MiNET.Blocks.States.OutputSubtractBit) _outputSubtractBit.Clone();

			return block;
		} // method
	} // class

	public partial class PoweredRepeater
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.RepeaterDelay _repeaterDelay = new MiNET.Blocks.States.RepeaterDelay();

		public override string Id => "minecraft:powered_repeater";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateRange(0, 3)]
		public int RepeaterDelay { get => _repeaterDelay.Value; set => NotifyStateUpdate(_repeaterDelay, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _repeaterDelay.Name:
						NotifyStateUpdate(_repeaterDelay, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
			yield return _repeaterDelay;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection, _repeaterDelay);
		} // method

		public override object Clone()
		{
			var block = (PoweredRepeater) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._repeaterDelay = (MiNET.Blocks.States.RepeaterDelay) _repeaterDelay.Clone();

			return block;
		} // method
	} // class

	public partial class Prismarine : Block
	{
		public override string Id => "minecraft:prismarine";
	} // class

	public partial class PrismarineBrickDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:prismarine_brick_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PrismarineBrickDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PrismarineBrickSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:prismarine_brick_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PrismarineBrickSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PrismarineBricks : Block
	{
		public override string Id => "minecraft:prismarine_bricks";
	} // class

	public partial class PrismarineBricksStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:prismarine_bricks_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (PrismarineBricksStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PrismarineDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:prismarine_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PrismarineDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PrismarineSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:prismarine_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PrismarineSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PrismarineStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:prismarine_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (PrismarineStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PrismarineWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit() { Value = 1 };

		public override string Id => "minecraft:prismarine_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (PrismarineWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class Pumpkin : Block
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:pumpkin";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (Pumpkin) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PumpkinStem : Block
	{
		private MiNET.Blocks.States.OldFacingDirection1 _facingDirection = new MiNET.Blocks.States.OldFacingDirection1();
		private MiNET.Blocks.States.Growth _growth = new MiNET.Blocks.States.Growth();

		public override string Id => "minecraft:pumpkin_stem";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection1 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 7)]
		public int Growth { get => _growth.Value; set => NotifyStateUpdate(_growth, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _growth.Name:
						NotifyStateUpdate(_growth, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
			yield return _growth;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection, _growth);
		} // method

		public override object Clone()
		{
			var block = (PumpkinStem) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection1) _facingDirection.Clone();
			block._growth = (MiNET.Blocks.States.Growth) _growth.Clone();

			return block;
		} // method
	} // class

	public partial class PurpleCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:purple_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (PurpleCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class PurpleCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:purple_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (PurpleCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class PurpleCarpet : CarpetBase
	{
		public override string Id => "minecraft:purple_carpet";
	} // class

	public partial class PurpleConcrete : ConcreteBase
	{
		public override string Id => "minecraft:purple_concrete";
	} // class

	public partial class PurpleConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:purple_concrete_powder";
	} // class

	public partial class PurpleGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:purple_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (PurpleGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class PurpleShulkerBox : Block
	{
		public override string Id => "minecraft:purple_shulker_box";
	} // class

	public partial class PurpleStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:purple_stained_glass";
	} // class

	public partial class PurpleStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:purple_stained_glass_pane";
	} // class

	public partial class PurpleTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:purple_terracotta";
	} // class

	public partial class PurpleWool : WoolBase
	{
		public override string Id => "minecraft:purple_wool";
	} // class

	public partial class PurpurBlock : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:purpur_block";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (PurpurBlock) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class PurpurDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:purpur_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PurpurDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PurpurPillar : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:purpur_pillar";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (PurpurPillar) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class PurpurSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:purpur_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (PurpurSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class PurpurStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:purpur_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (PurpurStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class QuartzBlock : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:quartz_block";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (QuartzBlock) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class QuartzBricks : Block
	{
		public override string Id => "minecraft:quartz_bricks";
	} // class

	public partial class QuartzDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:quartz_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (QuartzDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class QuartzOre : Block
	{
		public override string Id => "minecraft:quartz_ore";
	} // class

	public partial class QuartzPillar : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:quartz_pillar";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (QuartzPillar) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class QuartzSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:quartz_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (QuartzSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class QuartzStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:quartz_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (QuartzStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Rail : Block
	{
		private MiNET.Blocks.States.RailDirection _railDirection = new MiNET.Blocks.States.RailDirection();

		public override string Id => "minecraft:rail";

		[StateRange(0, 9)]
		public int RailDirection { get => _railDirection.Value; set => NotifyStateUpdate(_railDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _railDirection.Name:
						NotifyStateUpdate(_railDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _railDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _railDirection);
		} // method

		public override object Clone()
		{
			var block = (Rail) base.Clone();

			block._railDirection = (MiNET.Blocks.States.RailDirection) _railDirection.Clone();

			return block;
		} // method
	} // class

	public partial class RawCopperBlock : Block
	{
		public override string Id => "minecraft:raw_copper_block";
	} // class

	public partial class RawGoldBlock : Block
	{
		public override string Id => "minecraft:raw_gold_block";
	} // class

	public partial class RawIronBlock : Block
	{
		public override string Id => "minecraft:raw_iron_block";
	} // class

	public partial class RedCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:red_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (RedCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class RedCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:red_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (RedCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class RedCarpet : CarpetBase
	{
		public override string Id => "minecraft:red_carpet";
	} // class

	public partial class RedConcrete : ConcreteBase
	{
		public override string Id => "minecraft:red_concrete";
	} // class

	public partial class RedConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:red_concrete_powder";
	} // class

	public partial class RedGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:red_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (RedGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class RedMushroom : Block
	{
		public override string Id => "minecraft:red_mushroom";
	} // class

	public partial class RedMushroomBlock : Block
	{
		private MiNET.Blocks.States.HugeMushroomBits _hugeMushroomBits = new MiNET.Blocks.States.HugeMushroomBits();

		public override string Id => "minecraft:red_mushroom_block";

		[StateRange(0, 15)]
		public int HugeMushroomBits { get => _hugeMushroomBits.Value; set => NotifyStateUpdate(_hugeMushroomBits, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _hugeMushroomBits.Name:
						NotifyStateUpdate(_hugeMushroomBits, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _hugeMushroomBits;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _hugeMushroomBits);
		} // method

		public override object Clone()
		{
			var block = (RedMushroomBlock) base.Clone();

			block._hugeMushroomBits = (MiNET.Blocks.States.HugeMushroomBits) _hugeMushroomBits.Clone();

			return block;
		} // method
	} // class

	public partial class RedNetherBrick : Block
	{
		public override string Id => "minecraft:red_nether_brick";
	} // class

	public partial class RedNetherBrickDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:red_nether_brick_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (RedNetherBrickDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class RedNetherBrickSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:red_nether_brick_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (RedNetherBrickSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class RedNetherBrickStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:red_nether_brick_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (RedNetherBrickStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class RedNetherBrickWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit() { Value = 1 };

		public override string Id => "minecraft:red_nether_brick_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (RedNetherBrickWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class RedSand : Block
	{
		public override string Id => "minecraft:red_sand";
	} // class

	public partial class RedSandstone : Block
	{
		public override string Id => "minecraft:red_sandstone";
	} // class

	public partial class RedSandstoneDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:red_sandstone_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (RedSandstoneDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class RedSandstoneSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:red_sandstone_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (RedSandstoneSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class RedSandstoneStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:red_sandstone_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (RedSandstoneStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class RedSandstoneWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit() { Value = 1 };

		public override string Id => "minecraft:red_sandstone_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (RedSandstoneWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class RedShulkerBox : Block
	{
		public override string Id => "minecraft:red_shulker_box";
	} // class

	public partial class RedStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:red_stained_glass";
	} // class

	public partial class RedStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:red_stained_glass_pane";
	} // class

	public partial class RedTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:red_terracotta";
	} // class

	public partial class RedTulip : FlowerBase
	{
		public override string Id => "minecraft:red_tulip";
	} // class

	public partial class RedWool : WoolBase
	{
		public override string Id => "minecraft:red_wool";
	} // class

	public partial class RedstoneBlock : Block
	{
		public override string Id => "minecraft:redstone_block";
	} // class

	public partial class RedstoneLamp : Block
	{
		public override string Id => "minecraft:redstone_lamp";
	} // class

	public partial class RedstoneOre : Block
	{
		public override string Id => "minecraft:redstone_ore";
	} // class

	public partial class RedstoneTorch
	{
		private MiNET.Blocks.States.TorchFacingDirection _torchFacingDirection = (States.TorchFacingDirection) MiNET.Blocks.States.TorchFacingDirection.Unknown.Clone();

		public override string Id => "minecraft:redstone_torch";

		[StateEnum("east", "north", "south", "top", "unknown", "west")]
		public override MiNET.Blocks.States.TorchFacingDirection TorchFacingDirection { get => _torchFacingDirection; set => NotifyStateUpdate(_torchFacingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _torchFacingDirection.Name:
						NotifyStateUpdate(_torchFacingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _torchFacingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _torchFacingDirection);
		} // method

		public override object Clone()
		{
			var block = (RedstoneTorch) base.Clone();

			block._torchFacingDirection = (MiNET.Blocks.States.TorchFacingDirection) _torchFacingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class RedstoneWire : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:redstone_wire";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (RedstoneWire) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class Reeds : Block
	{
		private MiNET.Blocks.States.Age _age = new MiNET.Blocks.States.Age();

		public override string Id => "minecraft:reeds";

		[StateRange(0, 15)]
		public int Age { get => _age.Value; set => NotifyStateUpdate(_age, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _age.Name:
						NotifyStateUpdate(_age, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _age;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _age);
		} // method

		public override object Clone()
		{
			var block = (Reeds) base.Clone();

			block._age = (MiNET.Blocks.States.Age) _age.Clone();

			return block;
		} // method
	} // class

	public partial class ReinforcedDeepslate : Block
	{
		public override string Id => "minecraft:reinforced_deepslate";
	} // class

	public partial class RepeatingCommandBlock : Block
	{
		private MiNET.Blocks.States.ConditionalBit _conditionalBit = new MiNET.Blocks.States.ConditionalBit();
		private MiNET.Blocks.States.OldFacingDirection1 _facingDirection = new MiNET.Blocks.States.OldFacingDirection1();

		public override string Id => "minecraft:repeating_command_block";

		[StateBit]
		public bool ConditionalBit { get => Convert.ToBoolean(_conditionalBit.Value); set => NotifyStateUpdate(_conditionalBit, value); }

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection1 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _conditionalBit.Name:
						NotifyStateUpdate(_conditionalBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _conditionalBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _conditionalBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (RepeatingCommandBlock) base.Clone();

			block._conditionalBit = (MiNET.Blocks.States.ConditionalBit) _conditionalBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection1) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Reserved6 : Block
	{
		public override string Id => "minecraft:reserved6";
	} // class

	public partial class ResinBlock : Block
	{
		public override string Id => "minecraft:resin_block";
	} // class

	public partial class ResinBrickDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:resin_brick_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (ResinBrickDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class ResinBrickSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:resin_brick_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (ResinBrickSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class ResinBrickStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:resin_brick_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (ResinBrickStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class ResinBrickWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:resin_brick_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (ResinBrickWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class ResinBricks : Block
	{
		public override string Id => "minecraft:resin_bricks";
	} // class

	public partial class ResinClump : Block
	{
		private MiNET.Blocks.States.MultiFaceDirectionBits _multiFaceDirectionBits = new MiNET.Blocks.States.MultiFaceDirectionBits();

		public override string Id => "minecraft:resin_clump";

		[StateRange(0, 63)]
		public int MultiFaceDirectionBits { get => _multiFaceDirectionBits.Value; set => NotifyStateUpdate(_multiFaceDirectionBits, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _multiFaceDirectionBits.Name:
						NotifyStateUpdate(_multiFaceDirectionBits, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _multiFaceDirectionBits;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _multiFaceDirectionBits);
		} // method

		public override object Clone()
		{
			var block = (ResinClump) base.Clone();

			block._multiFaceDirectionBits = (MiNET.Blocks.States.MultiFaceDirectionBits) _multiFaceDirectionBits.Clone();

			return block;
		} // method
	} // class

	public partial class RespawnAnchor : Block
	{
		private MiNET.Blocks.States.RespawnAnchorCharge _respawnAnchorCharge = new MiNET.Blocks.States.RespawnAnchorCharge();

		public override string Id => "minecraft:respawn_anchor";

		[StateRange(0, 4)]
		public int RespawnAnchorCharge { get => _respawnAnchorCharge.Value; set => NotifyStateUpdate(_respawnAnchorCharge, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _respawnAnchorCharge.Name:
						NotifyStateUpdate(_respawnAnchorCharge, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _respawnAnchorCharge;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _respawnAnchorCharge);
		} // method

		public override object Clone()
		{
			var block = (RespawnAnchor) base.Clone();

			block._respawnAnchorCharge = (MiNET.Blocks.States.RespawnAnchorCharge) _respawnAnchorCharge.Clone();

			return block;
		} // method
	} // class

	public partial class RoseBush : DoublePlantBase
	{
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:rose_bush";

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (RoseBush) base.Clone();

			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class Sand : Block
	{
		public override string Id => "minecraft:sand";
	} // class

	public partial class Sandstone : Block
	{
		public override string Id => "minecraft:sandstone";
	} // class

	public partial class SandstoneDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:sandstone_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (SandstoneDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class SandstoneSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:sandstone_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (SandstoneSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class SandstoneStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:sandstone_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (SandstoneStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class SandstoneWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit() { Value = 1 };

		public override string Id => "minecraft:sandstone_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (SandstoneWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class Scaffolding : Block
	{
		private MiNET.Blocks.States.Stability _stability = new MiNET.Blocks.States.Stability();
		private MiNET.Blocks.States.StabilityCheck _stabilityCheck = new MiNET.Blocks.States.StabilityCheck();

		public override string Id => "minecraft:scaffolding";

		[StateRange(0, 7)]
		public int Stability { get => _stability.Value; set => NotifyStateUpdate(_stability, value); }

		[StateBit]
		public bool StabilityCheck { get => Convert.ToBoolean(_stabilityCheck.Value); set => NotifyStateUpdate(_stabilityCheck, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _stability.Name:
						NotifyStateUpdate(_stability, s.Value);
						break;
					case BlockStateByte s when s.Name == _stabilityCheck.Name:
						NotifyStateUpdate(_stabilityCheck, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _stability;
			yield return _stabilityCheck;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _stability, _stabilityCheck);
		} // method

		public override object Clone()
		{
			var block = (Scaffolding) base.Clone();

			block._stability = (MiNET.Blocks.States.Stability) _stability.Clone();
			block._stabilityCheck = (MiNET.Blocks.States.StabilityCheck) _stabilityCheck.Clone();

			return block;
		} // method
	} // class

	public partial class Sculk : Block
	{
		public override string Id => "minecraft:sculk";
	} // class

	public partial class SculkCatalyst : Block
	{
		private MiNET.Blocks.States.Bloom _bloom = new MiNET.Blocks.States.Bloom();

		public override string Id => "minecraft:sculk_catalyst";

		[StateBit]
		public bool Bloom { get => Convert.ToBoolean(_bloom.Value); set => NotifyStateUpdate(_bloom, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _bloom.Name:
						NotifyStateUpdate(_bloom, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _bloom;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _bloom);
		} // method

		public override object Clone()
		{
			var block = (SculkCatalyst) base.Clone();

			block._bloom = (MiNET.Blocks.States.Bloom) _bloom.Clone();

			return block;
		} // method
	} // class

	public partial class SculkSensor : Block
	{
		private MiNET.Blocks.States.SculkSensorPhase _sculkSensorPhase = new MiNET.Blocks.States.SculkSensorPhase();

		public override string Id => "minecraft:sculk_sensor";

		[StateRange(0, 2)]
		public int SculkSensorPhase { get => _sculkSensorPhase.Value; set => NotifyStateUpdate(_sculkSensorPhase, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _sculkSensorPhase.Name:
						NotifyStateUpdate(_sculkSensorPhase, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _sculkSensorPhase;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _sculkSensorPhase);
		} // method

		public override object Clone()
		{
			var block = (SculkSensor) base.Clone();

			block._sculkSensorPhase = (MiNET.Blocks.States.SculkSensorPhase) _sculkSensorPhase.Clone();

			return block;
		} // method
	} // class

	public partial class SculkShrieker : Block
	{
		private MiNET.Blocks.States.Active _active = new MiNET.Blocks.States.Active();
		private MiNET.Blocks.States.CanSummon _canSummon = new MiNET.Blocks.States.CanSummon();

		public override string Id => "minecraft:sculk_shrieker";

		[StateBit]
		public bool Active { get => Convert.ToBoolean(_active.Value); set => NotifyStateUpdate(_active, value); }

		[StateBit]
		public bool CanSummon { get => Convert.ToBoolean(_canSummon.Value); set => NotifyStateUpdate(_canSummon, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _active.Name:
						NotifyStateUpdate(_active, s.Value);
						break;
					case BlockStateByte s when s.Name == _canSummon.Name:
						NotifyStateUpdate(_canSummon, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _active;
			yield return _canSummon;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _active, _canSummon);
		} // method

		public override object Clone()
		{
			var block = (SculkShrieker) base.Clone();

			block._active = (MiNET.Blocks.States.Active) _active.Clone();
			block._canSummon = (MiNET.Blocks.States.CanSummon) _canSummon.Clone();

			return block;
		} // method
	} // class

	public partial class SculkVein : Block
	{
		private MiNET.Blocks.States.MultiFaceDirectionBits _multiFaceDirectionBits = new MiNET.Blocks.States.MultiFaceDirectionBits();

		public override string Id => "minecraft:sculk_vein";

		[StateRange(0, 63)]
		public int MultiFaceDirectionBits { get => _multiFaceDirectionBits.Value; set => NotifyStateUpdate(_multiFaceDirectionBits, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _multiFaceDirectionBits.Name:
						NotifyStateUpdate(_multiFaceDirectionBits, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _multiFaceDirectionBits;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _multiFaceDirectionBits);
		} // method

		public override object Clone()
		{
			var block = (SculkVein) base.Clone();

			block._multiFaceDirectionBits = (MiNET.Blocks.States.MultiFaceDirectionBits) _multiFaceDirectionBits.Clone();

			return block;
		} // method
	} // class

	public partial class SeaLantern : Block
	{
		public override string Id => "minecraft:sea_lantern";
	} // class

	public partial class SeaPickle : Block
	{
		private MiNET.Blocks.States.ClusterCount _clusterCount = new MiNET.Blocks.States.ClusterCount();
		private MiNET.Blocks.States.DeadBit _deadBit = new MiNET.Blocks.States.DeadBit();

		public override string Id => "minecraft:sea_pickle";

		[StateRange(0, 3)]
		public int ClusterCount { get => _clusterCount.Value; set => NotifyStateUpdate(_clusterCount, value); }

		[StateBit]
		public bool DeadBit { get => Convert.ToBoolean(_deadBit.Value); set => NotifyStateUpdate(_deadBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _clusterCount.Name:
						NotifyStateUpdate(_clusterCount, s.Value);
						break;
					case BlockStateByte s when s.Name == _deadBit.Name:
						NotifyStateUpdate(_deadBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _clusterCount;
			yield return _deadBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _clusterCount, _deadBit);
		} // method

		public override object Clone()
		{
			var block = (SeaPickle) base.Clone();

			block._clusterCount = (MiNET.Blocks.States.ClusterCount) _clusterCount.Clone();
			block._deadBit = (MiNET.Blocks.States.DeadBit) _deadBit.Clone();

			return block;
		} // method
	} // class

	public partial class Seagrass : Block
	{
		private MiNET.Blocks.States.SeaGrassType _seaGrassType = (States.SeaGrassType) MiNET.Blocks.States.SeaGrassType.Default.Clone();

		public override string Id => "minecraft:seagrass";

		[StateEnum("default", "double_bot", "double_top")]
		public MiNET.Blocks.States.SeaGrassType SeaGrassType { get => _seaGrassType; set => NotifyStateUpdate(_seaGrassType, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _seaGrassType.Name:
						NotifyStateUpdate(_seaGrassType, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _seaGrassType;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _seaGrassType);
		} // method

		public override object Clone()
		{
			var block = (Seagrass) base.Clone();

			block._seaGrassType = (MiNET.Blocks.States.SeaGrassType) _seaGrassType.Clone();

			return block;
		} // method
	} // class

	public partial class ShortGrass : Block
	{
		public override string Id => "minecraft:short_grass";
	} // class

	public partial class Shroomlight : Block
	{
		public override string Id => "minecraft:shroomlight";
	} // class

	public partial class SilverGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:silver_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (SilverGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class SkeletonSkull : HeadBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:skeleton_skull";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (SkeletonSkull) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Slime : Block
	{
		public override string Id => "minecraft:slime";
	} // class

	public partial class SmallAmethystBud : Block
	{
		private MiNET.Blocks.States.BlockFace _blockFace = (States.BlockFace) MiNET.Blocks.States.BlockFace.Down.Clone();

		public override string Id => "minecraft:small_amethyst_bud";

		[StateEnum("down", "east", "north", "south", "up", "west")]
		public MiNET.Blocks.States.BlockFace BlockFace { get => _blockFace; set => NotifyStateUpdate(_blockFace, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _blockFace.Name:
						NotifyStateUpdate(_blockFace, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _blockFace;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _blockFace);
		} // method

		public override object Clone()
		{
			var block = (SmallAmethystBud) base.Clone();

			block._blockFace = (MiNET.Blocks.States.BlockFace) _blockFace.Clone();

			return block;
		} // method
	} // class

	public partial class SmallDripleafBlock : Block
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:small_dripleaf_block";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (SmallDripleafBlock) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class SmithingTable : Block
	{
		public override string Id => "minecraft:smithing_table";
	} // class

	public partial class Smoker : Block
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:smoker";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (Smoker) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class SmoothBasalt : Block
	{
		public override string Id => "minecraft:smooth_basalt";
	} // class

	public partial class SmoothQuartz : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:smooth_quartz";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (SmoothQuartz) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class SmoothQuartzDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:smooth_quartz_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (SmoothQuartzDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class SmoothQuartzSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:smooth_quartz_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (SmoothQuartzSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class SmoothQuartzStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:smooth_quartz_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (SmoothQuartzStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class SmoothRedSandstone : Block
	{
		public override string Id => "minecraft:smooth_red_sandstone";
	} // class

	public partial class SmoothRedSandstoneDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:smooth_red_sandstone_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (SmoothRedSandstoneDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class SmoothRedSandstoneSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:smooth_red_sandstone_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (SmoothRedSandstoneSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class SmoothRedSandstoneStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:smooth_red_sandstone_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (SmoothRedSandstoneStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class SmoothSandstone : Block
	{
		public override string Id => "minecraft:smooth_sandstone";
	} // class

	public partial class SmoothSandstoneDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:smooth_sandstone_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (SmoothSandstoneDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class SmoothSandstoneSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:smooth_sandstone_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (SmoothSandstoneSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class SmoothSandstoneStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:smooth_sandstone_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (SmoothSandstoneStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class SmoothStone : Block
	{
		public override string Id => "minecraft:smooth_stone";
	} // class

	public partial class SmoothStoneDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:smooth_stone_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (SmoothStoneDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class SmoothStoneSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:smooth_stone_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (SmoothStoneSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class SnifferEgg : Block
	{
		private MiNET.Blocks.States.CrackedState _crackedState = (States.CrackedState) MiNET.Blocks.States.CrackedState.NoCracks.Clone();

		public override string Id => "minecraft:sniffer_egg";

		[StateEnum("cracked", "max_cracked", "no_cracks")]
		public MiNET.Blocks.States.CrackedState CrackedState { get => _crackedState; set => NotifyStateUpdate(_crackedState, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _crackedState.Name:
						NotifyStateUpdate(_crackedState, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _crackedState;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _crackedState);
		} // method

		public override object Clone()
		{
			var block = (SnifferEgg) base.Clone();

			block._crackedState = (MiNET.Blocks.States.CrackedState) _crackedState.Clone();

			return block;
		} // method
	} // class

	public partial class Snow : Block
	{
		public override string Id => "minecraft:snow";
	} // class

	public partial class SnowLayer : Block
	{
		private MiNET.Blocks.States.CoveredBit _coveredBit = new MiNET.Blocks.States.CoveredBit();
		private MiNET.Blocks.States.Height _height = new MiNET.Blocks.States.Height();

		public override string Id => "minecraft:snow_layer";

		[StateBit]
		public bool CoveredBit { get => Convert.ToBoolean(_coveredBit.Value); set => NotifyStateUpdate(_coveredBit, value); }

		[StateRange(0, 7)]
		public int Height { get => _height.Value; set => NotifyStateUpdate(_height, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _coveredBit.Name:
						NotifyStateUpdate(_coveredBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _height.Name:
						NotifyStateUpdate(_height, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coveredBit;
			yield return _height;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coveredBit, _height);
		} // method

		public override object Clone()
		{
			var block = (SnowLayer) base.Clone();

			block._coveredBit = (MiNET.Blocks.States.CoveredBit) _coveredBit.Clone();
			block._height = (MiNET.Blocks.States.Height) _height.Clone();

			return block;
		} // method
	} // class

	public partial class SoulCampfire : Block
	{
		private MiNET.Blocks.States.Extinguished _extinguished = new MiNET.Blocks.States.Extinguished();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();

		public override string Id => "minecraft:soul_campfire";

		[StateBit]
		public bool Extinguished { get => Convert.ToBoolean(_extinguished.Value); set => NotifyStateUpdate(_extinguished, value); }

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _extinguished.Name:
						NotifyStateUpdate(_extinguished, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _extinguished;
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _extinguished, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (SoulCampfire) base.Clone();

			block._extinguished = (MiNET.Blocks.States.Extinguished) _extinguished.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class SoulFire : Block
	{
		private MiNET.Blocks.States.Age _age = new MiNET.Blocks.States.Age();

		public override string Id => "minecraft:soul_fire";

		[StateRange(0, 15)]
		public int Age { get => _age.Value; set => NotifyStateUpdate(_age, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _age.Name:
						NotifyStateUpdate(_age, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _age;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _age);
		} // method

		public override object Clone()
		{
			var block = (SoulFire) base.Clone();

			block._age = (MiNET.Blocks.States.Age) _age.Clone();

			return block;
		} // method
	} // class

	public partial class SoulLantern : Block
	{
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:soul_lantern";

		[StateBit]
		public bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _hanging);
		} // method

		public override object Clone()
		{
			var block = (SoulLantern) base.Clone();

			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class SoulSand : Block
	{
		public override string Id => "minecraft:soul_sand";
	} // class

	public partial class SoulSoil : Block
	{
		public override string Id => "minecraft:soul_soil";
	} // class

	public partial class SoulTorch : Block
	{
		private MiNET.Blocks.States.TorchFacingDirection _torchFacingDirection = (States.TorchFacingDirection) MiNET.Blocks.States.TorchFacingDirection.Unknown.Clone();

		public override string Id => "minecraft:soul_torch";

		[StateEnum("east", "north", "south", "top", "unknown", "west")]
		public MiNET.Blocks.States.TorchFacingDirection TorchFacingDirection { get => _torchFacingDirection; set => NotifyStateUpdate(_torchFacingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _torchFacingDirection.Name:
						NotifyStateUpdate(_torchFacingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _torchFacingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _torchFacingDirection);
		} // method

		public override object Clone()
		{
			var block = (SoulTorch) base.Clone();

			block._torchFacingDirection = (MiNET.Blocks.States.TorchFacingDirection) _torchFacingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Sponge : Block
	{
		public override string Id => "minecraft:sponge";
	} // class

	public partial class SporeBlossom : Block
	{
		public override string Id => "minecraft:spore_blossom";
	} // class

	public partial class SpruceButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:spruce_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (SpruceButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class SpruceDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:spruce_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (SpruceDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class SpruceDoubleSlab : DoubleWoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:spruce_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (SpruceDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class SpruceFence : FenceBase
	{
		public override string Id => "minecraft:spruce_fence";
	} // class

	public partial class SpruceFenceGate : FenceGateBase
	{
		private MiNET.Blocks.States.InWallBit _inWallBit = new MiNET.Blocks.States.InWallBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:spruce_fence_gate";

		[StateBit]
		public override bool InWallBit { get => Convert.ToBoolean(_inWallBit.Value); set => NotifyStateUpdate(_inWallBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _inWallBit.Name:
						NotifyStateUpdate(_inWallBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _inWallBit;
			yield return _cardinalDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _inWallBit, _cardinalDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (SpruceFenceGate) base.Clone();

			block._inWallBit = (MiNET.Blocks.States.InWallBit) _inWallBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class SpruceHangingSign : HangingSignBase
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:spruce_hanging_sign";

		[StateBit]
		public override bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		[StateBit]
		public override bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _facingDirection;
			yield return _groundSignDirection;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _facingDirection, _groundSignDirection, _hanging);
		} // method

		public override object Clone()
		{
			var block = (SpruceHangingSign) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class SpruceLeaves : LeavesBase
	{
		private MiNET.Blocks.States.PersistentBit _persistentBit = new MiNET.Blocks.States.PersistentBit();
		private MiNET.Blocks.States.UpdateBit _updateBit = new MiNET.Blocks.States.UpdateBit();

		public override string Id => "minecraft:spruce_leaves";

		[StateBit]
		public override bool PersistentBit { get => Convert.ToBoolean(_persistentBit.Value); set => NotifyStateUpdate(_persistentBit, value); }

		[StateBit]
		public override bool UpdateBit { get => Convert.ToBoolean(_updateBit.Value); set => NotifyStateUpdate(_updateBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _persistentBit.Name:
						NotifyStateUpdate(_persistentBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _updateBit.Name:
						NotifyStateUpdate(_updateBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _persistentBit;
			yield return _updateBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _persistentBit, _updateBit);
		} // method

		public override object Clone()
		{
			var block = (SpruceLeaves) base.Clone();

			block._persistentBit = (MiNET.Blocks.States.PersistentBit) _persistentBit.Clone();
			block._updateBit = (MiNET.Blocks.States.UpdateBit) _updateBit.Clone();

			return block;
		} // method
	} // class

	public partial class SpruceLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:spruce_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (SpruceLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class SprucePlanks : PlanksBase
	{
		public override string Id => "minecraft:spruce_planks";
	} // class

	public partial class SprucePressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:spruce_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (SprucePressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class SpruceSapling : SaplingBase
	{
		private MiNET.Blocks.States.AgeBit _ageBit = new MiNET.Blocks.States.AgeBit();

		public override string Id => "minecraft:spruce_sapling";

		[StateBit]
		public override bool AgeBit { get => Convert.ToBoolean(_ageBit.Value); set => NotifyStateUpdate(_ageBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _ageBit.Name:
						NotifyStateUpdate(_ageBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _ageBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _ageBit);
		} // method

		public override object Clone()
		{
			var block = (SpruceSapling) base.Clone();

			block._ageBit = (MiNET.Blocks.States.AgeBit) _ageBit.Clone();

			return block;
		} // method
	} // class

	public partial class SpruceSlab : WoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:spruce_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (SpruceSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class SpruceStairs : WoodenStairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:spruce_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (SpruceStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class SpruceStandingSign : StandingSignBase
	{
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();

		public override string Id => "minecraft:spruce_standing_sign";

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _groundSignDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _groundSignDirection);
		} // method

		public override object Clone()
		{
			var block = (SpruceStandingSign) base.Clone();

			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();

			return block;
		} // method
	} // class

	public partial class SpruceTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:spruce_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (SpruceTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class SpruceWallSign : WallSignBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:spruce_wall_sign";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (SpruceWallSign) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class SpruceWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.X.Clone();

		public override string Id => "minecraft:spruce_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (SpruceWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StandingBanner : Block
	{
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();

		public override string Id => "minecraft:standing_banner";

		[StateRange(0, 15)]
		public int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _groundSignDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _groundSignDirection);
		} // method

		public override object Clone()
		{
			var block = (StandingBanner) base.Clone();

			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();

			return block;
		} // method
	} // class

	public partial class StandingSign : StandingSignBase
	{
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();

		public override string Id => "minecraft:standing_sign";

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _groundSignDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _groundSignDirection);
		} // method

		public override object Clone()
		{
			var block = (StandingSign) base.Clone();

			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();

			return block;
		} // method
	} // class

	public partial class StickyPiston : Block
	{
		private MiNET.Blocks.States.OldFacingDirection3 _facingDirection = new MiNET.Blocks.States.OldFacingDirection3();

		public override string Id => "minecraft:sticky_piston";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection3 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (StickyPiston) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection3) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class StickyPistonArmCollision : Block
	{
		private MiNET.Blocks.States.OldFacingDirection3 _facingDirection = new MiNET.Blocks.States.OldFacingDirection3();

		public override string Id => "minecraft:sticky_piston_arm_collision";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection3 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (StickyPistonArmCollision) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection3) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Stone : Block
	{
		public override string Id => "minecraft:stone";
	} // class

	public partial class StoneBrickDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:stone_brick_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (StoneBrickDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class StoneBrickSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:stone_brick_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (StoneBrickSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class StoneBrickStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:stone_brick_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (StoneBrickStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class StoneBrickWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit() { Value = 1 };

		public override string Id => "minecraft:stone_brick_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (StoneBrickWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class StoneBricks : Block
	{
		public override string Id => "minecraft:stone_bricks";
	} // class

	public partial class StoneButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:stone_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (StoneButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class StonePressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:stone_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (StonePressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class StoneStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:stone_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (StoneStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Stonecutter : Block
	{
		public override string Id => "minecraft:stonecutter";
	} // class

	public partial class StonecutterBlock : Block
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.North.Clone();

		public override string Id => "minecraft:stonecutter_block";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (StonecutterBlock) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedAcaciaLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_acacia_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedAcaciaLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedAcaciaWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.X.Clone();

		public override string Id => "minecraft:stripped_acacia_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedAcaciaWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedBambooBlock : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_bamboo_block";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedBambooBlock) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedBirchLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_birch_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedBirchLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedBirchWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.X.Clone();

		public override string Id => "minecraft:stripped_birch_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedBirchWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedCherryLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_cherry_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedCherryLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedCherryWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_cherry_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedCherryWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedCrimsonHyphae : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_crimson_hyphae";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedCrimsonHyphae) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedCrimsonStem : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_crimson_stem";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedCrimsonStem) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedDarkOakLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_dark_oak_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedDarkOakLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedDarkOakWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.X.Clone();

		public override string Id => "minecraft:stripped_dark_oak_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedDarkOakWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedJungleLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_jungle_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedJungleLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedJungleWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.X.Clone();

		public override string Id => "minecraft:stripped_jungle_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedJungleWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedMangroveLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_mangrove_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedMangroveLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedMangroveWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_mangrove_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedMangroveWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedOakLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_oak_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedOakLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedOakWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.X.Clone();

		public override string Id => "minecraft:stripped_oak_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedOakWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedPaleOakLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_pale_oak_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedPaleOakLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedPaleOakWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_pale_oak_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedPaleOakWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedSpruceLog : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_spruce_log";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedSpruceLog) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedSpruceWood : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.X.Clone();

		public override string Id => "minecraft:stripped_spruce_wood";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedSpruceWood) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedWarpedHyphae : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_warped_hyphae";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedWarpedHyphae) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StrippedWarpedStem : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:stripped_warped_stem";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (StrippedWarpedStem) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class StructureBlock : Block
	{
		private MiNET.Blocks.States.StructureBlockType _structureBlockType = (States.StructureBlockType) MiNET.Blocks.States.StructureBlockType.Data.Clone();

		public override string Id => "minecraft:structure_block";

		[StateEnum("corner", "data", "export", "invalid", "load", "save")]
		public MiNET.Blocks.States.StructureBlockType StructureBlockType { get => _structureBlockType; set => NotifyStateUpdate(_structureBlockType, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _structureBlockType.Name:
						NotifyStateUpdate(_structureBlockType, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _structureBlockType;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _structureBlockType);
		} // method

		public override object Clone()
		{
			var block = (StructureBlock) base.Clone();

			block._structureBlockType = (MiNET.Blocks.States.StructureBlockType) _structureBlockType.Clone();

			return block;
		} // method
	} // class

	public partial class StructureVoid : Block
	{
		public override string Id => "minecraft:structure_void";
	} // class

	public partial class Sunflower : DoublePlantBase
	{
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:sunflower";

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (Sunflower) base.Clone();

			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class SuspiciousGravel : Block
	{
		private MiNET.Blocks.States.BrushedProgress _brushedProgress = new MiNET.Blocks.States.BrushedProgress();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:suspicious_gravel";

		[StateRange(0, 3)]
		public int BrushedProgress { get => _brushedProgress.Value; set => NotifyStateUpdate(_brushedProgress, value); }

		[StateBit]
		public bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _brushedProgress.Name:
						NotifyStateUpdate(_brushedProgress, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _brushedProgress;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _brushedProgress, _hanging);
		} // method

		public override object Clone()
		{
			var block = (SuspiciousGravel) base.Clone();

			block._brushedProgress = (MiNET.Blocks.States.BrushedProgress) _brushedProgress.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class SuspiciousSand : Block
	{
		private MiNET.Blocks.States.BrushedProgress _brushedProgress = new MiNET.Blocks.States.BrushedProgress();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:suspicious_sand";

		[StateRange(0, 3)]
		public int BrushedProgress { get => _brushedProgress.Value; set => NotifyStateUpdate(_brushedProgress, value); }

		[StateBit]
		public bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _brushedProgress.Name:
						NotifyStateUpdate(_brushedProgress, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _brushedProgress;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _brushedProgress, _hanging);
		} // method

		public override object Clone()
		{
			var block = (SuspiciousSand) base.Clone();

			block._brushedProgress = (MiNET.Blocks.States.BrushedProgress) _brushedProgress.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class SweetBerryBush : Block
	{
		private MiNET.Blocks.States.Growth _growth = new MiNET.Blocks.States.Growth();

		public override string Id => "minecraft:sweet_berry_bush";

		[StateRange(0, 7)]
		public int Growth { get => _growth.Value; set => NotifyStateUpdate(_growth, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _growth.Name:
						NotifyStateUpdate(_growth, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _growth;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _growth);
		} // method

		public override object Clone()
		{
			var block = (SweetBerryBush) base.Clone();

			block._growth = (MiNET.Blocks.States.Growth) _growth.Clone();

			return block;
		} // method
	} // class

	public partial class TallGrass : DoublePlantBase
	{
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:tall_grass";

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (TallGrass) base.Clone();

			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class Target : Block
	{
		public override string Id => "minecraft:target";
	} // class

	public partial class TintedGlass : Block
	{
		public override string Id => "minecraft:tinted_glass";
	} // class

	public partial class Tnt : Block
	{
		private MiNET.Blocks.States.ExplodeBit _explodeBit = new MiNET.Blocks.States.ExplodeBit();

		public override string Id => "minecraft:tnt";

		[StateBit]
		public bool ExplodeBit { get => Convert.ToBoolean(_explodeBit.Value); set => NotifyStateUpdate(_explodeBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _explodeBit.Name:
						NotifyStateUpdate(_explodeBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _explodeBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _explodeBit);
		} // method

		public override object Clone()
		{
			var block = (Tnt) base.Clone();

			block._explodeBit = (MiNET.Blocks.States.ExplodeBit) _explodeBit.Clone();

			return block;
		} // method
	} // class

	public partial class Torch : Block
	{
		private MiNET.Blocks.States.TorchFacingDirection _torchFacingDirection = (States.TorchFacingDirection) MiNET.Blocks.States.TorchFacingDirection.Unknown.Clone();

		public override string Id => "minecraft:torch";

		[StateEnum("east", "north", "south", "top", "unknown", "west")]
		public MiNET.Blocks.States.TorchFacingDirection TorchFacingDirection { get => _torchFacingDirection; set => NotifyStateUpdate(_torchFacingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _torchFacingDirection.Name:
						NotifyStateUpdate(_torchFacingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _torchFacingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _torchFacingDirection);
		} // method

		public override object Clone()
		{
			var block = (Torch) base.Clone();

			block._torchFacingDirection = (MiNET.Blocks.States.TorchFacingDirection) _torchFacingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Torchflower : Block
	{
		public override string Id => "minecraft:torchflower";
	} // class

	public partial class TorchflowerCrop : Block
	{
		private MiNET.Blocks.States.Growth _growth = new MiNET.Blocks.States.Growth();

		public override string Id => "minecraft:torchflower_crop";

		[StateRange(0, 7)]
		public int Growth { get => _growth.Value; set => NotifyStateUpdate(_growth, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _growth.Name:
						NotifyStateUpdate(_growth, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _growth;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _growth);
		} // method

		public override object Clone()
		{
			var block = (TorchflowerCrop) base.Clone();

			block._growth = (MiNET.Blocks.States.Growth) _growth.Clone();

			return block;
		} // method
	} // class

	public partial class Trapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (Trapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class TrappedChest
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.North.Clone();

		public override string Id => "minecraft:trapped_chest";

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection);
		} // method

		public override object Clone()
		{
			var block = (TrappedChest) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();

			return block;
		} // method
	} // class

	public partial class TrialSpawner : Block
	{
		private MiNET.Blocks.States.Ominous _ominous = new MiNET.Blocks.States.Ominous();
		private MiNET.Blocks.States.TrialSpawnerState _trialSpawnerState = new MiNET.Blocks.States.TrialSpawnerState();

		public override string Id => "minecraft:trial_spawner";

		[StateBit]
		public bool Ominous { get => Convert.ToBoolean(_ominous.Value); set => NotifyStateUpdate(_ominous, value); }

		[StateRange(0, 5)]
		public int TrialSpawnerState { get => _trialSpawnerState.Value; set => NotifyStateUpdate(_trialSpawnerState, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _ominous.Name:
						NotifyStateUpdate(_ominous, s.Value);
						break;
					case BlockStateInt s when s.Name == _trialSpawnerState.Name:
						NotifyStateUpdate(_trialSpawnerState, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _ominous;
			yield return _trialSpawnerState;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _ominous, _trialSpawnerState);
		} // method

		public override object Clone()
		{
			var block = (TrialSpawner) base.Clone();

			block._ominous = (MiNET.Blocks.States.Ominous) _ominous.Clone();
			block._trialSpawnerState = (MiNET.Blocks.States.TrialSpawnerState) _trialSpawnerState.Clone();

			return block;
		} // method
	} // class

	public partial class TripWire : Block
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.DisarmedBit _disarmedBit = new MiNET.Blocks.States.DisarmedBit();
		private MiNET.Blocks.States.PoweredBit _poweredBit = new MiNET.Blocks.States.PoweredBit();
		private MiNET.Blocks.States.SuspendedBit _suspendedBit = new MiNET.Blocks.States.SuspendedBit();

		public override string Id => "minecraft:trip_wire";

		[StateBit]
		public bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateBit]
		public bool DisarmedBit { get => Convert.ToBoolean(_disarmedBit.Value); set => NotifyStateUpdate(_disarmedBit, value); }

		[StateBit]
		public bool PoweredBit { get => Convert.ToBoolean(_poweredBit.Value); set => NotifyStateUpdate(_poweredBit, value); }

		[StateBit]
		public bool SuspendedBit { get => Convert.ToBoolean(_suspendedBit.Value); set => NotifyStateUpdate(_suspendedBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _disarmedBit.Name:
						NotifyStateUpdate(_disarmedBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _poweredBit.Name:
						NotifyStateUpdate(_poweredBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _suspendedBit.Name:
						NotifyStateUpdate(_suspendedBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _disarmedBit;
			yield return _poweredBit;
			yield return _suspendedBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _disarmedBit, _poweredBit, _suspendedBit);
		} // method

		public override object Clone()
		{
			var block = (TripWire) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._disarmedBit = (MiNET.Blocks.States.DisarmedBit) _disarmedBit.Clone();
			block._poweredBit = (MiNET.Blocks.States.PoweredBit) _poweredBit.Clone();
			block._suspendedBit = (MiNET.Blocks.States.SuspendedBit) _suspendedBit.Clone();

			return block;
		} // method
	} // class

	public partial class TripwireHook : Block
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.OldDirection1 _direction = new MiNET.Blocks.States.OldDirection1();
		private MiNET.Blocks.States.PoweredBit _poweredBit = new MiNET.Blocks.States.PoweredBit();

		public override string Id => "minecraft:tripwire_hook";

		[StateBit]
		public bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateRange(0, 3)]
		public MiNET.Blocks.States.OldDirection1 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public bool PoweredBit { get => Convert.ToBoolean(_poweredBit.Value); set => NotifyStateUpdate(_poweredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _poweredBit.Name:
						NotifyStateUpdate(_poweredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _direction;
			yield return _poweredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _direction, _poweredBit);
		} // method

		public override object Clone()
		{
			var block = (TripwireHook) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._direction = (MiNET.Blocks.States.OldDirection1) _direction.Clone();
			block._poweredBit = (MiNET.Blocks.States.PoweredBit) _poweredBit.Clone();

			return block;
		} // method
	} // class

	public partial class TubeCoral : Block
	{
		public override string Id => "minecraft:tube_coral";
	} // class

	public partial class TubeCoralBlock : Block
	{
		public override string Id => "minecraft:tube_coral_block";
	} // class

	public partial class TubeCoralFan : CoralFanBase
	{
		private MiNET.Blocks.States.CoralFanDirection _coralFanDirection = new MiNET.Blocks.States.CoralFanDirection();

		public override string Id => "minecraft:tube_coral_fan";

		[StateRange(0, 1)]
		public override MiNET.Blocks.States.CoralFanDirection CoralFanDirection { get => _coralFanDirection; set => NotifyStateUpdate(_coralFanDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralFanDirection.Name:
						NotifyStateUpdate(_coralFanDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralFanDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralFanDirection);
		} // method

		public override object Clone()
		{
			var block = (TubeCoralFan) base.Clone();

			block._coralFanDirection = (MiNET.Blocks.States.CoralFanDirection) _coralFanDirection.Clone();

			return block;
		} // method
	} // class

	public partial class TubeCoralWallFan : CoralWallFanBase
	{
		private MiNET.Blocks.States.CoralDirection _coralDirection = new MiNET.Blocks.States.CoralDirection();

		public override string Id => "minecraft:tube_coral_wall_fan";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.CoralDirection CoralDirection { get => _coralDirection; set => NotifyStateUpdate(_coralDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _coralDirection.Name:
						NotifyStateUpdate(_coralDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _coralDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _coralDirection);
		} // method

		public override object Clone()
		{
			var block = (TubeCoralWallFan) base.Clone();

			block._coralDirection = (MiNET.Blocks.States.CoralDirection) _coralDirection.Clone();

			return block;
		} // method
	} // class

	public partial class Tuff : Block
	{
		public override string Id => "minecraft:tuff";
	} // class

	public partial class TuffBrickDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:tuff_brick_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (TuffBrickDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class TuffBrickSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:tuff_brick_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (TuffBrickSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class TuffBrickStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:tuff_brick_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (TuffBrickStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class TuffBrickWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:tuff_brick_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (TuffBrickWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class TuffBricks : Block
	{
		public override string Id => "minecraft:tuff_bricks";
	} // class

	public partial class TuffDoubleSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:tuff_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (TuffDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class TuffSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:tuff_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (TuffSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class TuffStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:tuff_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (TuffStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class TuffWall : Block
	{
		private MiNET.Blocks.States.WallConnectionTypeEast _wallConnectionTypeEast = (States.WallConnectionTypeEast) MiNET.Blocks.States.WallConnectionTypeEast.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeNorth _wallConnectionTypeNorth = (States.WallConnectionTypeNorth) MiNET.Blocks.States.WallConnectionTypeNorth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeSouth _wallConnectionTypeSouth = (States.WallConnectionTypeSouth) MiNET.Blocks.States.WallConnectionTypeSouth.None.Clone();
		private MiNET.Blocks.States.WallConnectionTypeWest _wallConnectionTypeWest = (States.WallConnectionTypeWest) MiNET.Blocks.States.WallConnectionTypeWest.None.Clone();
		private MiNET.Blocks.States.WallPostBit _wallPostBit = new MiNET.Blocks.States.WallPostBit();

		public override string Id => "minecraft:tuff_wall";

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeEast WallConnectionTypeEast { get => _wallConnectionTypeEast; set => NotifyStateUpdate(_wallConnectionTypeEast, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeNorth WallConnectionTypeNorth { get => _wallConnectionTypeNorth; set => NotifyStateUpdate(_wallConnectionTypeNorth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeSouth WallConnectionTypeSouth { get => _wallConnectionTypeSouth; set => NotifyStateUpdate(_wallConnectionTypeSouth, value.Value); }

		[StateEnum("none", "short", "tall")]
		public MiNET.Blocks.States.WallConnectionTypeWest WallConnectionTypeWest { get => _wallConnectionTypeWest; set => NotifyStateUpdate(_wallConnectionTypeWest, value.Value); }

		[StateBit]
		public bool WallPostBit { get => Convert.ToBoolean(_wallPostBit.Value); set => NotifyStateUpdate(_wallPostBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _wallConnectionTypeEast.Name:
						NotifyStateUpdate(_wallConnectionTypeEast, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeNorth.Name:
						NotifyStateUpdate(_wallConnectionTypeNorth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeSouth.Name:
						NotifyStateUpdate(_wallConnectionTypeSouth, s.Value);
						break;
					case BlockStateString s when s.Name == _wallConnectionTypeWest.Name:
						NotifyStateUpdate(_wallConnectionTypeWest, s.Value);
						break;
					case BlockStateByte s when s.Name == _wallPostBit.Name:
						NotifyStateUpdate(_wallPostBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _wallConnectionTypeEast;
			yield return _wallConnectionTypeNorth;
			yield return _wallConnectionTypeSouth;
			yield return _wallConnectionTypeWest;
			yield return _wallPostBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _wallConnectionTypeEast, _wallConnectionTypeNorth, _wallConnectionTypeSouth, _wallConnectionTypeWest, _wallPostBit);
		} // method

		public override object Clone()
		{
			var block = (TuffWall) base.Clone();

			block._wallConnectionTypeEast = (MiNET.Blocks.States.WallConnectionTypeEast) _wallConnectionTypeEast.Clone();
			block._wallConnectionTypeNorth = (MiNET.Blocks.States.WallConnectionTypeNorth) _wallConnectionTypeNorth.Clone();
			block._wallConnectionTypeSouth = (MiNET.Blocks.States.WallConnectionTypeSouth) _wallConnectionTypeSouth.Clone();
			block._wallConnectionTypeWest = (MiNET.Blocks.States.WallConnectionTypeWest) _wallConnectionTypeWest.Clone();
			block._wallPostBit = (MiNET.Blocks.States.WallPostBit) _wallPostBit.Clone();

			return block;
		} // method
	} // class

	public partial class TurtleEgg : Block
	{
		private MiNET.Blocks.States.CrackedState _crackedState = (States.CrackedState) MiNET.Blocks.States.CrackedState.NoCracks.Clone();
		private MiNET.Blocks.States.TurtleEggCount _turtleEggCount = (States.TurtleEggCount) MiNET.Blocks.States.TurtleEggCount.OneEgg.Clone();

		public override string Id => "minecraft:turtle_egg";

		[StateEnum("cracked", "max_cracked", "no_cracks")]
		public MiNET.Blocks.States.CrackedState CrackedState { get => _crackedState; set => NotifyStateUpdate(_crackedState, value.Value); }

		[StateEnum("four_egg", "one_egg", "three_egg", "two_egg")]
		public MiNET.Blocks.States.TurtleEggCount TurtleEggCount { get => _turtleEggCount; set => NotifyStateUpdate(_turtleEggCount, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _crackedState.Name:
						NotifyStateUpdate(_crackedState, s.Value);
						break;
					case BlockStateString s when s.Name == _turtleEggCount.Name:
						NotifyStateUpdate(_turtleEggCount, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _crackedState;
			yield return _turtleEggCount;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _crackedState, _turtleEggCount);
		} // method

		public override object Clone()
		{
			var block = (TurtleEgg) base.Clone();

			block._crackedState = (MiNET.Blocks.States.CrackedState) _crackedState.Clone();
			block._turtleEggCount = (MiNET.Blocks.States.TurtleEggCount) _turtleEggCount.Clone();

			return block;
		} // method
	} // class

	public partial class TwistingVines : Block
	{
		private MiNET.Blocks.States.TwistingVinesAge _twistingVinesAge = new MiNET.Blocks.States.TwistingVinesAge();

		public override string Id => "minecraft:twisting_vines";

		[StateRange(0, 25)]
		public int TwistingVinesAge { get => _twistingVinesAge.Value; set => NotifyStateUpdate(_twistingVinesAge, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _twistingVinesAge.Name:
						NotifyStateUpdate(_twistingVinesAge, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _twistingVinesAge;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _twistingVinesAge);
		} // method

		public override object Clone()
		{
			var block = (TwistingVines) base.Clone();

			block._twistingVinesAge = (MiNET.Blocks.States.TwistingVinesAge) _twistingVinesAge.Clone();

			return block;
		} // method
	} // class

	public partial class UnderwaterTnt : Block
	{
		private MiNET.Blocks.States.ExplodeBit _explodeBit = new MiNET.Blocks.States.ExplodeBit();

		public override string Id => "minecraft:underwater_tnt";

		[StateBit]
		public bool ExplodeBit { get => Convert.ToBoolean(_explodeBit.Value); set => NotifyStateUpdate(_explodeBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _explodeBit.Name:
						NotifyStateUpdate(_explodeBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _explodeBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _explodeBit);
		} // method

		public override object Clone()
		{
			var block = (UnderwaterTnt) base.Clone();

			block._explodeBit = (MiNET.Blocks.States.ExplodeBit) _explodeBit.Clone();

			return block;
		} // method
	} // class

	public partial class UnderwaterTorch : Block
	{
		private MiNET.Blocks.States.TorchFacingDirection _torchFacingDirection = (States.TorchFacingDirection) MiNET.Blocks.States.TorchFacingDirection.Unknown.Clone();

		public override string Id => "minecraft:underwater_torch";

		[StateEnum("east", "north", "south", "top", "unknown", "west")]
		public MiNET.Blocks.States.TorchFacingDirection TorchFacingDirection { get => _torchFacingDirection; set => NotifyStateUpdate(_torchFacingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _torchFacingDirection.Name:
						NotifyStateUpdate(_torchFacingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _torchFacingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _torchFacingDirection);
		} // method

		public override object Clone()
		{
			var block = (UnderwaterTorch) base.Clone();

			block._torchFacingDirection = (MiNET.Blocks.States.TorchFacingDirection) _torchFacingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class UndyedShulkerBox : Block
	{
		public override string Id => "minecraft:undyed_shulker_box";
	} // class

	public partial class Unknown : Block
	{
		public override string Id => "minecraft:unknown";
	} // class

	public partial class UnlitRedstoneTorch
	{
		private MiNET.Blocks.States.TorchFacingDirection _torchFacingDirection = (States.TorchFacingDirection) MiNET.Blocks.States.TorchFacingDirection.Unknown.Clone();

		public override string Id => "minecraft:unlit_redstone_torch";

		[StateEnum("east", "north", "south", "top", "unknown", "west")]
		public override MiNET.Blocks.States.TorchFacingDirection TorchFacingDirection { get => _torchFacingDirection; set => NotifyStateUpdate(_torchFacingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _torchFacingDirection.Name:
						NotifyStateUpdate(_torchFacingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _torchFacingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _torchFacingDirection);
		} // method

		public override object Clone()
		{
			var block = (UnlitRedstoneTorch) base.Clone();

			block._torchFacingDirection = (MiNET.Blocks.States.TorchFacingDirection) _torchFacingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class UnpoweredComparator
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OutputLitBit _outputLitBit = new MiNET.Blocks.States.OutputLitBit();
		private MiNET.Blocks.States.OutputSubtractBit _outputSubtractBit = new MiNET.Blocks.States.OutputSubtractBit();

		public override string Id => "minecraft:unpowered_comparator";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public bool OutputLitBit { get => Convert.ToBoolean(_outputLitBit.Value); set => NotifyStateUpdate(_outputLitBit, value); }

		[StateBit]
		public bool OutputSubtractBit { get => Convert.ToBoolean(_outputSubtractBit.Value); set => NotifyStateUpdate(_outputSubtractBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _outputLitBit.Name:
						NotifyStateUpdate(_outputLitBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _outputSubtractBit.Name:
						NotifyStateUpdate(_outputSubtractBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
			yield return _outputLitBit;
			yield return _outputSubtractBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection, _outputLitBit, _outputSubtractBit);
		} // method

		public override object Clone()
		{
			var block = (UnpoweredComparator) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._outputLitBit = (MiNET.Blocks.States.OutputLitBit) _outputLitBit.Clone();
			block._outputSubtractBit = (MiNET.Blocks.States.OutputSubtractBit) _outputSubtractBit.Clone();

			return block;
		} // method
	} // class

	public partial class UnpoweredRepeater
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.RepeaterDelay _repeaterDelay = new MiNET.Blocks.States.RepeaterDelay();

		public override string Id => "minecraft:unpowered_repeater";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateRange(0, 3)]
		public int RepeaterDelay { get => _repeaterDelay.Value; set => NotifyStateUpdate(_repeaterDelay, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _repeaterDelay.Name:
						NotifyStateUpdate(_repeaterDelay, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
			yield return _repeaterDelay;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection, _repeaterDelay);
		} // method

		public override object Clone()
		{
			var block = (UnpoweredRepeater) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._repeaterDelay = (MiNET.Blocks.States.RepeaterDelay) _repeaterDelay.Clone();

			return block;
		} // method
	} // class

	public partial class Vault : Block
	{
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.Ominous _ominous = new MiNET.Blocks.States.Ominous();
		private MiNET.Blocks.States.VaultState _vaultState = (States.VaultState) MiNET.Blocks.States.VaultState.Inactive.Clone();

		public override string Id => "minecraft:vault";

		[StateEnum("east", "north", "south", "west")]
		public MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public bool Ominous { get => Convert.ToBoolean(_ominous.Value); set => NotifyStateUpdate(_ominous, value); }

		[StateEnum("active", "ejecting", "inactive", "unlocking")]
		public MiNET.Blocks.States.VaultState VaultState { get => _vaultState; set => NotifyStateUpdate(_vaultState, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _ominous.Name:
						NotifyStateUpdate(_ominous, s.Value);
						break;
					case BlockStateString s when s.Name == _vaultState.Name:
						NotifyStateUpdate(_vaultState, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _cardinalDirection;
			yield return _ominous;
			yield return _vaultState;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _cardinalDirection, _ominous, _vaultState);
		} // method

		public override object Clone()
		{
			var block = (Vault) base.Clone();

			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._ominous = (MiNET.Blocks.States.Ominous) _ominous.Clone();
			block._vaultState = (MiNET.Blocks.States.VaultState) _vaultState.Clone();

			return block;
		} // method
	} // class

	public partial class VerdantFroglight : Block
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:verdant_froglight";

		[StateEnum("x", "y", "z")]
		public MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (VerdantFroglight) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class Vine : Block
	{
		private MiNET.Blocks.States.VineDirectionBits _vineDirectionBits = new MiNET.Blocks.States.VineDirectionBits();

		public override string Id => "minecraft:vine";

		[StateRange(0, 15)]
		public MiNET.Blocks.States.VineDirectionBits VineDirectionBits { get => _vineDirectionBits; set => NotifyStateUpdate(_vineDirectionBits, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _vineDirectionBits.Name:
						NotifyStateUpdate(_vineDirectionBits, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _vineDirectionBits;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _vineDirectionBits);
		} // method

		public override object Clone()
		{
			var block = (Vine) base.Clone();

			block._vineDirectionBits = (MiNET.Blocks.States.VineDirectionBits) _vineDirectionBits.Clone();

			return block;
		} // method
	} // class

	public partial class WallBanner : Block
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:wall_banner";

		[StateRange(0, 5)]
		public MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (WallBanner) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WallSign : WallSignBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:wall_sign";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (WallSign) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:warped_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (WarpedButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:warped_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (WarpedDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedDoubleSlab : DoubleWoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:warped_double_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (WarpedDoubleSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedFence : FenceBase
	{
		public override string Id => "minecraft:warped_fence";
	} // class

	public partial class WarpedFenceGate : FenceGateBase
	{
		private MiNET.Blocks.States.InWallBit _inWallBit = new MiNET.Blocks.States.InWallBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();

		public override string Id => "minecraft:warped_fence_gate";

		[StateBit]
		public override bool InWallBit { get => Convert.ToBoolean(_inWallBit.Value); set => NotifyStateUpdate(_inWallBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _inWallBit.Name:
						NotifyStateUpdate(_inWallBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _inWallBit;
			yield return _cardinalDirection;
			yield return _openBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _inWallBit, _cardinalDirection, _openBit);
		} // method

		public override object Clone()
		{
			var block = (WarpedFenceGate) base.Clone();

			block._inWallBit = (MiNET.Blocks.States.InWallBit) _inWallBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedFungus : Block
	{
		public override string Id => "minecraft:warped_fungus";
	} // class

	public partial class WarpedHangingSign : HangingSignBase
	{
		private MiNET.Blocks.States.AttachedBit _attachedBit = new MiNET.Blocks.States.AttachedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();
		private MiNET.Blocks.States.Hanging _hanging = new MiNET.Blocks.States.Hanging();

		public override string Id => "minecraft:warped_hanging_sign";

		[StateBit]
		public override bool AttachedBit { get => Convert.ToBoolean(_attachedBit.Value); set => NotifyStateUpdate(_attachedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		[StateBit]
		public override bool Hanging { get => Convert.ToBoolean(_hanging.Value); set => NotifyStateUpdate(_hanging, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _attachedBit.Name:
						NotifyStateUpdate(_attachedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _hanging.Name:
						NotifyStateUpdate(_hanging, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _attachedBit;
			yield return _facingDirection;
			yield return _groundSignDirection;
			yield return _hanging;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _attachedBit, _facingDirection, _groundSignDirection, _hanging);
		} // method

		public override object Clone()
		{
			var block = (WarpedHangingSign) base.Clone();

			block._attachedBit = (MiNET.Blocks.States.AttachedBit) _attachedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();
			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();
			block._hanging = (MiNET.Blocks.States.Hanging) _hanging.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedHyphae : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:warped_hyphae";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (WarpedHyphae) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedNylium : Block
	{
		public override string Id => "minecraft:warped_nylium";
	} // class

	public partial class WarpedPlanks : PlanksBase
	{
		public override string Id => "minecraft:warped_planks";
	} // class

	public partial class WarpedPressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:warped_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (WarpedPressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedRoots : Block
	{
		public override string Id => "minecraft:warped_roots";
	} // class

	public partial class WarpedSlab : WoodenSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:warped_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (WarpedSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedStairs : WoodenStairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:warped_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (WarpedStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedStandingSign : StandingSignBase
	{
		private MiNET.Blocks.States.GroundSignDirection _groundSignDirection = new MiNET.Blocks.States.GroundSignDirection();

		public override string Id => "minecraft:warped_standing_sign";

		[StateRange(0, 15)]
		public override int GroundSignDirection { get => _groundSignDirection.Value; set => NotifyStateUpdate(_groundSignDirection, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _groundSignDirection.Name:
						NotifyStateUpdate(_groundSignDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _groundSignDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _groundSignDirection);
		} // method

		public override object Clone()
		{
			var block = (WarpedStandingSign) base.Clone();

			block._groundSignDirection = (MiNET.Blocks.States.GroundSignDirection) _groundSignDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedStem : LogBase
	{
		private MiNET.Blocks.States.PillarAxis _pillarAxis = (States.PillarAxis) MiNET.Blocks.States.PillarAxis.Y.Clone();

		public override string Id => "minecraft:warped_stem";

		[StateEnum("x", "y", "z")]
		public override MiNET.Blocks.States.PillarAxis PillarAxis { get => _pillarAxis; set => NotifyStateUpdate(_pillarAxis, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _pillarAxis.Name:
						NotifyStateUpdate(_pillarAxis, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _pillarAxis;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _pillarAxis);
		} // method

		public override object Clone()
		{
			var block = (WarpedStem) base.Clone();

			block._pillarAxis = (MiNET.Blocks.States.PillarAxis) _pillarAxis.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:warped_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (WarpedTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedWallSign : WallSignBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:warped_wall_sign";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (WarpedWallSign) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WarpedWartBlock : Block
	{
		public override string Id => "minecraft:warped_wart_block";
	} // class

	public partial class Water
	{
		private MiNET.Blocks.States.LiquidDepth _liquidDepth = new MiNET.Blocks.States.LiquidDepth();

		public override string Id => "minecraft:water";

		[StateRange(0, 15)]
		public override int LiquidDepth { get => _liquidDepth.Value; set => NotifyStateUpdate(_liquidDepth, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _liquidDepth.Name:
						NotifyStateUpdate(_liquidDepth, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _liquidDepth;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _liquidDepth);
		} // method

		public override object Clone()
		{
			var block = (Water) base.Clone();

			block._liquidDepth = (MiNET.Blocks.States.LiquidDepth) _liquidDepth.Clone();

			return block;
		} // method
	} // class

	public partial class Waterlily : Block
	{
		public override string Id => "minecraft:waterlily";
	} // class

	public partial class WaxedChiseledCopper : Block
	{
		public override string Id => "minecraft:waxed_chiseled_copper";
	} // class

	public partial class WaxedCopper : Block
	{
		public override string Id => "minecraft:waxed_copper";
	} // class

	public partial class WaxedCopperBulb : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();
		private MiNET.Blocks.States.PoweredBit _poweredBit = new MiNET.Blocks.States.PoweredBit();

		public override string Id => "minecraft:waxed_copper_bulb";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		[StateBit]
		public bool PoweredBit { get => Convert.ToBoolean(_poweredBit.Value); set => NotifyStateUpdate(_poweredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
					case BlockStateByte s when s.Name == _poweredBit.Name:
						NotifyStateUpdate(_poweredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
			yield return _poweredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit, _poweredBit);
		} // method

		public override object Clone()
		{
			var block = (WaxedCopperBulb) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();
			block._poweredBit = (MiNET.Blocks.States.PoweredBit) _poweredBit.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedCopperDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:waxed_copper_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (WaxedCopperDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedCopperGrate : Block
	{
		public override string Id => "minecraft:waxed_copper_grate";
	} // class

	public partial class WaxedCopperTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:waxed_copper_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (WaxedCopperTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedCutCopper : Block
	{
		public override string Id => "minecraft:waxed_cut_copper";
	} // class

	public partial class WaxedCutCopperSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:waxed_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (WaxedCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedCutCopperStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:waxed_cut_copper_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (WaxedCutCopperStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedDoubleCutCopperSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:waxed_double_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (WaxedDoubleCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedExposedChiseledCopper : Block
	{
		public override string Id => "minecraft:waxed_exposed_chiseled_copper";
	} // class

	public partial class WaxedExposedCopper : Block
	{
		public override string Id => "minecraft:waxed_exposed_copper";
	} // class

	public partial class WaxedExposedCopperBulb : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();
		private MiNET.Blocks.States.PoweredBit _poweredBit = new MiNET.Blocks.States.PoweredBit();

		public override string Id => "minecraft:waxed_exposed_copper_bulb";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		[StateBit]
		public bool PoweredBit { get => Convert.ToBoolean(_poweredBit.Value); set => NotifyStateUpdate(_poweredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
					case BlockStateByte s when s.Name == _poweredBit.Name:
						NotifyStateUpdate(_poweredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
			yield return _poweredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit, _poweredBit);
		} // method

		public override object Clone()
		{
			var block = (WaxedExposedCopperBulb) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();
			block._poweredBit = (MiNET.Blocks.States.PoweredBit) _poweredBit.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedExposedCopperDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:waxed_exposed_copper_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (WaxedExposedCopperDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedExposedCopperGrate : Block
	{
		public override string Id => "minecraft:waxed_exposed_copper_grate";
	} // class

	public partial class WaxedExposedCopperTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:waxed_exposed_copper_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (WaxedExposedCopperTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedExposedCutCopper : Block
	{
		public override string Id => "minecraft:waxed_exposed_cut_copper";
	} // class

	public partial class WaxedExposedCutCopperSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:waxed_exposed_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (WaxedExposedCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedExposedCutCopperStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:waxed_exposed_cut_copper_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (WaxedExposedCutCopperStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedExposedDoubleCutCopperSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:waxed_exposed_double_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (WaxedExposedDoubleCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedOxidizedChiseledCopper : Block
	{
		public override string Id => "minecraft:waxed_oxidized_chiseled_copper";
	} // class

	public partial class WaxedOxidizedCopper : Block
	{
		public override string Id => "minecraft:waxed_oxidized_copper";
	} // class

	public partial class WaxedOxidizedCopperBulb : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();
		private MiNET.Blocks.States.PoweredBit _poweredBit = new MiNET.Blocks.States.PoweredBit();

		public override string Id => "minecraft:waxed_oxidized_copper_bulb";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		[StateBit]
		public bool PoweredBit { get => Convert.ToBoolean(_poweredBit.Value); set => NotifyStateUpdate(_poweredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
					case BlockStateByte s when s.Name == _poweredBit.Name:
						NotifyStateUpdate(_poweredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
			yield return _poweredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit, _poweredBit);
		} // method

		public override object Clone()
		{
			var block = (WaxedOxidizedCopperBulb) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();
			block._poweredBit = (MiNET.Blocks.States.PoweredBit) _poweredBit.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedOxidizedCopperDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:waxed_oxidized_copper_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (WaxedOxidizedCopperDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedOxidizedCopperGrate : Block
	{
		public override string Id => "minecraft:waxed_oxidized_copper_grate";
	} // class

	public partial class WaxedOxidizedCopperTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:waxed_oxidized_copper_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (WaxedOxidizedCopperTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedOxidizedCutCopper : Block
	{
		public override string Id => "minecraft:waxed_oxidized_cut_copper";
	} // class

	public partial class WaxedOxidizedCutCopperSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:waxed_oxidized_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (WaxedOxidizedCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedOxidizedCutCopperStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:waxed_oxidized_cut_copper_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (WaxedOxidizedCutCopperStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedOxidizedDoubleCutCopperSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:waxed_oxidized_double_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (WaxedOxidizedDoubleCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedWeatheredChiseledCopper : Block
	{
		public override string Id => "minecraft:waxed_weathered_chiseled_copper";
	} // class

	public partial class WaxedWeatheredCopper : Block
	{
		public override string Id => "minecraft:waxed_weathered_copper";
	} // class

	public partial class WaxedWeatheredCopperBulb : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();
		private MiNET.Blocks.States.PoweredBit _poweredBit = new MiNET.Blocks.States.PoweredBit();

		public override string Id => "minecraft:waxed_weathered_copper_bulb";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		[StateBit]
		public bool PoweredBit { get => Convert.ToBoolean(_poweredBit.Value); set => NotifyStateUpdate(_poweredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
					case BlockStateByte s when s.Name == _poweredBit.Name:
						NotifyStateUpdate(_poweredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
			yield return _poweredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit, _poweredBit);
		} // method

		public override object Clone()
		{
			var block = (WaxedWeatheredCopperBulb) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();
			block._poweredBit = (MiNET.Blocks.States.PoweredBit) _poweredBit.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedWeatheredCopperDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:waxed_weathered_copper_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (WaxedWeatheredCopperDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedWeatheredCopperGrate : Block
	{
		public override string Id => "minecraft:waxed_weathered_copper_grate";
	} // class

	public partial class WaxedWeatheredCopperTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:waxed_weathered_copper_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (WaxedWeatheredCopperTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedWeatheredCutCopper : Block
	{
		public override string Id => "minecraft:waxed_weathered_cut_copper";
	} // class

	public partial class WaxedWeatheredCutCopperSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:waxed_weathered_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (WaxedWeatheredCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedWeatheredCutCopperStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:waxed_weathered_cut_copper_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (WaxedWeatheredCutCopperStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WaxedWeatheredDoubleCutCopperSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:waxed_weathered_double_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (WaxedWeatheredDoubleCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class WeatheredChiseledCopper : Block
	{
		public override string Id => "minecraft:weathered_chiseled_copper";
	} // class

	public partial class WeatheredCopper : Block
	{
		public override string Id => "minecraft:weathered_copper";
	} // class

	public partial class WeatheredCopperBulb : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();
		private MiNET.Blocks.States.PoweredBit _poweredBit = new MiNET.Blocks.States.PoweredBit();

		public override string Id => "minecraft:weathered_copper_bulb";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		[StateBit]
		public bool PoweredBit { get => Convert.ToBoolean(_poweredBit.Value); set => NotifyStateUpdate(_poweredBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
					case BlockStateByte s when s.Name == _poweredBit.Name:
						NotifyStateUpdate(_poweredBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
			yield return _poweredBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit, _poweredBit);
		} // method

		public override object Clone()
		{
			var block = (WeatheredCopperBulb) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();
			block._poweredBit = (MiNET.Blocks.States.PoweredBit) _poweredBit.Clone();

			return block;
		} // method
	} // class

	public partial class WeatheredCopperDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:weathered_copper_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (WeatheredCopperDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class WeatheredCopperGrate : Block
	{
		public override string Id => "minecraft:weathered_copper_grate";
	} // class

	public partial class WeatheredCopperTrapdoor : TrapdoorBase
	{
		private MiNET.Blocks.States.OldDirection4 _direction = new MiNET.Blocks.States.OldDirection4();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();

		public override string Id => "minecraft:weathered_copper_trapdoor";

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.OldDirection4 Direction { get => _direction; set => NotifyStateUpdate(_direction, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _direction.Name:
						NotifyStateUpdate(_direction, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _direction;
			yield return _openBit;
			yield return _upsideDownBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _direction, _openBit, _upsideDownBit);
		} // method

		public override object Clone()
		{
			var block = (WeatheredCopperTrapdoor) base.Clone();

			block._direction = (MiNET.Blocks.States.OldDirection4) _direction.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();

			return block;
		} // method
	} // class

	public partial class WeatheredCutCopper : Block
	{
		public override string Id => "minecraft:weathered_cut_copper";
	} // class

	public partial class WeatheredCutCopperSlab : SlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:weathered_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (WeatheredCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class WeatheredCutCopperStairs : StairsBase
	{
		private MiNET.Blocks.States.UpsideDownBit _upsideDownBit = new MiNET.Blocks.States.UpsideDownBit();
		private MiNET.Blocks.States.WeirdoDirection _weirdoDirection = new MiNET.Blocks.States.WeirdoDirection();

		public override string Id => "minecraft:weathered_cut_copper_stairs";

		[StateBit]
		public override bool UpsideDownBit { get => Convert.ToBoolean(_upsideDownBit.Value); set => NotifyStateUpdate(_upsideDownBit, value); }

		[StateRange(0, 3)]
		public override MiNET.Blocks.States.WeirdoDirection WeirdoDirection { get => _weirdoDirection; set => NotifyStateUpdate(_weirdoDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _upsideDownBit.Name:
						NotifyStateUpdate(_upsideDownBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _weirdoDirection.Name:
						NotifyStateUpdate(_weirdoDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _upsideDownBit;
			yield return _weirdoDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _upsideDownBit, _weirdoDirection);
		} // method

		public override object Clone()
		{
			var block = (WeatheredCutCopperStairs) base.Clone();

			block._upsideDownBit = (MiNET.Blocks.States.UpsideDownBit) _upsideDownBit.Clone();
			block._weirdoDirection = (MiNET.Blocks.States.WeirdoDirection) _weirdoDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WeatheredDoubleCutCopperSlab : DoubleSlabBase
	{
		private MiNET.Blocks.States.VerticalHalf _verticalHalf = (States.VerticalHalf) MiNET.Blocks.States.VerticalHalf.Bottom.Clone();

		public override string Id => "minecraft:weathered_double_cut_copper_slab";

		[StateEnum("bottom", "top")]
		public override MiNET.Blocks.States.VerticalHalf VerticalHalf { get => _verticalHalf; set => NotifyStateUpdate(_verticalHalf, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateString s when s.Name == _verticalHalf.Name:
						NotifyStateUpdate(_verticalHalf, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _verticalHalf;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _verticalHalf);
		} // method

		public override object Clone()
		{
			var block = (WeatheredDoubleCutCopperSlab) base.Clone();

			block._verticalHalf = (MiNET.Blocks.States.VerticalHalf) _verticalHalf.Clone();

			return block;
		} // method
	} // class

	public partial class Web : Block
	{
		public override string Id => "minecraft:web";
	} // class

	public partial class WeepingVines : Block
	{
		private MiNET.Blocks.States.WeepingVinesAge _weepingVinesAge = new MiNET.Blocks.States.WeepingVinesAge();

		public override string Id => "minecraft:weeping_vines";

		[StateRange(0, 25)]
		public int WeepingVinesAge { get => _weepingVinesAge.Value; set => NotifyStateUpdate(_weepingVinesAge, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _weepingVinesAge.Name:
						NotifyStateUpdate(_weepingVinesAge, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _weepingVinesAge;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _weepingVinesAge);
		} // method

		public override object Clone()
		{
			var block = (WeepingVines) base.Clone();

			block._weepingVinesAge = (MiNET.Blocks.States.WeepingVinesAge) _weepingVinesAge.Clone();

			return block;
		} // method
	} // class

	public partial class WetSponge : Block
	{
		public override string Id => "minecraft:wet_sponge";
	} // class

	public partial class Wheat
	{
		private MiNET.Blocks.States.Growth _growth = new MiNET.Blocks.States.Growth();

		public override string Id => "minecraft:wheat";

		[StateRange(0, 7)]
		public override int Growth { get => _growth.Value; set => NotifyStateUpdate(_growth, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _growth.Name:
						NotifyStateUpdate(_growth, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _growth;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _growth);
		} // method

		public override object Clone()
		{
			var block = (Wheat) base.Clone();

			block._growth = (MiNET.Blocks.States.Growth) _growth.Clone();

			return block;
		} // method
	} // class

	public partial class WhiteCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:white_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (WhiteCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class WhiteCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:white_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (WhiteCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class WhiteCarpet : CarpetBase
	{
		public override string Id => "minecraft:white_carpet";
	} // class

	public partial class WhiteConcrete : ConcreteBase
	{
		public override string Id => "minecraft:white_concrete";
	} // class

	public partial class WhiteConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:white_concrete_powder";
	} // class

	public partial class WhiteGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:white_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (WhiteGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WhiteShulkerBox : Block
	{
		public override string Id => "minecraft:white_shulker_box";
	} // class

	public partial class WhiteStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:white_stained_glass";
	} // class

	public partial class WhiteStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:white_stained_glass_pane";
	} // class

	public partial class WhiteTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:white_terracotta";
	} // class

	public partial class WhiteTulip : FlowerBase
	{
		public override string Id => "minecraft:white_tulip";
	} // class

	public partial class WhiteWool : WoolBase
	{
		public override string Id => "minecraft:white_wool";
	} // class

	public partial class WitherRose : Block
	{
		public override string Id => "minecraft:wither_rose";
	} // class

	public partial class WitherSkeletonSkull : HeadBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:wither_skeleton_skull";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (WitherSkeletonSkull) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WoodenButton : ButtonBase
	{
		private MiNET.Blocks.States.ButtonPressedBit _buttonPressedBit = new MiNET.Blocks.States.ButtonPressedBit();
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:wooden_button";

		[StateBit]
		public override bool ButtonPressedBit { get => Convert.ToBoolean(_buttonPressedBit.Value); set => NotifyStateUpdate(_buttonPressedBit, value); }

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _buttonPressedBit.Name:
						NotifyStateUpdate(_buttonPressedBit, s.Value);
						break;
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _buttonPressedBit;
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _buttonPressedBit, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (WoodenButton) base.Clone();

			block._buttonPressedBit = (MiNET.Blocks.States.ButtonPressedBit) _buttonPressedBit.Clone();
			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class WoodenDoor : DoorBase
	{
		private MiNET.Blocks.States.DoorHingeBit _doorHingeBit = new MiNET.Blocks.States.DoorHingeBit();
		private MiNET.Blocks.States.CardinalDirection _cardinalDirection = (States.CardinalDirection) MiNET.Blocks.States.CardinalDirection.South.Clone();
		private MiNET.Blocks.States.OpenBit _openBit = new MiNET.Blocks.States.OpenBit();
		private MiNET.Blocks.States.UpperBlockBit _upperBlockBit = new MiNET.Blocks.States.UpperBlockBit();

		public override string Id => "minecraft:wooden_door";

		[StateBit]
		public override bool DoorHingeBit { get => Convert.ToBoolean(_doorHingeBit.Value); set => NotifyStateUpdate(_doorHingeBit, value); }

		[StateEnum("east", "north", "south", "west")]
		public override MiNET.Blocks.States.CardinalDirection Direction { get => _cardinalDirection; set => NotifyStateUpdate(_cardinalDirection, value.Value); }

		[StateBit]
		public override bool OpenBit { get => Convert.ToBoolean(_openBit.Value); set => NotifyStateUpdate(_openBit, value); }

		[StateBit]
		public override bool UpperBlockBit { get => Convert.ToBoolean(_upperBlockBit.Value); set => NotifyStateUpdate(_upperBlockBit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _doorHingeBit.Name:
						NotifyStateUpdate(_doorHingeBit, s.Value);
						break;
					case BlockStateString s when s.Name == _cardinalDirection.Name:
						NotifyStateUpdate(_cardinalDirection, s.Value);
						break;
					case BlockStateByte s when s.Name == _openBit.Name:
						NotifyStateUpdate(_openBit, s.Value);
						break;
					case BlockStateByte s when s.Name == _upperBlockBit.Name:
						NotifyStateUpdate(_upperBlockBit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _doorHingeBit;
			yield return _cardinalDirection;
			yield return _openBit;
			yield return _upperBlockBit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _doorHingeBit, _cardinalDirection, _openBit, _upperBlockBit);
		} // method

		public override object Clone()
		{
			var block = (WoodenDoor) base.Clone();

			block._doorHingeBit = (MiNET.Blocks.States.DoorHingeBit) _doorHingeBit.Clone();
			block._cardinalDirection = (MiNET.Blocks.States.CardinalDirection) _cardinalDirection.Clone();
			block._openBit = (MiNET.Blocks.States.OpenBit) _openBit.Clone();
			block._upperBlockBit = (MiNET.Blocks.States.UpperBlockBit) _upperBlockBit.Clone();

			return block;
		} // method
	} // class

	public partial class WoodenPressurePlate : Block
	{
		private MiNET.Blocks.States.RedstoneSignal _redstoneSignal = new MiNET.Blocks.States.RedstoneSignal();

		public override string Id => "minecraft:wooden_pressure_plate";

		[StateRange(0, 15)]
		public int RedstoneSignal { get => _redstoneSignal.Value; set => NotifyStateUpdate(_redstoneSignal, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _redstoneSignal.Name:
						NotifyStateUpdate(_redstoneSignal, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _redstoneSignal;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _redstoneSignal);
		} // method

		public override object Clone()
		{
			var block = (WoodenPressurePlate) base.Clone();

			block._redstoneSignal = (MiNET.Blocks.States.RedstoneSignal) _redstoneSignal.Clone();

			return block;
		} // method
	} // class

	public partial class YellowCandle : Block
	{
		private MiNET.Blocks.States.Candles _candles = new MiNET.Blocks.States.Candles();
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:yellow_candle";

		[StateRange(0, 3)]
		public int Candles { get => _candles.Value; set => NotifyStateUpdate(_candles, value); }

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _candles.Name:
						NotifyStateUpdate(_candles, s.Value);
						break;
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _candles;
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _candles, _lit);
		} // method

		public override object Clone()
		{
			var block = (YellowCandle) base.Clone();

			block._candles = (MiNET.Blocks.States.Candles) _candles.Clone();
			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class YellowCandleCake : Block
	{
		private MiNET.Blocks.States.Lit _lit = new MiNET.Blocks.States.Lit();

		public override string Id => "minecraft:yellow_candle_cake";

		[StateBit]
		public bool Lit { get => Convert.ToBoolean(_lit.Value); set => NotifyStateUpdate(_lit, value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateByte s when s.Name == _lit.Name:
						NotifyStateUpdate(_lit, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _lit;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _lit);
		} // method

		public override object Clone()
		{
			var block = (YellowCandleCake) base.Clone();

			block._lit = (MiNET.Blocks.States.Lit) _lit.Clone();

			return block;
		} // method
	} // class

	public partial class YellowCarpet : CarpetBase
	{
		public override string Id => "minecraft:yellow_carpet";
	} // class

	public partial class YellowConcrete : ConcreteBase
	{
		public override string Id => "minecraft:yellow_concrete";
	} // class

	public partial class YellowConcretePowder : ConcretePowderBase
	{
		public override string Id => "minecraft:yellow_concrete_powder";
	} // class

	public partial class YellowGlazedTerracotta : GlazedTerracottaBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:yellow_glazed_terracotta";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (YellowGlazedTerracotta) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class

	public partial class YellowShulkerBox : Block
	{
		public override string Id => "minecraft:yellow_shulker_box";
	} // class

	public partial class YellowStainedGlass : StainedGlassBase
	{
		public override string Id => "minecraft:yellow_stained_glass";
	} // class

	public partial class YellowStainedGlassPane : StainedGlassPaneBase
	{
		public override string Id => "minecraft:yellow_stained_glass_pane";
	} // class

	public partial class YellowTerracotta : TerracottaBase
	{
		public override string Id => "minecraft:yellow_terracotta";
	} // class

	public partial class YellowWool : WoolBase
	{
		public override string Id => "minecraft:yellow_wool";
	} // class

	public partial class ZombieHead : HeadBase
	{
		private MiNET.Blocks.States.OldFacingDirection4 _facingDirection = new MiNET.Blocks.States.OldFacingDirection4();

		public override string Id => "minecraft:zombie_head";

		[StateRange(0, 5)]
		public override MiNET.Blocks.States.OldFacingDirection4 FacingDirection { get => _facingDirection; set => NotifyStateUpdate(_facingDirection, value.Value); }

		public override void SetStates(IEnumerable<IBlockState> states)
		{
			foreach (var state in states)
			{
				switch (state)
				{
					case BlockStateInt s when s.Name == _facingDirection.Name:
						NotifyStateUpdate(_facingDirection, s.Value);
						break;
				} // switch
			} // foreach
		} // method

		protected override IEnumerable<IBlockState> GetStates()
		{
			yield return _facingDirection;
		} // method

		public override int GetHashCode()
		{
			return HashCode.Combine(Id, _facingDirection);
		} // method

		public override object Clone()
		{
			var block = (ZombieHead) base.Clone();

			block._facingDirection = (MiNET.Blocks.States.OldFacingDirection4) _facingDirection.Clone();

			return block;
		} // method
	} // class
}
